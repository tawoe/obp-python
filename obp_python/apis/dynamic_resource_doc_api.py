# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DynamicResourceDocApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def o_b_pv4_0_0_build_dynamic_endpoint_template(self, body, **kwargs):
        """
        Create Dynamic Resource Doc endpoint code
        <p>Create a Dynamic Resource Doc endpoint code.</p><p>copy the response and past to PractiseEndpoint, So you can have the benefits of<br />auto compilation and debug</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_build_dynamic_endpoint_template(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ResourceDocFragment body: ResourceDocFragment object that needs to be added. (required)
        :return: Tuple2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_build_dynamic_endpoint_template_with_http_info(body, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_build_dynamic_endpoint_template_with_http_info(body, **kwargs)
            return data

    def o_b_pv4_0_0_build_dynamic_endpoint_template_with_http_info(self, body, **kwargs):
        """
        Create Dynamic Resource Doc endpoint code
        <p>Create a Dynamic Resource Doc endpoint code.</p><p>copy the response and past to PractiseEndpoint, So you can have the benefits of<br />auto compilation and debug</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_build_dynamic_endpoint_template_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ResourceDocFragment body: ResourceDocFragment object that needs to be added. (required)
        :return: Tuple2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_build_dynamic_endpoint_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_build_dynamic_endpoint_template`")

        resource_path = '/obp/v5.0.0/management/dynamic-resource-docs/endpoint-code'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Tuple2',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_create_bank_level_dynamic_resource_doc(self, body, bank_id, **kwargs):
        """
        Create Bank Level Dynamic Resource Doc
        <p>Create a Bank Level Dynamic Resource Doc.</p><p>The connector_method_body is URL-encoded format String</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_create_bank_level_dynamic_resource_doc(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JsonDynamicResourceDoc body: JsonDynamicResourceDoc object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_create_bank_level_dynamic_resource_doc_with_http_info(body, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_create_bank_level_dynamic_resource_doc_with_http_info(body, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_create_bank_level_dynamic_resource_doc_with_http_info(self, body, bank_id, **kwargs):
        """
        Create Bank Level Dynamic Resource Doc
        <p>Create a Bank Level Dynamic Resource Doc.</p><p>The connector_method_body is URL-encoded format String</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_create_bank_level_dynamic_resource_doc_with_http_info(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JsonDynamicResourceDoc body: JsonDynamicResourceDoc object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_create_bank_level_dynamic_resource_doc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_create_bank_level_dynamic_resource_doc`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_create_bank_level_dynamic_resource_doc`")

        resource_path = '/obp/v5.0.0/management/banks/{BANK_ID}/dynamic-resource-docs'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='JsonDynamicResourceDoc',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_create_dynamic_resource_doc(self, body, **kwargs):
        """
        Create Dynamic Resource Doc
        <p>Create a Dynamic Resource Doc.</p><p>The connector_method_body is URL-encoded format String</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_create_dynamic_resource_doc(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JsonDynamicResourceDoc body: JsonDynamicResourceDoc object that needs to be added. (required)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_create_dynamic_resource_doc_with_http_info(body, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_create_dynamic_resource_doc_with_http_info(body, **kwargs)
            return data

    def o_b_pv4_0_0_create_dynamic_resource_doc_with_http_info(self, body, **kwargs):
        """
        Create Dynamic Resource Doc
        <p>Create a Dynamic Resource Doc.</p><p>The connector_method_body is URL-encoded format String</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_create_dynamic_resource_doc_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JsonDynamicResourceDoc body: JsonDynamicResourceDoc object that needs to be added. (required)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_create_dynamic_resource_doc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_create_dynamic_resource_doc`")

        resource_path = '/obp/v5.0.0/management/dynamic-resource-docs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='JsonDynamicResourceDoc',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_delete_bank_level_dynamic_resource_doc(self, bank_id, **kwargs):
        """
        Delete Bank Level Dynamic Resource Doc
        <p>Delete a Bank Level Dynamic Resource Doc.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_delete_bank_level_dynamic_resource_doc(bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bank_id: The bank id (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_delete_bank_level_dynamic_resource_doc_with_http_info(bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_delete_bank_level_dynamic_resource_doc_with_http_info(bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_delete_bank_level_dynamic_resource_doc_with_http_info(self, bank_id, **kwargs):
        """
        Delete Bank Level Dynamic Resource Doc
        <p>Delete a Bank Level Dynamic Resource Doc.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_delete_bank_level_dynamic_resource_doc_with_http_info(bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bank_id: The bank id (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_delete_bank_level_dynamic_resource_doc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_delete_bank_level_dynamic_resource_doc`")

        resource_path = '/obp/v5.0.0/management/banks/{BANK_ID}/dynamic-resource-docs/DYNAMIC-RESOURCE-DOC-ID'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_delete_dynamic_resource_doc(self, **kwargs):
        """
        Delete Dynamic Resource Doc
        <p>Delete a Dynamic Resource Doc.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_delete_dynamic_resource_doc(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_delete_dynamic_resource_doc_with_http_info(**kwargs)
        else:
            (data) = self.o_b_pv4_0_0_delete_dynamic_resource_doc_with_http_info(**kwargs)
            return data

    def o_b_pv4_0_0_delete_dynamic_resource_doc_with_http_info(self, **kwargs):
        """
        Delete Dynamic Resource Doc
        <p>Delete a Dynamic Resource Doc.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_delete_dynamic_resource_doc_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_delete_dynamic_resource_doc" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/obp/v5.0.0/management/dynamic-resource-docs/DYNAMIC-RESOURCE-DOC-ID'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_get_all_bank_level_dynamic_resource_docs(self, bank_id, **kwargs):
        """
        Get all Bank Level Dynamic Resource Docs
        <p>Get all Bank Level Dynamic Resource Docs.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_all_bank_level_dynamic_resource_docs(bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bank_id: The bank id (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_get_all_bank_level_dynamic_resource_docs_with_http_info(bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_get_all_bank_level_dynamic_resource_docs_with_http_info(bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_get_all_bank_level_dynamic_resource_docs_with_http_info(self, bank_id, **kwargs):
        """
        Get all Bank Level Dynamic Resource Docs
        <p>Get all Bank Level Dynamic Resource Docs.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_all_bank_level_dynamic_resource_docs_with_http_info(bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bank_id: The bank id (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_get_all_bank_level_dynamic_resource_docs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_get_all_bank_level_dynamic_resource_docs`")

        resource_path = '/obp/v5.0.0/management/banks/{BANK_ID}/dynamic-resource-docs'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2006',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_get_all_dynamic_resource_docs(self, **kwargs):
        """
        Get all Dynamic Resource Docs
        <p>Get all Dynamic Resource Docs.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_all_dynamic_resource_docs(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_get_all_dynamic_resource_docs_with_http_info(**kwargs)
        else:
            (data) = self.o_b_pv4_0_0_get_all_dynamic_resource_docs_with_http_info(**kwargs)
            return data

    def o_b_pv4_0_0_get_all_dynamic_resource_docs_with_http_info(self, **kwargs):
        """
        Get all Dynamic Resource Docs
        <p>Get all Dynamic Resource Docs.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_all_dynamic_resource_docs_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_get_all_dynamic_resource_docs" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/obp/v5.0.0/management/dynamic-resource-docs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2006',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_get_bank_level_dynamic_resource_doc(self, bank_id, **kwargs):
        """
        Get Bank Level Dynamic Resource Doc by Id
        <p>Get a Bank Level Dynamic Resource Doc by DYNAMIC-RESOURCE-DOC-ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_bank_level_dynamic_resource_doc(bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bank_id: The bank id (required)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_get_bank_level_dynamic_resource_doc_with_http_info(bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_get_bank_level_dynamic_resource_doc_with_http_info(bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_get_bank_level_dynamic_resource_doc_with_http_info(self, bank_id, **kwargs):
        """
        Get Bank Level Dynamic Resource Doc by Id
        <p>Get a Bank Level Dynamic Resource Doc by DYNAMIC-RESOURCE-DOC-ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_bank_level_dynamic_resource_doc_with_http_info(bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bank_id: The bank id (required)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_get_bank_level_dynamic_resource_doc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_get_bank_level_dynamic_resource_doc`")

        resource_path = '/obp/v5.0.0/management/banks/{BANK_ID}/dynamic-resource-docs/DYNAMIC-RESOURCE-DOC-ID'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='JsonDynamicResourceDoc',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_get_dynamic_resource_doc(self, **kwargs):
        """
        Get Dynamic Resource Doc by Id
        <p>Get a Dynamic Resource Doc by DYNAMIC-RESOURCE-DOC-ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_dynamic_resource_doc(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_get_dynamic_resource_doc_with_http_info(**kwargs)
        else:
            (data) = self.o_b_pv4_0_0_get_dynamic_resource_doc_with_http_info(**kwargs)
            return data

    def o_b_pv4_0_0_get_dynamic_resource_doc_with_http_info(self, **kwargs):
        """
        Get Dynamic Resource Doc by Id
        <p>Get a Dynamic Resource Doc by DYNAMIC-RESOURCE-DOC-ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_dynamic_resource_doc_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_get_dynamic_resource_doc" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/obp/v5.0.0/management/dynamic-resource-docs/DYNAMIC-RESOURCE-DOC-ID'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='JsonDynamicResourceDoc',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_test_dynamic_resource_doc(self, body, **kwargs):
        """
        A test endpoint
        <p>A test endpoint.</p><p>Just for debug method body of dynamic resource doc.<br />better watch the following introduction video first<br />* <a href=\"https://vimeo.com/623381607\">Dynamic resourceDoc version1</a></p><p>The endpoint return the response from PractiseEndpoint code.<br />Here, code.api.DynamicEndpoints.dynamic.practise.PractiseEndpoint.process<br />You can test the method body grammar, and try the business logic, but need to restart the OBP-API code .</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_test_dynamic_resource_doc(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RequestRootJsonClass body: RequestRootJsonClass object that needs to be added. (required)
        :return: RequestRootJsonClass
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_test_dynamic_resource_doc_with_http_info(body, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_test_dynamic_resource_doc_with_http_info(body, **kwargs)
            return data

    def o_b_pv4_0_0_test_dynamic_resource_doc_with_http_info(self, body, **kwargs):
        """
        A test endpoint
        <p>A test endpoint.</p><p>Just for debug method body of dynamic resource doc.<br />better watch the following introduction video first<br />* <a href=\"https://vimeo.com/623381607\">Dynamic resourceDoc version1</a></p><p>The endpoint return the response from PractiseEndpoint code.<br />Here, code.api.DynamicEndpoints.dynamic.practise.PractiseEndpoint.process<br />You can test the method body grammar, and try the business logic, but need to restart the OBP-API code .</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_test_dynamic_resource_doc_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RequestRootJsonClass body: RequestRootJsonClass object that needs to be added. (required)
        :return: RequestRootJsonClass
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_test_dynamic_resource_doc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_test_dynamic_resource_doc`")

        resource_path = '/test-dynamic-resource-doc/my_user/MY_USER_ID'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RequestRootJsonClass',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_update_bank_level_dynamic_resource_doc(self, body, bank_id, **kwargs):
        """
        Update Bank Level Dynamic Resource Doc
        <p>Update a Bank Level Dynamic Resource Doc.</p><p>The connector_method_body is URL-encoded format String</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_bank_level_dynamic_resource_doc(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JsonDynamicResourceDoc body: JsonDynamicResourceDoc object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_update_bank_level_dynamic_resource_doc_with_http_info(body, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_update_bank_level_dynamic_resource_doc_with_http_info(body, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_update_bank_level_dynamic_resource_doc_with_http_info(self, body, bank_id, **kwargs):
        """
        Update Bank Level Dynamic Resource Doc
        <p>Update a Bank Level Dynamic Resource Doc.</p><p>The connector_method_body is URL-encoded format String</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_bank_level_dynamic_resource_doc_with_http_info(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JsonDynamicResourceDoc body: JsonDynamicResourceDoc object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_update_bank_level_dynamic_resource_doc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_update_bank_level_dynamic_resource_doc`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_update_bank_level_dynamic_resource_doc`")

        resource_path = '/obp/v5.0.0/management/banks/{BANK_ID}/dynamic-resource-docs/DYNAMIC-RESOURCE-DOC-ID'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='JsonDynamicResourceDoc',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_update_dynamic_resource_doc(self, body, **kwargs):
        """
        Update Dynamic Resource Doc
        <p>Update a Dynamic Resource Doc.</p><p>The connector_method_body is URL-encoded format String</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_dynamic_resource_doc(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JsonDynamicResourceDoc body: JsonDynamicResourceDoc object that needs to be added. (required)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_update_dynamic_resource_doc_with_http_info(body, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_update_dynamic_resource_doc_with_http_info(body, **kwargs)
            return data

    def o_b_pv4_0_0_update_dynamic_resource_doc_with_http_info(self, body, **kwargs):
        """
        Update Dynamic Resource Doc
        <p>Update a Dynamic Resource Doc.</p><p>The connector_method_body is URL-encoded format String</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_dynamic_resource_doc_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JsonDynamicResourceDoc body: JsonDynamicResourceDoc object that needs to be added. (required)
        :return: JsonDynamicResourceDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_update_dynamic_resource_doc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_update_dynamic_resource_doc`")

        resource_path = '/obp/v5.0.0/management/dynamic-resource-docs/DYNAMIC-RESOURCE-DOC-ID'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='JsonDynamicResourceDoc',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
