# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ConsumerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def o_b_pv2_1_0_update_consumer_redirect_url(self, body, consumer_id, **kwargs):
        """
        Update Consumer RedirectUrl
        <p>Update an existing redirectUrl for a Consumer specified by CONSUMER_ID.</p><p>CONSUMER_ID can be obtained after you register the application.</p><p>Or use the endpoint 'Get Consumers' to get it</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_1_0_update_consumer_redirect_url(body, consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConsumerRedirectUrlJSON body: ConsumerRedirectUrlJSON object that needs to be added. (required)
        :param str consumer_id: new consumer id (required)
        :return: ConsumerJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv2_1_0_update_consumer_redirect_url_with_http_info(body, consumer_id, **kwargs)
        else:
            (data) = self.o_b_pv2_1_0_update_consumer_redirect_url_with_http_info(body, consumer_id, **kwargs)
            return data

    def o_b_pv2_1_0_update_consumer_redirect_url_with_http_info(self, body, consumer_id, **kwargs):
        """
        Update Consumer RedirectUrl
        <p>Update an existing redirectUrl for a Consumer specified by CONSUMER_ID.</p><p>CONSUMER_ID can be obtained after you register the application.</p><p>Or use the endpoint 'Get Consumers' to get it</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_1_0_update_consumer_redirect_url_with_http_info(body, consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConsumerRedirectUrlJSON body: ConsumerRedirectUrlJSON object that needs to be added. (required)
        :param str consumer_id: new consumer id (required)
        :return: ConsumerJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'consumer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv2_1_0_update_consumer_redirect_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv2_1_0_update_consumer_redirect_url`")
        # verify the required parameter 'consumer_id' is set
        if ('consumer_id' not in params) or (params['consumer_id'] is None):
            raise ValueError("Missing the required parameter `consumer_id` when calling `o_b_pv2_1_0_update_consumer_redirect_url`")

        resource_path = '/obp/v5.0.0/management/consumers/{CONSUMER_ID}/consumer/redirect_url'.replace('{format}', 'json')
        path_params = {}
        if 'consumer_id' in params:
            path_params['CONSUMER_ID'] = params['consumer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConsumerJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_0_0_delete_scope(self, scope_id, consumer_id, **kwargs):
        """
        Delete Consumer Scope
        <p>Delete Consumer Scope specified by SCOPE_ID for an consumer specified by CONSUMER_ID</p><p>Authentication is required and the user needs to be a Super Admin.<br />Super Admins are listed in the Props file.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_0_0_delete_scope(scope_id, consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope_id: the scope id (required)
        :param str consumer_id: new consumer id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_0_0_delete_scope_with_http_info(scope_id, consumer_id, **kwargs)
        else:
            (data) = self.o_b_pv3_0_0_delete_scope_with_http_info(scope_id, consumer_id, **kwargs)
            return data

    def o_b_pv3_0_0_delete_scope_with_http_info(self, scope_id, consumer_id, **kwargs):
        """
        Delete Consumer Scope
        <p>Delete Consumer Scope specified by SCOPE_ID for an consumer specified by CONSUMER_ID</p><p>Authentication is required and the user needs to be a Super Admin.<br />Super Admins are listed in the Props file.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_0_0_delete_scope_with_http_info(scope_id, consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope_id: the scope id (required)
        :param str consumer_id: new consumer id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'consumer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_0_0_delete_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params) or (params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `o_b_pv3_0_0_delete_scope`")
        # verify the required parameter 'consumer_id' is set
        if ('consumer_id' not in params) or (params['consumer_id'] is None):
            raise ValueError("Missing the required parameter `consumer_id` when calling `o_b_pv3_0_0_delete_scope`")

        resource_path = '/obp/v5.0.0/consumers/{CONSUMER_ID}/scope/{SCOPE_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'scope_id' in params:
            path_params['SCOPE_ID'] = params['scope_id']
        if 'consumer_id' in params:
            path_params['CONSUMER_ID'] = params['consumer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_1_0_enable_disable_consumers(self, body, consumer_id, **kwargs):
        """
        Enable or Disable Consumers
        <p>Enable/Disable a Consumer specified by CONSUMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_enable_disable_consumers(body, consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PutEnabledJSON body: PutEnabledJSON object that needs to be added. (required)
        :param str consumer_id: new consumer id (required)
        :return: PutEnabledJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_1_0_enable_disable_consumers_with_http_info(body, consumer_id, **kwargs)
        else:
            (data) = self.o_b_pv3_1_0_enable_disable_consumers_with_http_info(body, consumer_id, **kwargs)
            return data

    def o_b_pv3_1_0_enable_disable_consumers_with_http_info(self, body, consumer_id, **kwargs):
        """
        Enable or Disable Consumers
        <p>Enable/Disable a Consumer specified by CONSUMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_enable_disable_consumers_with_http_info(body, consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PutEnabledJSON body: PutEnabledJSON object that needs to be added. (required)
        :param str consumer_id: new consumer id (required)
        :return: PutEnabledJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'consumer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_1_0_enable_disable_consumers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv3_1_0_enable_disable_consumers`")
        # verify the required parameter 'consumer_id' is set
        if ('consumer_id' not in params) or (params['consumer_id'] is None):
            raise ValueError("Missing the required parameter `consumer_id` when calling `o_b_pv3_1_0_enable_disable_consumers`")

        resource_path = '/obp/v5.0.0/management/consumers/{CONSUMER_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'consumer_id' in params:
            path_params['CONSUMER_ID'] = params['consumer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PutEnabledJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_1_0_get_calls_limit(self, consumer_id, **kwargs):
        """
        Get Call Limits for a Consumer
        <p>Get Calls limits per Consumer.<br />Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_calls_limit(consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str consumer_id: new consumer id (required)
        :return: CallLimitJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_1_0_get_calls_limit_with_http_info(consumer_id, **kwargs)
        else:
            (data) = self.o_b_pv3_1_0_get_calls_limit_with_http_info(consumer_id, **kwargs)
            return data

    def o_b_pv3_1_0_get_calls_limit_with_http_info(self, consumer_id, **kwargs):
        """
        Get Call Limits for a Consumer
        <p>Get Calls limits per Consumer.<br />Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_calls_limit_with_http_info(consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str consumer_id: new consumer id (required)
        :return: CallLimitJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consumer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_1_0_get_calls_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consumer_id' is set
        if ('consumer_id' not in params) or (params['consumer_id'] is None):
            raise ValueError("Missing the required parameter `consumer_id` when calling `o_b_pv3_1_0_get_calls_limit`")

        resource_path = '/obp/v5.0.0/management/consumers/{CONSUMER_ID}/consumer/call-limits'.replace('{format}', 'json')
        path_params = {}
        if 'consumer_id' in params:
            path_params['CONSUMER_ID'] = params['consumer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CallLimitJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_1_0_get_consumer(self, consumer_id, **kwargs):
        """
        Get Consumer
        <p>Get the Consumer specified by CONSUMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_consumer(consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str consumer_id: new consumer id (required)
        :return: ConsumerJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_1_0_get_consumer_with_http_info(consumer_id, **kwargs)
        else:
            (data) = self.o_b_pv3_1_0_get_consumer_with_http_info(consumer_id, **kwargs)
            return data

    def o_b_pv3_1_0_get_consumer_with_http_info(self, consumer_id, **kwargs):
        """
        Get Consumer
        <p>Get the Consumer specified by CONSUMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_consumer_with_http_info(consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str consumer_id: new consumer id (required)
        :return: ConsumerJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consumer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_1_0_get_consumer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consumer_id' is set
        if ('consumer_id' not in params) or (params['consumer_id'] is None):
            raise ValueError("Missing the required parameter `consumer_id` when calling `o_b_pv3_1_0_get_consumer`")

        resource_path = '/obp/v5.0.0/management/consumers/{CONSUMER_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'consumer_id' in params:
            path_params['CONSUMER_ID'] = params['consumer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConsumerJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_1_0_get_consumers(self, **kwargs):
        """
        Get Consumers
        <p>Get the all Consumers.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_consumers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ConsumersJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_1_0_get_consumers_with_http_info(**kwargs)
        else:
            (data) = self.o_b_pv3_1_0_get_consumers_with_http_info(**kwargs)
            return data

    def o_b_pv3_1_0_get_consumers_with_http_info(self, **kwargs):
        """
        Get Consumers
        <p>Get the all Consumers.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_consumers_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ConsumersJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_1_0_get_consumers" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/obp/v5.0.0/management/consumers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConsumersJsonV310',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_1_0_get_consumers_for_current_user(self, **kwargs):
        """
        Get Consumers (logged in User)
        <p>Get the Consumers for logged in User.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_consumers_for_current_user(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ConsumersJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_1_0_get_consumers_for_current_user_with_http_info(**kwargs)
        else:
            (data) = self.o_b_pv3_1_0_get_consumers_for_current_user_with_http_info(**kwargs)
            return data

    def o_b_pv3_1_0_get_consumers_for_current_user_with_http_info(self, **kwargs):
        """
        Get Consumers (logged in User)
        <p>Get the Consumers for logged in User.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_consumers_for_current_user_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ConsumersJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_1_0_get_consumers_for_current_user" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/obp/v5.0.0/management/users/current/consumers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConsumersJsonV310',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_add_scope(self, body, consumer_id, **kwargs):
        """
        Create Scope for a Consumer
        <p>Create Scope. Grant Role to Consumer.</p><p>Scopes are used to grant System or Bank level roles to the Consumer (App). (For Account level privileges, see Views)</p><p>For a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. &quot;bank_id&quot;:&quot;&quot;</p><p>For a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. &quot;bank_id&quot;:&quot;my-bank-id&quot;</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_add_scope(body, consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateScopeJson body: CreateScopeJson object that needs to be added. (required)
        :param str consumer_id: new consumer id (required)
        :return: ScopeJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_add_scope_with_http_info(body, consumer_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_add_scope_with_http_info(body, consumer_id, **kwargs)
            return data

    def o_b_pv4_0_0_add_scope_with_http_info(self, body, consumer_id, **kwargs):
        """
        Create Scope for a Consumer
        <p>Create Scope. Grant Role to Consumer.</p><p>Scopes are used to grant System or Bank level roles to the Consumer (App). (For Account level privileges, see Views)</p><p>For a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. &quot;bank_id&quot;:&quot;&quot;</p><p>For a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. &quot;bank_id&quot;:&quot;my-bank-id&quot;</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_add_scope_with_http_info(body, consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateScopeJson body: CreateScopeJson object that needs to be added. (required)
        :param str consumer_id: new consumer id (required)
        :return: ScopeJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'consumer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_add_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_add_scope`")
        # verify the required parameter 'consumer_id' is set
        if ('consumer_id' not in params) or (params['consumer_id'] is None):
            raise ValueError("Missing the required parameter `consumer_id` when calling `o_b_pv4_0_0_add_scope`")

        resource_path = '/obp/v5.0.0/consumers/{CONSUMER_ID}/scopes'.replace('{format}', 'json')
        path_params = {}
        if 'consumer_id' in params:
            path_params['CONSUMER_ID'] = params['consumer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ScopeJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_calls_limit(self, body, consumer_id, **kwargs):
        """
        Set Calls Limit for a Consumer
        <p>Set the API call limits for a Consumer:</p><p>Per Second<br />Per Minute<br />Per Hour<br />Per Week<br />Per Month</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_calls_limit(body, consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CallLimitPostJsonV400 body: CallLimitPostJsonV400 object that needs to be added. (required)
        :param str consumer_id: new consumer id (required)
        :return: CallLimitPostJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_calls_limit_with_http_info(body, consumer_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_calls_limit_with_http_info(body, consumer_id, **kwargs)
            return data

    def o_b_pv4_0_0_calls_limit_with_http_info(self, body, consumer_id, **kwargs):
        """
        Set Calls Limit for a Consumer
        <p>Set the API call limits for a Consumer:</p><p>Per Second<br />Per Minute<br />Per Hour<br />Per Week<br />Per Month</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_calls_limit_with_http_info(body, consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CallLimitPostJsonV400 body: CallLimitPostJsonV400 object that needs to be added. (required)
        :param str consumer_id: new consumer id (required)
        :return: CallLimitPostJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'consumer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_calls_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_calls_limit`")
        # verify the required parameter 'consumer_id' is set
        if ('consumer_id' not in params) or (params['consumer_id'] is None):
            raise ValueError("Missing the required parameter `consumer_id` when calling `o_b_pv4_0_0_calls_limit`")

        resource_path = '/obp/v5.0.0/management/consumers/{CONSUMER_ID}/consumer/call-limits'.replace('{format}', 'json')
        path_params = {}
        if 'consumer_id' in params:
            path_params['CONSUMER_ID'] = params['consumer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CallLimitPostJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_create_consumer(self, body, **kwargs):
        """
        Post a Consumer
        <p>Create a Consumer (Authenticated access).</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_create_consumer(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConsumerPostJSON body: ConsumerPostJSON object that needs to be added. (required)
        :return: ConsumerJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_create_consumer_with_http_info(body, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_create_consumer_with_http_info(body, **kwargs)
            return data

    def o_b_pv4_0_0_create_consumer_with_http_info(self, body, **kwargs):
        """
        Post a Consumer
        <p>Create a Consumer (Authenticated access).</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_create_consumer_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConsumerPostJSON body: ConsumerPostJSON object that needs to be added. (required)
        :return: ConsumerJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_create_consumer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_create_consumer`")

        resource_path = '/obp/v5.0.0/management/consumers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConsumerJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_get_scopes(self, consumer_id, **kwargs):
        """
        Get Scopes for Consumer
        <p>Get all the scopes for an consumer specified by CONSUMER_ID</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_scopes(consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str consumer_id: new consumer id (required)
        :return: ScopeJsons
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_get_scopes_with_http_info(consumer_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_get_scopes_with_http_info(consumer_id, **kwargs)
            return data

    def o_b_pv4_0_0_get_scopes_with_http_info(self, consumer_id, **kwargs):
        """
        Get Scopes for Consumer
        <p>Get all the scopes for an consumer specified by CONSUMER_ID</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_scopes_with_http_info(consumer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str consumer_id: new consumer id (required)
        :return: ScopeJsons
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consumer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_get_scopes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consumer_id' is set
        if ('consumer_id' not in params) or (params['consumer_id'] is None):
            raise ValueError("Missing the required parameter `consumer_id` when calling `o_b_pv4_0_0_get_scopes`")

        resource_path = '/obp/v5.0.0/consumers/{CONSUMER_ID}/scopes'.replace('{format}', 'json')
        path_params = {}
        if 'consumer_id' in params:
            path_params['CONSUMER_ID'] = params['consumer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ScopeJsons',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
