# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CounterpartyMetadataApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def o_b_pv1_2_1_add_counterparty_corporate_location(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add Corporate Location to Counterparty
        <p>Add the geolocation of the counterparty's registered address</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_corporate_location(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CorporateLocationJSON body: CorporateLocationJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_add_counterparty_corporate_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_add_counterparty_corporate_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_add_counterparty_corporate_location_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add Corporate Location to Counterparty
        <p>Add the geolocation of the counterparty's registered address</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_corporate_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CorporateLocationJSON body: CorporateLocationJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_add_counterparty_corporate_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_add_counterparty_corporate_location`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_add_counterparty_corporate_location`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_add_counterparty_corporate_location`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_add_counterparty_corporate_location`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_add_counterparty_corporate_location`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/corporate_location'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_add_counterparty_image_url(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add image url to other bank account
        <p>Add a url that points to the logo of the counterparty</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_image_url(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ImageUrlJSON body: ImageUrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_add_counterparty_image_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_add_counterparty_image_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_add_counterparty_image_url_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add image url to other bank account
        <p>Add a url that points to the logo of the counterparty</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_image_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ImageUrlJSON body: ImageUrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_add_counterparty_image_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_add_counterparty_image_url`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_add_counterparty_image_url`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_add_counterparty_image_url`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_add_counterparty_image_url`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_add_counterparty_image_url`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/image_url'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_add_counterparty_more_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add Counterparty More Info
        <p>Add a description of the counter party from the perpestive of the account e.g. My dentist</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_more_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MoreInfoJSON body: MoreInfoJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_add_counterparty_more_info_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_add_counterparty_more_info_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_add_counterparty_more_info_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add Counterparty More Info
        <p>Add a description of the counter party from the perpestive of the account e.g. My dentist</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_more_info_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MoreInfoJSON body: MoreInfoJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_add_counterparty_more_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_add_counterparty_more_info`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_add_counterparty_more_info`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_add_counterparty_more_info`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_add_counterparty_more_info`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_add_counterparty_more_info`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/more_info'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_add_counterparty_open_corporates_url(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add Open Corporates URL to Counterparty
        <p>Add open corporates url to other bank account</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_open_corporates_url(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OpenCorporateUrlJSON body: OpenCorporateUrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_add_counterparty_open_corporates_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_add_counterparty_open_corporates_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_add_counterparty_open_corporates_url_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add Open Corporates URL to Counterparty
        <p>Add open corporates url to other bank account</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_open_corporates_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OpenCorporateUrlJSON body: OpenCorporateUrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_add_counterparty_open_corporates_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_add_counterparty_open_corporates_url`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_add_counterparty_open_corporates_url`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_add_counterparty_open_corporates_url`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_add_counterparty_open_corporates_url`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_add_counterparty_open_corporates_url`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/open_corporates_url'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_add_counterparty_physical_location(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add physical location to other bank account
        <p>Add geocoordinates of the counterparty's main location</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_physical_location(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PhysicalLocationJSON body: PhysicalLocationJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_add_counterparty_physical_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_add_counterparty_physical_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_add_counterparty_physical_location_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add physical location to other bank account
        <p>Add geocoordinates of the counterparty's main location</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_physical_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PhysicalLocationJSON body: PhysicalLocationJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_add_counterparty_physical_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_add_counterparty_physical_location`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_add_counterparty_physical_location`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_add_counterparty_physical_location`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_add_counterparty_physical_location`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_add_counterparty_physical_location`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/physical_location'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_add_counterparty_public_alias(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add public alias to other bank account
        <p>Creates the public alias for the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p><p>Note: Public aliases are automatically generated for new 'other accounts / counterparties', so this call should only be used if<br />the public alias was deleted.</p><p>The VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_public_alias(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AliasJSON body: AliasJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_add_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_add_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_add_counterparty_public_alias_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add public alias to other bank account
        <p>Creates the public alias for the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p><p>Note: Public aliases are automatically generated for new 'other accounts / counterparties', so this call should only be used if<br />the public alias was deleted.</p><p>The VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AliasJSON body: AliasJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_add_counterparty_public_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_add_counterparty_public_alias`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_add_counterparty_public_alias`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_add_counterparty_public_alias`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_add_counterparty_public_alias`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_add_counterparty_public_alias`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/public_alias'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_add_counterparty_url(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add url to other bank account
        <p>A url which represents the counterparty (home page url etc.)</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_url(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UrlJSON body: UrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_add_counterparty_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_add_counterparty_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_add_counterparty_url_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Add url to other bank account
        <p>A url which represents the counterparty (home page url etc.)</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_counterparty_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UrlJSON body: UrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_add_counterparty_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_add_counterparty_url`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_add_counterparty_url`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_add_counterparty_url`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_add_counterparty_url`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_add_counterparty_url`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/url'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_add_other_account_private_alias(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Create Other Account Private Alias
        <p>Creates a private alias for the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_other_account_private_alias(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AliasJSON body: AliasJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_add_other_account_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_add_other_account_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_add_other_account_private_alias_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Create Other Account Private Alias
        <p>Creates a private alias for the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_add_other_account_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AliasJSON body: AliasJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_add_other_account_private_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_add_other_account_private_alias`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_add_other_account_private_alias`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_add_other_account_private_alias`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_add_other_account_private_alias`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_add_other_account_private_alias`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/private_alias'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_delete_counterparty_corporate_location(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Corporate Location
        <p>Delete corporate location of other bank account. Delete the geolocation of the counterparty's registered address</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_corporate_location(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_delete_counterparty_corporate_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_delete_counterparty_corporate_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_delete_counterparty_corporate_location_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Corporate Location
        <p>Delete corporate location of other bank account. Delete the geolocation of the counterparty's registered address</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_corporate_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_delete_counterparty_corporate_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_delete_counterparty_corporate_location`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_delete_counterparty_corporate_location`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_delete_counterparty_corporate_location`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_delete_counterparty_corporate_location`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_delete_counterparty_corporate_location`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/corporate_location'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmptyClassJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_delete_counterparty_image_url(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Image URL
        <p>Delete image url of other bank account</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_image_url(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_delete_counterparty_image_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_delete_counterparty_image_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_delete_counterparty_image_url_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Image URL
        <p>Delete image url of other bank account</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_image_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_delete_counterparty_image_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_delete_counterparty_image_url`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_delete_counterparty_image_url`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_delete_counterparty_image_url`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_delete_counterparty_image_url`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_delete_counterparty_image_url`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/image_url'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmptyClassJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_delete_counterparty_more_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete more info of other bank account
        <p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_more_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_delete_counterparty_more_info_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_delete_counterparty_more_info_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_delete_counterparty_more_info_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete more info of other bank account
        <p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_more_info_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_delete_counterparty_more_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_delete_counterparty_more_info`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_delete_counterparty_more_info`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_delete_counterparty_more_info`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_delete_counterparty_more_info`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_delete_counterparty_more_info`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/more_info'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmptyClassJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_delete_counterparty_open_corporates_url(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Open Corporates URL
        <p>Delete open corporate url of other bank account</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_open_corporates_url(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_delete_counterparty_open_corporates_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_delete_counterparty_open_corporates_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_delete_counterparty_open_corporates_url_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Open Corporates URL
        <p>Delete open corporate url of other bank account</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_open_corporates_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_delete_counterparty_open_corporates_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_delete_counterparty_open_corporates_url`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_delete_counterparty_open_corporates_url`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_delete_counterparty_open_corporates_url`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_delete_counterparty_open_corporates_url`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_delete_counterparty_open_corporates_url`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/open_corporates_url'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmptyClassJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_delete_counterparty_physical_location(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Physical Location
        <p>Delete physical location of other bank account</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_physical_location(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_delete_counterparty_physical_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_delete_counterparty_physical_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_delete_counterparty_physical_location_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Physical Location
        <p>Delete physical location of other bank account</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_physical_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_delete_counterparty_physical_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_delete_counterparty_physical_location`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_delete_counterparty_physical_location`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_delete_counterparty_physical_location`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_delete_counterparty_physical_location`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_delete_counterparty_physical_location`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/physical_location'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmptyClassJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_delete_counterparty_private_alias(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Private Alias
        <p>Deletes the private alias of the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_private_alias(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_delete_counterparty_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_delete_counterparty_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_delete_counterparty_private_alias_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Private Alias
        <p>Deletes the private alias of the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_delete_counterparty_private_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_delete_counterparty_private_alias`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_delete_counterparty_private_alias`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_delete_counterparty_private_alias`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_delete_counterparty_private_alias`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_delete_counterparty_private_alias`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/private_alias'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmptyClassJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_delete_counterparty_public_alias(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Public Alias
        <p>Deletes the public alias of the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_public_alias(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_delete_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_delete_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_delete_counterparty_public_alias_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete Counterparty Public Alias
        <p>Deletes the public alias of the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_delete_counterparty_public_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_delete_counterparty_public_alias`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_delete_counterparty_public_alias`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_delete_counterparty_public_alias`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_delete_counterparty_public_alias`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_delete_counterparty_public_alias`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/public_alias'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmptyClassJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_delete_counterparty_url(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete url of other bank account
        <p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_url(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_delete_counterparty_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_delete_counterparty_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_delete_counterparty_url_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Delete url of other bank account
        <p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_delete_counterparty_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: EmptyClassJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_delete_counterparty_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_delete_counterparty_url`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_delete_counterparty_url`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_delete_counterparty_url`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_delete_counterparty_url`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_delete_counterparty_url`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/url'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmptyClassJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_get_counterparty_public_alias(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Get public alias of other bank account
        <p>Returns the public alias of the other account OTHER_ACCOUNT_ID.<br />Authentication is Optional<br />Authentication is Mandatory if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_get_counterparty_public_alias(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: AliasJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_get_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_get_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_get_counterparty_public_alias_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Get public alias of other bank account
        <p>Returns the public alias of the other account OTHER_ACCOUNT_ID.<br />Authentication is Optional<br />Authentication is Mandatory if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_get_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: AliasJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_get_counterparty_public_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_get_counterparty_public_alias`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_get_counterparty_public_alias`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_get_counterparty_public_alias`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_get_counterparty_public_alias`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_get_counterparty_public_alias`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/public_alias'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AliasJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_get_other_account_metadata(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Get Other Account Metadata
        <p>Get metadata of one other account.<br />Returns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.</p><p>Authentication via OAuth is required if the view is not public.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_get_other_account_metadata(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: OtherAccountMetadataJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_get_other_account_metadata_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_get_other_account_metadata_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_get_other_account_metadata_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Get Other Account Metadata
        <p>Get metadata of one other account.<br />Returns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.</p><p>Authentication via OAuth is required if the view is not public.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_get_other_account_metadata_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: OtherAccountMetadataJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_get_other_account_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_get_other_account_metadata`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_get_other_account_metadata`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_get_other_account_metadata`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_get_other_account_metadata`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_get_other_account_metadata`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OtherAccountMetadataJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_get_other_account_private_alias(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Get Other Account Private Alias
        <p>Returns the private alias of the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_get_other_account_private_alias(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: AliasJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_get_other_account_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_get_other_account_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_get_other_account_private_alias_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Get Other Account Private Alias
        <p>Returns the private alias of the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_get_other_account_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: AliasJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_get_other_account_private_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_get_other_account_private_alias`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_get_other_account_private_alias`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_get_other_account_private_alias`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_get_other_account_private_alias`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_get_other_account_private_alias`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/private_alias'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AliasJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_update_counterparty_corporate_location(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Counterparty Corporate Location
        <p>Update the geolocation of the counterparty's registered address</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_corporate_location(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CorporateLocationJSON body: CorporateLocationJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_update_counterparty_corporate_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_update_counterparty_corporate_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_update_counterparty_corporate_location_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Counterparty Corporate Location
        <p>Update the geolocation of the counterparty's registered address</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_corporate_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CorporateLocationJSON body: CorporateLocationJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_update_counterparty_corporate_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_update_counterparty_corporate_location`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_update_counterparty_corporate_location`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_update_counterparty_corporate_location`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_update_counterparty_corporate_location`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_update_counterparty_corporate_location`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/corporate_location'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_update_counterparty_image_url(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Counterparty Image Url
        <p>Update the url that points to the logo of the counterparty</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_image_url(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ImageUrlJSON body: ImageUrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_update_counterparty_image_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_update_counterparty_image_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_update_counterparty_image_url_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Counterparty Image Url
        <p>Update the url that points to the logo of the counterparty</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_image_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ImageUrlJSON body: ImageUrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_update_counterparty_image_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_update_counterparty_image_url`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_update_counterparty_image_url`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_update_counterparty_image_url`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_update_counterparty_image_url`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_update_counterparty_image_url`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/image_url'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_update_counterparty_more_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Counterparty More Info
        <p>Update the more info description of the counter party from the perpestive of the account e.g. My dentist</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_more_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MoreInfoJSON body: MoreInfoJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_update_counterparty_more_info_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_update_counterparty_more_info_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_update_counterparty_more_info_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Counterparty More Info
        <p>Update the more info description of the counter party from the perpestive of the account e.g. My dentist</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_more_info_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MoreInfoJSON body: MoreInfoJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_update_counterparty_more_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_update_counterparty_more_info`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_update_counterparty_more_info`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_update_counterparty_more_info`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_update_counterparty_more_info`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_update_counterparty_more_info`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/more_info'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_update_counterparty_open_corporates_url(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Open Corporates Url of Counterparty
        <p>Update open corporate url of other bank account</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_open_corporates_url(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OpenCorporateUrlJSON body: OpenCorporateUrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_update_counterparty_open_corporates_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_update_counterparty_open_corporates_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_update_counterparty_open_corporates_url_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Open Corporates Url of Counterparty
        <p>Update open corporate url of other bank account</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_open_corporates_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OpenCorporateUrlJSON body: OpenCorporateUrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_update_counterparty_open_corporates_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_update_counterparty_open_corporates_url`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_update_counterparty_open_corporates_url`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_update_counterparty_open_corporates_url`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_update_counterparty_open_corporates_url`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_update_counterparty_open_corporates_url`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/open_corporates_url'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_update_counterparty_physical_location(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Counterparty Physical Location
        <p>Update geocoordinates of the counterparty's main location</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_physical_location(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PhysicalLocationJSON body: PhysicalLocationJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_update_counterparty_physical_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_update_counterparty_physical_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_update_counterparty_physical_location_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Counterparty Physical Location
        <p>Update geocoordinates of the counterparty's main location</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_physical_location_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PhysicalLocationJSON body: PhysicalLocationJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_update_counterparty_physical_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_update_counterparty_physical_location`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_update_counterparty_physical_location`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_update_counterparty_physical_location`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_update_counterparty_physical_location`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_update_counterparty_physical_location`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/physical_location'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_update_counterparty_private_alias(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Counterparty Private Alias
        <p>Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_private_alias(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AliasJSON body: AliasJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_update_counterparty_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_update_counterparty_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_update_counterparty_private_alias_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update Counterparty Private Alias
        <p>Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_private_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AliasJSON body: AliasJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_update_counterparty_private_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_update_counterparty_private_alias`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_update_counterparty_private_alias`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_update_counterparty_private_alias`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_update_counterparty_private_alias`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_update_counterparty_private_alias`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/private_alias'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_update_counterparty_public_alias(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update public alias of other bank account
        <p>Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_public_alias(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AliasJSON body: AliasJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_update_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_update_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_update_counterparty_public_alias_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update public alias of other bank account
        <p>Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.</p><p>Authentication is Optional<br />Authentication is required if the view is not public.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_public_alias_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AliasJSON body: AliasJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_update_counterparty_public_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_update_counterparty_public_alias`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_update_counterparty_public_alias`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_update_counterparty_public_alias`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_update_counterparty_public_alias`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_update_counterparty_public_alias`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/public_alias'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv1_2_1_update_counterparty_url(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update url of other bank account
        <p>A url which represents the counterparty (home page url etc.)</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_url(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UrlJSON body: UrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv1_2_1_update_counterparty_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv1_2_1_update_counterparty_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv1_2_1_update_counterparty_url_with_http_info(self, body, other_account_id, view_id, account_id, bank_id, **kwargs):
        """
        Update url of other bank account
        <p>A url which represents the counterparty (home page url etc.)</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv1_2_1_update_counterparty_url_with_http_info(body, other_account_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UrlJSON body: UrlJSON object that needs to be added. (required)
        :param str other_account_id: The other account id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'other_account_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv1_2_1_update_counterparty_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv1_2_1_update_counterparty_url`")
        # verify the required parameter 'other_account_id' is set
        if ('other_account_id' not in params) or (params['other_account_id'] is None):
            raise ValueError("Missing the required parameter `other_account_id` when calling `o_b_pv1_2_1_update_counterparty_url`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv1_2_1_update_counterparty_url`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv1_2_1_update_counterparty_url`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv1_2_1_update_counterparty_url`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/url'.replace('{format}', 'json')
        path_params = {}
        if 'other_account_id' in params:
            path_params['OTHER_ACCOUNT_ID'] = params['other_account_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_get_explict_counterparty_by_id(self, counterparty_id, view_id, account_id, bank_id, **kwargs):
        """
        Get Counterparty by Id (Explicit)
        <p>Information returned about the Counterparty specified by COUNTERPARTY_ID:</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_explict_counterparty_by_id(counterparty_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str counterparty_id: the counterparty id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: CounterpartyWithMetadataJson400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_get_explict_counterparty_by_id_with_http_info(counterparty_id, view_id, account_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_get_explict_counterparty_by_id_with_http_info(counterparty_id, view_id, account_id, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_get_explict_counterparty_by_id_with_http_info(self, counterparty_id, view_id, account_id, bank_id, **kwargs):
        """
        Get Counterparty by Id (Explicit)
        <p>Information returned about the Counterparty specified by COUNTERPARTY_ID:</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_explict_counterparty_by_id_with_http_info(counterparty_id, view_id, account_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str counterparty_id: the counterparty id (required)
        :param str view_id: The view id (required)
        :param str account_id: The account id (required)
        :param str bank_id: The bank id (required)
        :return: CounterpartyWithMetadataJson400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['counterparty_id', 'view_id', 'account_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_get_explict_counterparty_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'counterparty_id' is set
        if ('counterparty_id' not in params) or (params['counterparty_id'] is None):
            raise ValueError("Missing the required parameter `counterparty_id` when calling `o_b_pv4_0_0_get_explict_counterparty_by_id`")
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params) or (params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `o_b_pv4_0_0_get_explict_counterparty_by_id`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `o_b_pv4_0_0_get_explict_counterparty_by_id`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_get_explict_counterparty_by_id`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparties/{COUNTERPARTY_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'counterparty_id' in params:
            path_params['COUNTERPARTY_ID'] = params['counterparty_id']
        if 'view_id' in params:
            path_params['VIEW_ID'] = params['view_id']
        if 'account_id' in params:
            path_params['ACCOUNT_ID'] = params['account_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CounterpartyWithMetadataJson400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
