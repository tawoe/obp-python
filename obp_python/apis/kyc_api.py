# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class KYCApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def o_b_pv2_0_0_add_kyc_check(self, body, kyc_check_id, customer_id, bank_id, **kwargs):
        """
        Add KYC Check
        <p>Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_add_kyc_check(body, kyc_check_id, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostKycCheckJSON body: PostKycCheckJSON object that needs to be added. (required)
        :param str kyc_check_id: The kyc check id (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: KycCheckJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv2_0_0_add_kyc_check_with_http_info(body, kyc_check_id, customer_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv2_0_0_add_kyc_check_with_http_info(body, kyc_check_id, customer_id, bank_id, **kwargs)
            return data

    def o_b_pv2_0_0_add_kyc_check_with_http_info(self, body, kyc_check_id, customer_id, bank_id, **kwargs):
        """
        Add KYC Check
        <p>Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_add_kyc_check_with_http_info(body, kyc_check_id, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostKycCheckJSON body: PostKycCheckJSON object that needs to be added. (required)
        :param str kyc_check_id: The kyc check id (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: KycCheckJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'kyc_check_id', 'customer_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv2_0_0_add_kyc_check" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv2_0_0_add_kyc_check`")
        # verify the required parameter 'kyc_check_id' is set
        if ('kyc_check_id' not in params) or (params['kyc_check_id'] is None):
            raise ValueError("Missing the required parameter `kyc_check_id` when calling `o_b_pv2_0_0_add_kyc_check`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv2_0_0_add_kyc_check`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv2_0_0_add_kyc_check`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_check/{KYC_CHECK_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'kyc_check_id' in params:
            path_params['KYC_CHECK_ID'] = params['kyc_check_id']
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='KycCheckJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv2_0_0_add_kyc_document(self, body, kyc_document_id, customer_id, bank_id, **kwargs):
        """
        Add KYC Document
        <p>Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_add_kyc_document(body, kyc_document_id, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostKycDocumentJSON body: PostKycDocumentJSON object that needs to be added. (required)
        :param str kyc_document_id: The kyc document id (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: KycDocumentJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv2_0_0_add_kyc_document_with_http_info(body, kyc_document_id, customer_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv2_0_0_add_kyc_document_with_http_info(body, kyc_document_id, customer_id, bank_id, **kwargs)
            return data

    def o_b_pv2_0_0_add_kyc_document_with_http_info(self, body, kyc_document_id, customer_id, bank_id, **kwargs):
        """
        Add KYC Document
        <p>Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_add_kyc_document_with_http_info(body, kyc_document_id, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostKycDocumentJSON body: PostKycDocumentJSON object that needs to be added. (required)
        :param str kyc_document_id: The kyc document id (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: KycDocumentJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'kyc_document_id', 'customer_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv2_0_0_add_kyc_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv2_0_0_add_kyc_document`")
        # verify the required parameter 'kyc_document_id' is set
        if ('kyc_document_id' not in params) or (params['kyc_document_id'] is None):
            raise ValueError("Missing the required parameter `kyc_document_id` when calling `o_b_pv2_0_0_add_kyc_document`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv2_0_0_add_kyc_document`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv2_0_0_add_kyc_document`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_documents/{KYC_DOCUMENT_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'kyc_document_id' in params:
            path_params['KYC_DOCUMENT_ID'] = params['kyc_document_id']
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='KycDocumentJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv2_0_0_add_kyc_media(self, body, kyc_media_id, customer_id, bank_id, **kwargs):
        """
        Add KYC Media
        <p>Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_add_kyc_media(body, kyc_media_id, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostKycMediaJSON body: PostKycMediaJSON object that needs to be added. (required)
        :param str kyc_media_id: The kyc media id (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: KycMediaJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv2_0_0_add_kyc_media_with_http_info(body, kyc_media_id, customer_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv2_0_0_add_kyc_media_with_http_info(body, kyc_media_id, customer_id, bank_id, **kwargs)
            return data

    def o_b_pv2_0_0_add_kyc_media_with_http_info(self, body, kyc_media_id, customer_id, bank_id, **kwargs):
        """
        Add KYC Media
        <p>Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_add_kyc_media_with_http_info(body, kyc_media_id, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostKycMediaJSON body: PostKycMediaJSON object that needs to be added. (required)
        :param str kyc_media_id: The kyc media id (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: KycMediaJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'kyc_media_id', 'customer_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv2_0_0_add_kyc_media" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv2_0_0_add_kyc_media`")
        # verify the required parameter 'kyc_media_id' is set
        if ('kyc_media_id' not in params) or (params['kyc_media_id'] is None):
            raise ValueError("Missing the required parameter `kyc_media_id` when calling `o_b_pv2_0_0_add_kyc_media`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv2_0_0_add_kyc_media`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv2_0_0_add_kyc_media`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_media/{KYC_MEDIA_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'kyc_media_id' in params:
            path_params['KYC_MEDIA_ID'] = params['kyc_media_id']
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='KycMediaJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv2_0_0_add_kyc_status(self, body, customer_id, bank_id, **kwargs):
        """
        Add KYC Status
        <p>Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_add_kyc_status(body, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostKycStatusJSON body: PostKycStatusJSON object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: KycStatusJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv2_0_0_add_kyc_status_with_http_info(body, customer_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv2_0_0_add_kyc_status_with_http_info(body, customer_id, bank_id, **kwargs)
            return data

    def o_b_pv2_0_0_add_kyc_status_with_http_info(self, body, customer_id, bank_id, **kwargs):
        """
        Add KYC Status
        <p>Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_add_kyc_status_with_http_info(body, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostKycStatusJSON body: PostKycStatusJSON object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: KycStatusJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'customer_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv2_0_0_add_kyc_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv2_0_0_add_kyc_status`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv2_0_0_add_kyc_status`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv2_0_0_add_kyc_status`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_statuses'.replace('{format}', 'json')
        path_params = {}
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='KycStatusJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv2_0_0_get_kyc_checks(self, body, customer_id, **kwargs):
        """
        Get Customer KYC Checks
        <p>Get KYC checks for the Customer specified by CUSTOMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_get_kyc_checks(body, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :return: KycChecksJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv2_0_0_get_kyc_checks_with_http_info(body, customer_id, **kwargs)
        else:
            (data) = self.o_b_pv2_0_0_get_kyc_checks_with_http_info(body, customer_id, **kwargs)
            return data

    def o_b_pv2_0_0_get_kyc_checks_with_http_info(self, body, customer_id, **kwargs):
        """
        Get Customer KYC Checks
        <p>Get KYC checks for the Customer specified by CUSTOMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_get_kyc_checks_with_http_info(body, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :return: KycChecksJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'customer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv2_0_0_get_kyc_checks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv2_0_0_get_kyc_checks`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv2_0_0_get_kyc_checks`")

        resource_path = '/obp/v5.0.0/customers/{CUSTOMER_ID}/kyc_checks'.replace('{format}', 'json')
        path_params = {}
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='KycChecksJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv2_0_0_get_kyc_documents(self, body, customer_id, **kwargs):
        """
        Get Customer KYC Documents
        <p>Get KYC (know your customer) documents for a customer specified by CUSTOMER_ID<br />Get a list of documents that affirm the identity of the customer<br />Passport, driving licence etc.<br />Authentication is Optional</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_get_kyc_documents(body, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :return: KycDocumentsJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv2_0_0_get_kyc_documents_with_http_info(body, customer_id, **kwargs)
        else:
            (data) = self.o_b_pv2_0_0_get_kyc_documents_with_http_info(body, customer_id, **kwargs)
            return data

    def o_b_pv2_0_0_get_kyc_documents_with_http_info(self, body, customer_id, **kwargs):
        """
        Get Customer KYC Documents
        <p>Get KYC (know your customer) documents for a customer specified by CUSTOMER_ID<br />Get a list of documents that affirm the identity of the customer<br />Passport, driving licence etc.<br />Authentication is Optional</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_get_kyc_documents_with_http_info(body, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :return: KycDocumentsJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'customer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv2_0_0_get_kyc_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv2_0_0_get_kyc_documents`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv2_0_0_get_kyc_documents`")

        resource_path = '/obp/v5.0.0/customers/{CUSTOMER_ID}/kyc_documents'.replace('{format}', 'json')
        path_params = {}
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='KycDocumentsJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv2_0_0_get_kyc_media(self, body, customer_id, **kwargs):
        """
        Get KYC Media for a customer
        <p>Get KYC media (scans, pictures, videos) that affirms the identity of the customer.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_get_kyc_media(body, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :return: KycMediasJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv2_0_0_get_kyc_media_with_http_info(body, customer_id, **kwargs)
        else:
            (data) = self.o_b_pv2_0_0_get_kyc_media_with_http_info(body, customer_id, **kwargs)
            return data

    def o_b_pv2_0_0_get_kyc_media_with_http_info(self, body, customer_id, **kwargs):
        """
        Get KYC Media for a customer
        <p>Get KYC media (scans, pictures, videos) that affirms the identity of the customer.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_get_kyc_media_with_http_info(body, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :return: KycMediasJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'customer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv2_0_0_get_kyc_media" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv2_0_0_get_kyc_media`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv2_0_0_get_kyc_media`")

        resource_path = '/obp/v5.0.0/customers/{CUSTOMER_ID}/kyc_media'.replace('{format}', 'json')
        path_params = {}
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='KycMediasJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv2_0_0_get_kyc_statuses(self, body, customer_id, **kwargs):
        """
        Get Customer KYC statuses
        <p>Get the KYC statuses for a customer specified by CUSTOMER_ID over time.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_get_kyc_statuses(body, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :return: KycStatusesJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv2_0_0_get_kyc_statuses_with_http_info(body, customer_id, **kwargs)
        else:
            (data) = self.o_b_pv2_0_0_get_kyc_statuses_with_http_info(body, customer_id, **kwargs)
            return data

    def o_b_pv2_0_0_get_kyc_statuses_with_http_info(self, body, customer_id, **kwargs):
        """
        Get Customer KYC statuses
        <p>Get the KYC statuses for a customer specified by CUSTOMER_ID over time.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv2_0_0_get_kyc_statuses_with_http_info(body, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EmptyClassJson body: EmptyClassJson object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :return: KycStatusesJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'customer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv2_0_0_get_kyc_statuses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv2_0_0_get_kyc_statuses`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv2_0_0_get_kyc_statuses`")

        resource_path = '/obp/v5.0.0/customers/{CUSTOMER_ID}/kyc_statuses'.replace('{format}', 'json')
        path_params = {}
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='KycStatusesJSON',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_1_0_create_tax_residence(self, body, customer_id, bank_id, **kwargs):
        """
        Create Tax Residence
        <p>Create a Tax Residence for a Customer specified by CUSTOMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_create_tax_residence(body, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostTaxResidenceJsonV310 body: PostTaxResidenceJsonV310 object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: TaxResidenceV310
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_1_0_create_tax_residence_with_http_info(body, customer_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv3_1_0_create_tax_residence_with_http_info(body, customer_id, bank_id, **kwargs)
            return data

    def o_b_pv3_1_0_create_tax_residence_with_http_info(self, body, customer_id, bank_id, **kwargs):
        """
        Create Tax Residence
        <p>Create a Tax Residence for a Customer specified by CUSTOMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_create_tax_residence_with_http_info(body, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostTaxResidenceJsonV310 body: PostTaxResidenceJsonV310 object that needs to be added. (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: TaxResidenceV310
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'customer_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_1_0_create_tax_residence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv3_1_0_create_tax_residence`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv3_1_0_create_tax_residence`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv3_1_0_create_tax_residence`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/tax-residence'.replace('{format}', 'json')
        path_params = {}
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxResidenceV310',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_1_0_delete_customer_address(self, customer_address_id, customer_id, bank_id, **kwargs):
        """
        Delete Customer Address
        <p>Delete an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_delete_customer_address(customer_address_id, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_address_id: the customer address id (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_1_0_delete_customer_address_with_http_info(customer_address_id, customer_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv3_1_0_delete_customer_address_with_http_info(customer_address_id, customer_id, bank_id, **kwargs)
            return data

    def o_b_pv3_1_0_delete_customer_address_with_http_info(self, customer_address_id, customer_id, bank_id, **kwargs):
        """
        Delete Customer Address
        <p>Delete an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_delete_customer_address_with_http_info(customer_address_id, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_address_id: the customer address id (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_address_id', 'customer_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_1_0_delete_customer_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_address_id' is set
        if ('customer_address_id' not in params) or (params['customer_address_id'] is None):
            raise ValueError("Missing the required parameter `customer_address_id` when calling `o_b_pv3_1_0_delete_customer_address`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv3_1_0_delete_customer_address`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv3_1_0_delete_customer_address`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/addresses/{CUSTOMER_ADDRESS_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'customer_address_id' in params:
            path_params['CUSTOMER_ADDRESS_ID'] = params['customer_address_id']
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_1_0_delete_tax_residence(self, tax_residence_id, customer_id, bank_id, **kwargs):
        """
        Delete Tax Residence
        <p>Delete a Tax Residence of the Customer specified by TAX_RESIDENCE_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_delete_tax_residence(tax_residence_id, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tax_residence_id: the tax residence id (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_1_0_delete_tax_residence_with_http_info(tax_residence_id, customer_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv3_1_0_delete_tax_residence_with_http_info(tax_residence_id, customer_id, bank_id, **kwargs)
            return data

    def o_b_pv3_1_0_delete_tax_residence_with_http_info(self, tax_residence_id, customer_id, bank_id, **kwargs):
        """
        Delete Tax Residence
        <p>Delete a Tax Residence of the Customer specified by TAX_RESIDENCE_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_delete_tax_residence_with_http_info(tax_residence_id, customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tax_residence_id: the tax residence id (required)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tax_residence_id', 'customer_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_1_0_delete_tax_residence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tax_residence_id' is set
        if ('tax_residence_id' not in params) or (params['tax_residence_id'] is None):
            raise ValueError("Missing the required parameter `tax_residence_id` when calling `o_b_pv3_1_0_delete_tax_residence`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv3_1_0_delete_tax_residence`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv3_1_0_delete_tax_residence`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/tax_residencies/{TAX_RESIDENCE_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'tax_residence_id' in params:
            path_params['TAX_RESIDENCE_ID'] = params['tax_residence_id']
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_1_0_get_customer_addresses(self, customer_id, bank_id, **kwargs):
        """
        Get Customer Addresses
        <p>Get the Addresses of the Customer specified by CUSTOMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_customer_addresses(customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: CustomerAddressesJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_1_0_get_customer_addresses_with_http_info(customer_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv3_1_0_get_customer_addresses_with_http_info(customer_id, bank_id, **kwargs)
            return data

    def o_b_pv3_1_0_get_customer_addresses_with_http_info(self, customer_id, bank_id, **kwargs):
        """
        Get Customer Addresses
        <p>Get the Addresses of the Customer specified by CUSTOMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_customer_addresses_with_http_info(customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: CustomerAddressesJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_1_0_get_customer_addresses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv3_1_0_get_customer_addresses`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv3_1_0_get_customer_addresses`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/addresses'.replace('{format}', 'json')
        path_params = {}
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CustomerAddressesJsonV310',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_1_0_get_customer_by_customer_number(self, body, bank_id, **kwargs):
        """
        Get Customer by CUSTOMER_NUMBER
        <p>Gets the Customer specified by CUSTOMER_NUMBER.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_customer_by_customer_number(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostCustomerNumberJsonV310 body: PostCustomerNumberJsonV310 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: CustomerWithAttributesJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_1_0_get_customer_by_customer_number_with_http_info(body, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv3_1_0_get_customer_by_customer_number_with_http_info(body, bank_id, **kwargs)
            return data

    def o_b_pv3_1_0_get_customer_by_customer_number_with_http_info(self, body, bank_id, **kwargs):
        """
        Get Customer by CUSTOMER_NUMBER
        <p>Gets the Customer specified by CUSTOMER_NUMBER.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_customer_by_customer_number_with_http_info(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostCustomerNumberJsonV310 body: PostCustomerNumberJsonV310 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: CustomerWithAttributesJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_1_0_get_customer_by_customer_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv3_1_0_get_customer_by_customer_number`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv3_1_0_get_customer_by_customer_number`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/customer-number'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CustomerWithAttributesJsonV310',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv3_1_0_get_tax_residence(self, customer_id, bank_id, **kwargs):
        """
        Get Tax Residences of Customer
        <p>Get the Tax Residences of the Customer specified by CUSTOMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_tax_residence(customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: TaxResidenceJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv3_1_0_get_tax_residence_with_http_info(customer_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv3_1_0_get_tax_residence_with_http_info(customer_id, bank_id, **kwargs)
            return data

    def o_b_pv3_1_0_get_tax_residence_with_http_info(self, customer_id, bank_id, **kwargs):
        """
        Get Tax Residences of Customer
        <p>Get the Tax Residences of the Customer specified by CUSTOMER_ID.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv3_1_0_get_tax_residence_with_http_info(customer_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_id: The customer id (required)
        :param str bank_id: The bank id (required)
        :return: TaxResidenceJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv3_1_0_get_tax_residence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `o_b_pv3_1_0_get_tax_residence`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv3_1_0_get_tax_residence`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/tax-residences'.replace('{format}', 'json')
        path_params = {}
        if 'customer_id' in params:
            path_params['CUSTOMER_ID'] = params['customer_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxResidenceJsonV310',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_create_user_invitation(self, body, bank_id, **kwargs):
        """
        Create User Invitation
        <p>Create User Invitation.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_create_user_invitation(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostUserInvitationJsonV400 body: PostUserInvitationJsonV400 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: UserInvitationJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_create_user_invitation_with_http_info(body, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_create_user_invitation_with_http_info(body, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_create_user_invitation_with_http_info(self, body, bank_id, **kwargs):
        """
        Create User Invitation
        <p>Create User Invitation.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_create_user_invitation_with_http_info(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostUserInvitationJsonV400 body: PostUserInvitationJsonV400 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: UserInvitationJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_create_user_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_create_user_invitation`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_create_user_invitation`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/user-invitation'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserInvitationJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_get_customers_by_customer_phone_number(self, body, bank_id, **kwargs):
        """
        Get Customers by MOBILE_PHONE_NUMBER
        <p>Gets the Customers specified by MOBILE_PHONE_NUMBER.</p><p>There are two wildcards often used in conjunction with the LIKE operator:<br />% - The percent sign represents zero, one, or multiple characters<br />_ - The underscore represents a single character<br />For example {&quot;customer_phone_number&quot;:&quot;%381%&quot;} lists all numbers which contain 381 sequence</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_customers_by_customer_phone_number(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostCustomerPhoneNumberJsonV400 body: PostCustomerPhoneNumberJsonV400 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: CustomerJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_get_customers_by_customer_phone_number_with_http_info(body, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_get_customers_by_customer_phone_number_with_http_info(body, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_get_customers_by_customer_phone_number_with_http_info(self, body, bank_id, **kwargs):
        """
        Get Customers by MOBILE_PHONE_NUMBER
        <p>Gets the Customers specified by MOBILE_PHONE_NUMBER.</p><p>There are two wildcards often used in conjunction with the LIKE operator:<br />% - The percent sign represents zero, one, or multiple characters<br />_ - The underscore represents a single character<br />For example {&quot;customer_phone_number&quot;:&quot;%381%&quot;} lists all numbers which contain 381 sequence</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_customers_by_customer_phone_number_with_http_info(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostCustomerPhoneNumberJsonV400 body: PostCustomerPhoneNumberJsonV400 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: CustomerJsonV310
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_get_customers_by_customer_phone_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_get_customers_by_customer_phone_number`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_get_customers_by_customer_phone_number`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/search/customers/mobile-phone-number'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CustomerJsonV310',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_get_user_invitation_anonymous(self, body, bank_id, **kwargs):
        """
        Get User Invitation Information
        <p>Create User Invitation Information.</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_user_invitation_anonymous(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostUserInvitationAnonymousJsonV400 body: PostUserInvitationAnonymousJsonV400 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: UserInvitationJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_get_user_invitation_anonymous_with_http_info(body, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_get_user_invitation_anonymous_with_http_info(body, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_get_user_invitation_anonymous_with_http_info(self, body, bank_id, **kwargs):
        """
        Get User Invitation Information
        <p>Create User Invitation Information.</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_user_invitation_anonymous_with_http_info(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostUserInvitationAnonymousJsonV400 body: PostUserInvitationAnonymousJsonV400 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: UserInvitationJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_get_user_invitation_anonymous" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_get_user_invitation_anonymous`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_get_user_invitation_anonymous`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/user-invitations'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserInvitationJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv5_0_0_get_customer_overview(self, body, bank_id, **kwargs):
        """
        Get Customer Overview
        <p>Gets the Customer Overview specified by customer_number and bank_code.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv5_0_0_get_customer_overview(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostCustomerOverviewJsonV500 body: PostCustomerOverviewJsonV500 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: CustomerOverviewJsonV500
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv5_0_0_get_customer_overview_with_http_info(body, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv5_0_0_get_customer_overview_with_http_info(body, bank_id, **kwargs)
            return data

    def o_b_pv5_0_0_get_customer_overview_with_http_info(self, body, bank_id, **kwargs):
        """
        Get Customer Overview
        <p>Gets the Customer Overview specified by customer_number and bank_code.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv5_0_0_get_customer_overview_with_http_info(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostCustomerOverviewJsonV500 body: PostCustomerOverviewJsonV500 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: CustomerOverviewJsonV500
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv5_0_0_get_customer_overview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv5_0_0_get_customer_overview`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv5_0_0_get_customer_overview`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/customer-number-query/overview'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CustomerOverviewJsonV500',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv5_0_0_get_customer_overview_flat(self, body, bank_id, **kwargs):
        """
        Get Customer Overview Flat
        <p>Gets the Customer Overview Flat specified by customer_number and bank_code.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv5_0_0_get_customer_overview_flat(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostCustomerOverviewJsonV500 body: PostCustomerOverviewJsonV500 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: CustomerOverviewFlatJsonV500
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv5_0_0_get_customer_overview_flat_with_http_info(body, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv5_0_0_get_customer_overview_flat_with_http_info(body, bank_id, **kwargs)
            return data

    def o_b_pv5_0_0_get_customer_overview_flat_with_http_info(self, body, bank_id, **kwargs):
        """
        Get Customer Overview Flat
        <p>Gets the Customer Overview Flat specified by customer_number and bank_code.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv5_0_0_get_customer_overview_flat_with_http_info(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostCustomerOverviewJsonV500 body: PostCustomerOverviewJsonV500 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: CustomerOverviewFlatJsonV500
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv5_0_0_get_customer_overview_flat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv5_0_0_get_customer_overview_flat`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv5_0_0_get_customer_overview_flat`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/customers/customer-number-query/overview-flat'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CustomerOverviewFlatJsonV500',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
