# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ATMApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def o_b_pv4_0_0_create_atm(self, body, bank_id, **kwargs):
        """
        Create ATM
        <p>Create ATM.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_create_atm(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmJsonV400 body: AtmJsonV400 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: AtmJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_create_atm_with_http_info(body, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_create_atm_with_http_info(body, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_create_atm_with_http_info(self, body, bank_id, **kwargs):
        """
        Create ATM
        <p>Create ATM.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_create_atm_with_http_info(body, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmJsonV400 body: AtmJsonV400 object that needs to be added. (required)
        :param str bank_id: The bank id (required)
        :return: AtmJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_create_atm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_create_atm`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_create_atm`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_delete_atm(self, body, atm_id, bank_id, **kwargs):
        """
        Delete ATM
        <p>Delete ATM.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_delete_atm(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmJsonV400 body: AtmJsonV400 object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_delete_atm_with_http_info(body, atm_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_delete_atm_with_http_info(body, atm_id, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_delete_atm_with_http_info(self, body, atm_id, bank_id, **kwargs):
        """
        Delete ATM
        <p>Delete ATM.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_delete_atm_with_http_info(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmJsonV400 body: AtmJsonV400 object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'atm_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_delete_atm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_delete_atm`")
        # verify the required parameter 'atm_id' is set
        if ('atm_id' not in params) or (params['atm_id'] is None):
            raise ValueError("Missing the required parameter `atm_id` when calling `o_b_pv4_0_0_delete_atm`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_delete_atm`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms/{ATM_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'atm_id' in params:
            path_params['ATM_ID'] = params['atm_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_get_atm(self, atm_id, bank_id, **kwargs):
        """
        Get Bank ATM
        <p>Returns information about ATM for a single bank specified by BANK_ID and ATM_ID including:</p><ul><li>Address</li><li>Geo Location</li><li>License the data under this endpoint is released under<br />Authentication is Optional</li></ul>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_atm(atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_get_atm_with_http_info(atm_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_get_atm_with_http_info(atm_id, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_get_atm_with_http_info(self, atm_id, bank_id, **kwargs):
        """
        Get Bank ATM
        <p>Returns information about ATM for a single bank specified by BANK_ID and ATM_ID including:</p><ul><li>Address</li><li>Geo Location</li><li>License the data under this endpoint is released under<br />Authentication is Optional</li></ul>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_atm_with_http_info(atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['atm_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_get_atm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'atm_id' is set
        if ('atm_id' not in params) or (params['atm_id'] is None):
            raise ValueError("Missing the required parameter `atm_id` when calling `o_b_pv4_0_0_get_atm`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_get_atm`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms/{ATM_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'atm_id' in params:
            path_params['ATM_ID'] = params['atm_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_get_atms(self, bank_id, **kwargs):
        """
        Get Bank ATMS
        <p>Get Bank ATMS.</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_atms(bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bank_id: The bank id (required)
        :return: AtmsJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_get_atms_with_http_info(bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_get_atms_with_http_info(bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_get_atms_with_http_info(self, bank_id, **kwargs):
        """
        Get Bank ATMS
        <p>Get Bank ATMS.</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_get_atms_with_http_info(bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bank_id: The bank id (required)
        :return: AtmsJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_get_atms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_get_atms`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmsJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_update_atm(self, body, atm_id, bank_id, **kwargs):
        """
        UPDATE ATM
        <p>Update ATM.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmJsonV400 body: AtmJsonV400 object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_update_atm_with_http_info(body, atm_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_update_atm_with_http_info(body, atm_id, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_update_atm_with_http_info(self, body, atm_id, bank_id, **kwargs):
        """
        UPDATE ATM
        <p>Update ATM.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_with_http_info(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmJsonV400 body: AtmJsonV400 object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'atm_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_update_atm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_update_atm`")
        # verify the required parameter 'atm_id' is set
        if ('atm_id' not in params) or (params['atm_id'] is None):
            raise ValueError("Missing the required parameter `atm_id` when calling `o_b_pv4_0_0_update_atm`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_update_atm`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms/{ATM_ID}'.replace('{format}', 'json')
        path_params = {}
        if 'atm_id' in params:
            path_params['ATM_ID'] = params['atm_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_update_atm_accessibility_features(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Accessibility Features
        <p>Update ATM Accessibility Features.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_accessibility_features(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccessibilityFeaturesJson body: AccessibilityFeaturesJson object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmAccessibilityFeaturesJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_update_atm_accessibility_features_with_http_info(body, atm_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_update_atm_accessibility_features_with_http_info(body, atm_id, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_update_atm_accessibility_features_with_http_info(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Accessibility Features
        <p>Update ATM Accessibility Features.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_accessibility_features_with_http_info(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccessibilityFeaturesJson body: AccessibilityFeaturesJson object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmAccessibilityFeaturesJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'atm_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_update_atm_accessibility_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_update_atm_accessibility_features`")
        # verify the required parameter 'atm_id' is set
        if ('atm_id' not in params) or (params['atm_id'] is None):
            raise ValueError("Missing the required parameter `atm_id` when calling `o_b_pv4_0_0_update_atm_accessibility_features`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_update_atm_accessibility_features`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms/{ATM_ID}/accessibility-features'.replace('{format}', 'json')
        path_params = {}
        if 'atm_id' in params:
            path_params['ATM_ID'] = params['atm_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmAccessibilityFeaturesJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_update_atm_location_categories(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Location Categories
        <p>Update ATM Location Categories.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_location_categories(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmLocationCategoriesJsonV400 body: AtmLocationCategoriesJsonV400 object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmLocationCategoriesResponseJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_update_atm_location_categories_with_http_info(body, atm_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_update_atm_location_categories_with_http_info(body, atm_id, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_update_atm_location_categories_with_http_info(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Location Categories
        <p>Update ATM Location Categories.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_location_categories_with_http_info(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmLocationCategoriesJsonV400 body: AtmLocationCategoriesJsonV400 object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmLocationCategoriesResponseJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'atm_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_update_atm_location_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_update_atm_location_categories`")
        # verify the required parameter 'atm_id' is set
        if ('atm_id' not in params) or (params['atm_id'] is None):
            raise ValueError("Missing the required parameter `atm_id` when calling `o_b_pv4_0_0_update_atm_location_categories`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_update_atm_location_categories`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms/{ATM_ID}/location-categories'.replace('{format}', 'json')
        path_params = {}
        if 'atm_id' in params:
            path_params['ATM_ID'] = params['atm_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmLocationCategoriesResponseJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_update_atm_notes(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Notes
        <p>Update ATM Notes.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_notes(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmNotesJsonV400 body: AtmNotesJsonV400 object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmNotesResponseJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_update_atm_notes_with_http_info(body, atm_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_update_atm_notes_with_http_info(body, atm_id, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_update_atm_notes_with_http_info(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Notes
        <p>Update ATM Notes.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_notes_with_http_info(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmNotesJsonV400 body: AtmNotesJsonV400 object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmNotesResponseJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'atm_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_update_atm_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_update_atm_notes`")
        # verify the required parameter 'atm_id' is set
        if ('atm_id' not in params) or (params['atm_id'] is None):
            raise ValueError("Missing the required parameter `atm_id` when calling `o_b_pv4_0_0_update_atm_notes`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_update_atm_notes`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms/{ATM_ID}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'atm_id' in params:
            path_params['ATM_ID'] = params['atm_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmNotesResponseJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_update_atm_services(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Services
        <p>Update ATM Services.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_services(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmServicesJsonV400 body: AtmServicesJsonV400 object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmServicesResponseJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_update_atm_services_with_http_info(body, atm_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_update_atm_services_with_http_info(body, atm_id, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_update_atm_services_with_http_info(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Services
        <p>Update ATM Services.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_services_with_http_info(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AtmServicesJsonV400 body: AtmServicesJsonV400 object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmServicesResponseJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'atm_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_update_atm_services" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_update_atm_services`")
        # verify the required parameter 'atm_id' is set
        if ('atm_id' not in params) or (params['atm_id'] is None):
            raise ValueError("Missing the required parameter `atm_id` when calling `o_b_pv4_0_0_update_atm_services`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_update_atm_services`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms/{ATM_ID}/services'.replace('{format}', 'json')
        path_params = {}
        if 'atm_id' in params:
            path_params['ATM_ID'] = params['atm_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmServicesResponseJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_update_atm_supported_currencies(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Supported Currencies
        <p>Update ATM Supported Currencies.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_supported_currencies(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SupportedCurrenciesJson body: SupportedCurrenciesJson object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmSupportedCurrenciesJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_update_atm_supported_currencies_with_http_info(body, atm_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_update_atm_supported_currencies_with_http_info(body, atm_id, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_update_atm_supported_currencies_with_http_info(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Supported Currencies
        <p>Update ATM Supported Currencies.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_supported_currencies_with_http_info(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SupportedCurrenciesJson body: SupportedCurrenciesJson object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmSupportedCurrenciesJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'atm_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_update_atm_supported_currencies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_update_atm_supported_currencies`")
        # verify the required parameter 'atm_id' is set
        if ('atm_id' not in params) or (params['atm_id'] is None):
            raise ValueError("Missing the required parameter `atm_id` when calling `o_b_pv4_0_0_update_atm_supported_currencies`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_update_atm_supported_currencies`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms/{ATM_ID}/supported-currencies'.replace('{format}', 'json')
        path_params = {}
        if 'atm_id' in params:
            path_params['ATM_ID'] = params['atm_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmSupportedCurrenciesJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv4_0_0_update_atm_supported_languages(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Supported Languages
        <p>Update ATM Supported Languages.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_supported_languages(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SupportedLanguagesJson body: SupportedLanguagesJson object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmSupportedLanguagesJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv4_0_0_update_atm_supported_languages_with_http_info(body, atm_id, bank_id, **kwargs)
        else:
            (data) = self.o_b_pv4_0_0_update_atm_supported_languages_with_http_info(body, atm_id, bank_id, **kwargs)
            return data

    def o_b_pv4_0_0_update_atm_supported_languages_with_http_info(self, body, atm_id, bank_id, **kwargs):
        """
        Update ATM Supported Languages
        <p>Update ATM Supported Languages.</p><p>Authentication is Mandatory</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv4_0_0_update_atm_supported_languages_with_http_info(body, atm_id, bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SupportedLanguagesJson body: SupportedLanguagesJson object that needs to be added. (required)
        :param str atm_id: the atm id (required)
        :param str bank_id: The bank id (required)
        :return: AtmSupportedLanguagesJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'atm_id', 'bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv4_0_0_update_atm_supported_languages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_b_pv4_0_0_update_atm_supported_languages`")
        # verify the required parameter 'atm_id' is set
        if ('atm_id' not in params) or (params['atm_id'] is None):
            raise ValueError("Missing the required parameter `atm_id` when calling `o_b_pv4_0_0_update_atm_supported_languages`")
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv4_0_0_update_atm_supported_languages`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms/{ATM_ID}/supported-languages'.replace('{format}', 'json')
        path_params = {}
        if 'atm_id' in params:
            path_params['ATM_ID'] = params['atm_id']
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmSupportedLanguagesJson',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def o_b_pv5_0_0_head_atms(self, bank_id, **kwargs):
        """
        Head Bank ATMS
        <p>Head Bank ATMS.</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv5_0_0_head_atms(bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bank_id: The bank id (required)
        :return: AtmsJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_b_pv5_0_0_head_atms_with_http_info(bank_id, **kwargs)
        else:
            (data) = self.o_b_pv5_0_0_head_atms_with_http_info(bank_id, **kwargs)
            return data

    def o_b_pv5_0_0_head_atms_with_http_info(self, bank_id, **kwargs):
        """
        Head Bank ATMS
        <p>Head Bank ATMS.</p><p>Authentication is Optional</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_b_pv5_0_0_head_atms_with_http_info(bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bank_id: The bank id (required)
        :return: AtmsJsonV400
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bank_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_b_pv5_0_0_head_atms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `o_b_pv5_0_0_head_atms`")

        resource_path = '/obp/v5.0.0/banks/{BANK_ID}/atms'.replace('{format}', 'json')
        path_params = {}
        if 'bank_id' in params:
            path_params['BANK_ID'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['directLogin', 'gatewayLogin']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AtmsJsonV400',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
