# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class TopApiJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'implemented_by_partial_function': 'str',
        'implemented_in_version': 'str'
    }

    attribute_map = {
        'count': 'count',
        'implemented_by_partial_function': 'Implemented_by_partial_function',
        'implemented_in_version': 'implemented_in_version'
    }

    def __init__(self, count=None, implemented_by_partial_function=None, implemented_in_version=None, _configuration=None):  # noqa: E501
        """TopApiJson - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._count = None
        self._implemented_by_partial_function = None
        self._implemented_in_version = None
        self.discriminator = None

        self.count = count
        self.implemented_by_partial_function = implemented_by_partial_function
        self.implemented_in_version = implemented_in_version

    @property
    def count(self):
        """Gets the count of this TopApiJson.  # noqa: E501


        :return: The count of this TopApiJson.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TopApiJson.


        :param count: The count of this TopApiJson.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def implemented_by_partial_function(self):
        """Gets the implemented_by_partial_function of this TopApiJson.  # noqa: E501


        :return: The implemented_by_partial_function of this TopApiJson.  # noqa: E501
        :rtype: str
        """
        return self._implemented_by_partial_function

    @implemented_by_partial_function.setter
    def implemented_by_partial_function(self, implemented_by_partial_function):
        """Sets the implemented_by_partial_function of this TopApiJson.


        :param implemented_by_partial_function: The implemented_by_partial_function of this TopApiJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and implemented_by_partial_function is None:
            raise ValueError("Invalid value for `implemented_by_partial_function`, must not be `None`")  # noqa: E501

        self._implemented_by_partial_function = implemented_by_partial_function

    @property
    def implemented_in_version(self):
        """Gets the implemented_in_version of this TopApiJson.  # noqa: E501


        :return: The implemented_in_version of this TopApiJson.  # noqa: E501
        :rtype: str
        """
        return self._implemented_in_version

    @implemented_in_version.setter
    def implemented_in_version(self, implemented_in_version):
        """Sets the implemented_in_version of this TopApiJson.


        :param implemented_in_version: The implemented_in_version of this TopApiJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and implemented_in_version is None:
            raise ValueError("Invalid value for `implemented_in_version`, must not be `None`")  # noqa: E501

        self._implemented_in_version = implemented_in_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopApiJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopApiJson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TopApiJson):
            return True

        return self.to_dict() != other.to_dict()
