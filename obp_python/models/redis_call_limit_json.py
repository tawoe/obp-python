# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class RedisCallLimitJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'per_week': 'RateLimit',
        'per_second': 'RateLimit',
        'per_month': 'RateLimit',
        'per_day': 'RateLimit',
        'per_minute': 'RateLimit',
        'per_hour': 'RateLimit'
    }

    attribute_map = {
        'per_week': 'per_week',
        'per_second': 'per_second',
        'per_month': 'per_month',
        'per_day': 'per_day',
        'per_minute': 'per_minute',
        'per_hour': 'per_hour'
    }

    def __init__(self, per_week=None, per_second=None, per_month=None, per_day=None, per_minute=None, per_hour=None, _configuration=None):  # noqa: E501
        """RedisCallLimitJson - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._per_week = None
        self._per_second = None
        self._per_month = None
        self._per_day = None
        self._per_minute = None
        self._per_hour = None
        self.discriminator = None

        if per_week is not None:
            self.per_week = per_week
        if per_second is not None:
            self.per_second = per_second
        if per_month is not None:
            self.per_month = per_month
        if per_day is not None:
            self.per_day = per_day
        if per_minute is not None:
            self.per_minute = per_minute
        if per_hour is not None:
            self.per_hour = per_hour

    @property
    def per_week(self):
        """Gets the per_week of this RedisCallLimitJson.  # noqa: E501


        :return: The per_week of this RedisCallLimitJson.  # noqa: E501
        :rtype: RateLimit
        """
        return self._per_week

    @per_week.setter
    def per_week(self, per_week):
        """Sets the per_week of this RedisCallLimitJson.


        :param per_week: The per_week of this RedisCallLimitJson.  # noqa: E501
        :type: RateLimit
        """

        self._per_week = per_week

    @property
    def per_second(self):
        """Gets the per_second of this RedisCallLimitJson.  # noqa: E501


        :return: The per_second of this RedisCallLimitJson.  # noqa: E501
        :rtype: RateLimit
        """
        return self._per_second

    @per_second.setter
    def per_second(self, per_second):
        """Sets the per_second of this RedisCallLimitJson.


        :param per_second: The per_second of this RedisCallLimitJson.  # noqa: E501
        :type: RateLimit
        """

        self._per_second = per_second

    @property
    def per_month(self):
        """Gets the per_month of this RedisCallLimitJson.  # noqa: E501


        :return: The per_month of this RedisCallLimitJson.  # noqa: E501
        :rtype: RateLimit
        """
        return self._per_month

    @per_month.setter
    def per_month(self, per_month):
        """Sets the per_month of this RedisCallLimitJson.


        :param per_month: The per_month of this RedisCallLimitJson.  # noqa: E501
        :type: RateLimit
        """

        self._per_month = per_month

    @property
    def per_day(self):
        """Gets the per_day of this RedisCallLimitJson.  # noqa: E501


        :return: The per_day of this RedisCallLimitJson.  # noqa: E501
        :rtype: RateLimit
        """
        return self._per_day

    @per_day.setter
    def per_day(self, per_day):
        """Sets the per_day of this RedisCallLimitJson.


        :param per_day: The per_day of this RedisCallLimitJson.  # noqa: E501
        :type: RateLimit
        """

        self._per_day = per_day

    @property
    def per_minute(self):
        """Gets the per_minute of this RedisCallLimitJson.  # noqa: E501


        :return: The per_minute of this RedisCallLimitJson.  # noqa: E501
        :rtype: RateLimit
        """
        return self._per_minute

    @per_minute.setter
    def per_minute(self, per_minute):
        """Sets the per_minute of this RedisCallLimitJson.


        :param per_minute: The per_minute of this RedisCallLimitJson.  # noqa: E501
        :type: RateLimit
        """

        self._per_minute = per_minute

    @property
    def per_hour(self):
        """Gets the per_hour of this RedisCallLimitJson.  # noqa: E501


        :return: The per_hour of this RedisCallLimitJson.  # noqa: E501
        :rtype: RateLimit
        """
        return self._per_hour

    @per_hour.setter
    def per_hour(self, per_hour):
        """Sets the per_hour of this RedisCallLimitJson.


        :param per_hour: The per_hour of this RedisCallLimitJson.  # noqa: E501
        :type: RateLimit
        """

        self._per_hour = per_hour

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RedisCallLimitJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedisCallLimitJson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RedisCallLimitJson):
            return True

        return self.to_dict() != other.to_dict()
