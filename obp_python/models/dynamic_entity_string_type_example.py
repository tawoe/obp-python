# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class DynamicEntityStringTypeExample(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'min_length': 'int',
        'type': 'str',
        'example': 'str',
        'max_length': 'int'
    }

    attribute_map = {
        'description': 'description',
        'min_length': 'minLength',
        'type': 'type',
        'example': 'example',
        'max_length': 'maxLength'
    }

    def __init__(self, description=None, min_length=None, type=None, example=None, max_length=None, _configuration=None):  # noqa: E501
        """DynamicEntityStringTypeExample - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._min_length = None
        self._type = None
        self._example = None
        self._max_length = None
        self.discriminator = None

        self.description = description
        self.min_length = min_length
        self.type = type
        self.example = example
        self.max_length = max_length

    @property
    def description(self):
        """Gets the description of this DynamicEntityStringTypeExample.  # noqa: E501


        :return: The description of this DynamicEntityStringTypeExample.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DynamicEntityStringTypeExample.


        :param description: The description of this DynamicEntityStringTypeExample.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def min_length(self):
        """Gets the min_length of this DynamicEntityStringTypeExample.  # noqa: E501


        :return: The min_length of this DynamicEntityStringTypeExample.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this DynamicEntityStringTypeExample.


        :param min_length: The min_length of this DynamicEntityStringTypeExample.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and min_length is None:
            raise ValueError("Invalid value for `min_length`, must not be `None`")  # noqa: E501

        self._min_length = min_length

    @property
    def type(self):
        """Gets the type of this DynamicEntityStringTypeExample.  # noqa: E501


        :return: The type of this DynamicEntityStringTypeExample.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DynamicEntityStringTypeExample.


        :param type: The type of this DynamicEntityStringTypeExample.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["number", "integer", "boolean", "string", "DATE_WITH_DAY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def example(self):
        """Gets the example of this DynamicEntityStringTypeExample.  # noqa: E501


        :return: The example of this DynamicEntityStringTypeExample.  # noqa: E501
        :rtype: str
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this DynamicEntityStringTypeExample.


        :param example: The example of this DynamicEntityStringTypeExample.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and example is None:
            raise ValueError("Invalid value for `example`, must not be `None`")  # noqa: E501

        self._example = example

    @property
    def max_length(self):
        """Gets the max_length of this DynamicEntityStringTypeExample.  # noqa: E501


        :return: The max_length of this DynamicEntityStringTypeExample.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this DynamicEntityStringTypeExample.


        :param max_length: The max_length of this DynamicEntityStringTypeExample.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and max_length is None:
            raise ValueError("Invalid value for `max_length`, must not be `None`")  # noqa: E501

        self._max_length = max_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DynamicEntityStringTypeExample, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DynamicEntityStringTypeExample):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DynamicEntityStringTypeExample):
            return True

        return self.to_dict() != other.to_dict()
