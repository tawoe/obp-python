# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class PostCounterpartyJson400(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'other_account_routing_address': 'str',
        'other_account_routing_scheme': 'str',
        'name': 'str',
        'other_account_secondary_routing_address': 'str',
        'is_beneficiary': 'bool',
        'description': 'str',
        'other_branch_routing_address': 'str',
        'bespoke': 'list[PostCounterpartyBespokeJson]',
        'other_bank_routing_scheme': 'str',
        'other_branch_routing_scheme': 'str',
        'currency': 'str',
        'other_bank_routing_address': 'str',
        'other_account_secondary_routing_scheme': 'str'
    }

    attribute_map = {
        'other_account_routing_address': 'other_account_routing_address',
        'other_account_routing_scheme': 'other_account_routing_scheme',
        'name': 'name',
        'other_account_secondary_routing_address': 'other_account_secondary_routing_address',
        'is_beneficiary': 'is_beneficiary',
        'description': 'description',
        'other_branch_routing_address': 'other_branch_routing_address',
        'bespoke': 'bespoke',
        'other_bank_routing_scheme': 'other_bank_routing_scheme',
        'other_branch_routing_scheme': 'other_branch_routing_scheme',
        'currency': 'currency',
        'other_bank_routing_address': 'other_bank_routing_address',
        'other_account_secondary_routing_scheme': 'other_account_secondary_routing_scheme'
    }

    def __init__(self, other_account_routing_address=None, other_account_routing_scheme=None, name=None, other_account_secondary_routing_address=None, is_beneficiary=None, description=None, other_branch_routing_address=None, bespoke=None, other_bank_routing_scheme=None, other_branch_routing_scheme=None, currency=None, other_bank_routing_address=None, other_account_secondary_routing_scheme=None, _configuration=None):  # noqa: E501
        """PostCounterpartyJson400 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._other_account_routing_address = None
        self._other_account_routing_scheme = None
        self._name = None
        self._other_account_secondary_routing_address = None
        self._is_beneficiary = None
        self._description = None
        self._other_branch_routing_address = None
        self._bespoke = None
        self._other_bank_routing_scheme = None
        self._other_branch_routing_scheme = None
        self._currency = None
        self._other_bank_routing_address = None
        self._other_account_secondary_routing_scheme = None
        self.discriminator = None

        self.other_account_routing_address = other_account_routing_address
        self.other_account_routing_scheme = other_account_routing_scheme
        self.name = name
        self.other_account_secondary_routing_address = other_account_secondary_routing_address
        self.is_beneficiary = is_beneficiary
        self.description = description
        self.other_branch_routing_address = other_branch_routing_address
        self.bespoke = bespoke
        self.other_bank_routing_scheme = other_bank_routing_scheme
        self.other_branch_routing_scheme = other_branch_routing_scheme
        self.currency = currency
        self.other_bank_routing_address = other_bank_routing_address
        self.other_account_secondary_routing_scheme = other_account_secondary_routing_scheme

    @property
    def other_account_routing_address(self):
        """Gets the other_account_routing_address of this PostCounterpartyJson400.  # noqa: E501


        :return: The other_account_routing_address of this PostCounterpartyJson400.  # noqa: E501
        :rtype: str
        """
        return self._other_account_routing_address

    @other_account_routing_address.setter
    def other_account_routing_address(self, other_account_routing_address):
        """Sets the other_account_routing_address of this PostCounterpartyJson400.


        :param other_account_routing_address: The other_account_routing_address of this PostCounterpartyJson400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and other_account_routing_address is None:
            raise ValueError("Invalid value for `other_account_routing_address`, must not be `None`")  # noqa: E501

        self._other_account_routing_address = other_account_routing_address

    @property
    def other_account_routing_scheme(self):
        """Gets the other_account_routing_scheme of this PostCounterpartyJson400.  # noqa: E501


        :return: The other_account_routing_scheme of this PostCounterpartyJson400.  # noqa: E501
        :rtype: str
        """
        return self._other_account_routing_scheme

    @other_account_routing_scheme.setter
    def other_account_routing_scheme(self, other_account_routing_scheme):
        """Sets the other_account_routing_scheme of this PostCounterpartyJson400.


        :param other_account_routing_scheme: The other_account_routing_scheme of this PostCounterpartyJson400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and other_account_routing_scheme is None:
            raise ValueError("Invalid value for `other_account_routing_scheme`, must not be `None`")  # noqa: E501

        self._other_account_routing_scheme = other_account_routing_scheme

    @property
    def name(self):
        """Gets the name of this PostCounterpartyJson400.  # noqa: E501


        :return: The name of this PostCounterpartyJson400.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostCounterpartyJson400.


        :param name: The name of this PostCounterpartyJson400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def other_account_secondary_routing_address(self):
        """Gets the other_account_secondary_routing_address of this PostCounterpartyJson400.  # noqa: E501


        :return: The other_account_secondary_routing_address of this PostCounterpartyJson400.  # noqa: E501
        :rtype: str
        """
        return self._other_account_secondary_routing_address

    @other_account_secondary_routing_address.setter
    def other_account_secondary_routing_address(self, other_account_secondary_routing_address):
        """Sets the other_account_secondary_routing_address of this PostCounterpartyJson400.


        :param other_account_secondary_routing_address: The other_account_secondary_routing_address of this PostCounterpartyJson400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and other_account_secondary_routing_address is None:
            raise ValueError("Invalid value for `other_account_secondary_routing_address`, must not be `None`")  # noqa: E501

        self._other_account_secondary_routing_address = other_account_secondary_routing_address

    @property
    def is_beneficiary(self):
        """Gets the is_beneficiary of this PostCounterpartyJson400.  # noqa: E501


        :return: The is_beneficiary of this PostCounterpartyJson400.  # noqa: E501
        :rtype: bool
        """
        return self._is_beneficiary

    @is_beneficiary.setter
    def is_beneficiary(self, is_beneficiary):
        """Sets the is_beneficiary of this PostCounterpartyJson400.


        :param is_beneficiary: The is_beneficiary of this PostCounterpartyJson400.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_beneficiary is None:
            raise ValueError("Invalid value for `is_beneficiary`, must not be `None`")  # noqa: E501

        self._is_beneficiary = is_beneficiary

    @property
    def description(self):
        """Gets the description of this PostCounterpartyJson400.  # noqa: E501


        :return: The description of this PostCounterpartyJson400.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostCounterpartyJson400.


        :param description: The description of this PostCounterpartyJson400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def other_branch_routing_address(self):
        """Gets the other_branch_routing_address of this PostCounterpartyJson400.  # noqa: E501


        :return: The other_branch_routing_address of this PostCounterpartyJson400.  # noqa: E501
        :rtype: str
        """
        return self._other_branch_routing_address

    @other_branch_routing_address.setter
    def other_branch_routing_address(self, other_branch_routing_address):
        """Sets the other_branch_routing_address of this PostCounterpartyJson400.


        :param other_branch_routing_address: The other_branch_routing_address of this PostCounterpartyJson400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and other_branch_routing_address is None:
            raise ValueError("Invalid value for `other_branch_routing_address`, must not be `None`")  # noqa: E501

        self._other_branch_routing_address = other_branch_routing_address

    @property
    def bespoke(self):
        """Gets the bespoke of this PostCounterpartyJson400.  # noqa: E501


        :return: The bespoke of this PostCounterpartyJson400.  # noqa: E501
        :rtype: list[PostCounterpartyBespokeJson]
        """
        return self._bespoke

    @bespoke.setter
    def bespoke(self, bespoke):
        """Sets the bespoke of this PostCounterpartyJson400.


        :param bespoke: The bespoke of this PostCounterpartyJson400.  # noqa: E501
        :type: list[PostCounterpartyBespokeJson]
        """
        if self._configuration.client_side_validation and bespoke is None:
            raise ValueError("Invalid value for `bespoke`, must not be `None`")  # noqa: E501

        self._bespoke = bespoke

    @property
    def other_bank_routing_scheme(self):
        """Gets the other_bank_routing_scheme of this PostCounterpartyJson400.  # noqa: E501


        :return: The other_bank_routing_scheme of this PostCounterpartyJson400.  # noqa: E501
        :rtype: str
        """
        return self._other_bank_routing_scheme

    @other_bank_routing_scheme.setter
    def other_bank_routing_scheme(self, other_bank_routing_scheme):
        """Sets the other_bank_routing_scheme of this PostCounterpartyJson400.


        :param other_bank_routing_scheme: The other_bank_routing_scheme of this PostCounterpartyJson400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and other_bank_routing_scheme is None:
            raise ValueError("Invalid value for `other_bank_routing_scheme`, must not be `None`")  # noqa: E501

        self._other_bank_routing_scheme = other_bank_routing_scheme

    @property
    def other_branch_routing_scheme(self):
        """Gets the other_branch_routing_scheme of this PostCounterpartyJson400.  # noqa: E501


        :return: The other_branch_routing_scheme of this PostCounterpartyJson400.  # noqa: E501
        :rtype: str
        """
        return self._other_branch_routing_scheme

    @other_branch_routing_scheme.setter
    def other_branch_routing_scheme(self, other_branch_routing_scheme):
        """Sets the other_branch_routing_scheme of this PostCounterpartyJson400.


        :param other_branch_routing_scheme: The other_branch_routing_scheme of this PostCounterpartyJson400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and other_branch_routing_scheme is None:
            raise ValueError("Invalid value for `other_branch_routing_scheme`, must not be `None`")  # noqa: E501

        self._other_branch_routing_scheme = other_branch_routing_scheme

    @property
    def currency(self):
        """Gets the currency of this PostCounterpartyJson400.  # noqa: E501


        :return: The currency of this PostCounterpartyJson400.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PostCounterpartyJson400.


        :param currency: The currency of this PostCounterpartyJson400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def other_bank_routing_address(self):
        """Gets the other_bank_routing_address of this PostCounterpartyJson400.  # noqa: E501


        :return: The other_bank_routing_address of this PostCounterpartyJson400.  # noqa: E501
        :rtype: str
        """
        return self._other_bank_routing_address

    @other_bank_routing_address.setter
    def other_bank_routing_address(self, other_bank_routing_address):
        """Sets the other_bank_routing_address of this PostCounterpartyJson400.


        :param other_bank_routing_address: The other_bank_routing_address of this PostCounterpartyJson400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and other_bank_routing_address is None:
            raise ValueError("Invalid value for `other_bank_routing_address`, must not be `None`")  # noqa: E501

        self._other_bank_routing_address = other_bank_routing_address

    @property
    def other_account_secondary_routing_scheme(self):
        """Gets the other_account_secondary_routing_scheme of this PostCounterpartyJson400.  # noqa: E501


        :return: The other_account_secondary_routing_scheme of this PostCounterpartyJson400.  # noqa: E501
        :rtype: str
        """
        return self._other_account_secondary_routing_scheme

    @other_account_secondary_routing_scheme.setter
    def other_account_secondary_routing_scheme(self, other_account_secondary_routing_scheme):
        """Sets the other_account_secondary_routing_scheme of this PostCounterpartyJson400.


        :param other_account_secondary_routing_scheme: The other_account_secondary_routing_scheme of this PostCounterpartyJson400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and other_account_secondary_routing_scheme is None:
            raise ValueError("Invalid value for `other_account_secondary_routing_scheme`, must not be `None`")  # noqa: E501

        self._other_account_secondary_routing_scheme = other_account_secondary_routing_scheme

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostCounterpartyJson400, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostCounterpartyJson400):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostCounterpartyJson400):
            return True

        return self.to_dict() != other.to_dict()
