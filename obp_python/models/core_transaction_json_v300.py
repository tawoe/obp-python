# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class CoreTransactionJsonV300(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'this_account': 'ThisAccountJsonV300',
        'id': 'str',
        'details': 'CoreTransactionDetailsJSON',
        'other_account': 'CoreCounterpartyJsonV300',
        'transaction_attributes': 'list[TransactionAttributeResponseJson]'
    }

    attribute_map = {
        'this_account': 'this_account',
        'id': 'id',
        'details': 'details',
        'other_account': 'other_account',
        'transaction_attributes': 'transaction_attributes'
    }

    def __init__(self, this_account=None, id=None, details=None, other_account=None, transaction_attributes=None, _configuration=None):  # noqa: E501
        """CoreTransactionJsonV300 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._this_account = None
        self._id = None
        self._details = None
        self._other_account = None
        self._transaction_attributes = None
        self.discriminator = None

        self.this_account = this_account
        self.id = id
        self.details = details
        self.other_account = other_account
        self.transaction_attributes = transaction_attributes

    @property
    def this_account(self):
        """Gets the this_account of this CoreTransactionJsonV300.  # noqa: E501


        :return: The this_account of this CoreTransactionJsonV300.  # noqa: E501
        :rtype: ThisAccountJsonV300
        """
        return self._this_account

    @this_account.setter
    def this_account(self, this_account):
        """Sets the this_account of this CoreTransactionJsonV300.


        :param this_account: The this_account of this CoreTransactionJsonV300.  # noqa: E501
        :type: ThisAccountJsonV300
        """
        if self._configuration.client_side_validation and this_account is None:
            raise ValueError("Invalid value for `this_account`, must not be `None`")  # noqa: E501

        self._this_account = this_account

    @property
    def id(self):
        """Gets the id of this CoreTransactionJsonV300.  # noqa: E501


        :return: The id of this CoreTransactionJsonV300.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CoreTransactionJsonV300.


        :param id: The id of this CoreTransactionJsonV300.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def details(self):
        """Gets the details of this CoreTransactionJsonV300.  # noqa: E501


        :return: The details of this CoreTransactionJsonV300.  # noqa: E501
        :rtype: CoreTransactionDetailsJSON
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this CoreTransactionJsonV300.


        :param details: The details of this CoreTransactionJsonV300.  # noqa: E501
        :type: CoreTransactionDetailsJSON
        """
        if self._configuration.client_side_validation and details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    @property
    def other_account(self):
        """Gets the other_account of this CoreTransactionJsonV300.  # noqa: E501


        :return: The other_account of this CoreTransactionJsonV300.  # noqa: E501
        :rtype: CoreCounterpartyJsonV300
        """
        return self._other_account

    @other_account.setter
    def other_account(self, other_account):
        """Sets the other_account of this CoreTransactionJsonV300.


        :param other_account: The other_account of this CoreTransactionJsonV300.  # noqa: E501
        :type: CoreCounterpartyJsonV300
        """
        if self._configuration.client_side_validation and other_account is None:
            raise ValueError("Invalid value for `other_account`, must not be `None`")  # noqa: E501

        self._other_account = other_account

    @property
    def transaction_attributes(self):
        """Gets the transaction_attributes of this CoreTransactionJsonV300.  # noqa: E501


        :return: The transaction_attributes of this CoreTransactionJsonV300.  # noqa: E501
        :rtype: list[TransactionAttributeResponseJson]
        """
        return self._transaction_attributes

    @transaction_attributes.setter
    def transaction_attributes(self, transaction_attributes):
        """Sets the transaction_attributes of this CoreTransactionJsonV300.


        :param transaction_attributes: The transaction_attributes of this CoreTransactionJsonV300.  # noqa: E501
        :type: list[TransactionAttributeResponseJson]
        """
        if self._configuration.client_side_validation and transaction_attributes is None:
            raise ValueError("Invalid value for `transaction_attributes`, must not be `None`")  # noqa: E501

        self._transaction_attributes = transaction_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreTransactionJsonV300, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreTransactionJsonV300):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CoreTransactionJsonV300):
            return True

        return self.to_dict() != other.to_dict()
