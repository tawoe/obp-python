# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class ProductFeeResponseJsonV400(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_active': 'bool',
        'product_code': 'str',
        'more_info': 'str',
        'bank_id': 'str',
        'product_fee_id': 'str',
        'value': 'ProductFeeValueJsonV400'
    }

    attribute_map = {
        'name': 'name',
        'is_active': 'is_active',
        'product_code': 'product_code',
        'more_info': 'more_info',
        'bank_id': 'bank_id',
        'product_fee_id': 'product_fee_id',
        'value': 'value'
    }

    def __init__(self, name=None, is_active=None, product_code=None, more_info=None, bank_id=None, product_fee_id=None, value=None, _configuration=None):  # noqa: E501
        """ProductFeeResponseJsonV400 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._is_active = None
        self._product_code = None
        self._more_info = None
        self._bank_id = None
        self._product_fee_id = None
        self._value = None
        self.discriminator = None

        self.name = name
        self.is_active = is_active
        self.product_code = product_code
        self.more_info = more_info
        self.bank_id = bank_id
        self.product_fee_id = product_fee_id
        self.value = value

    @property
    def name(self):
        """Gets the name of this ProductFeeResponseJsonV400.  # noqa: E501


        :return: The name of this ProductFeeResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductFeeResponseJsonV400.


        :param name: The name of this ProductFeeResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def is_active(self):
        """Gets the is_active of this ProductFeeResponseJsonV400.  # noqa: E501


        :return: The is_active of this ProductFeeResponseJsonV400.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ProductFeeResponseJsonV400.


        :param is_active: The is_active of this ProductFeeResponseJsonV400.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def product_code(self):
        """Gets the product_code of this ProductFeeResponseJsonV400.  # noqa: E501


        :return: The product_code of this ProductFeeResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this ProductFeeResponseJsonV400.


        :param product_code: The product_code of this ProductFeeResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")  # noqa: E501

        self._product_code = product_code

    @property
    def more_info(self):
        """Gets the more_info of this ProductFeeResponseJsonV400.  # noqa: E501


        :return: The more_info of this ProductFeeResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this ProductFeeResponseJsonV400.


        :param more_info: The more_info of this ProductFeeResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and more_info is None:
            raise ValueError("Invalid value for `more_info`, must not be `None`")  # noqa: E501

        self._more_info = more_info

    @property
    def bank_id(self):
        """Gets the bank_id of this ProductFeeResponseJsonV400.  # noqa: E501


        :return: The bank_id of this ProductFeeResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this ProductFeeResponseJsonV400.


        :param bank_id: The bank_id of this ProductFeeResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    @property
    def product_fee_id(self):
        """Gets the product_fee_id of this ProductFeeResponseJsonV400.  # noqa: E501


        :return: The product_fee_id of this ProductFeeResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._product_fee_id

    @product_fee_id.setter
    def product_fee_id(self, product_fee_id):
        """Sets the product_fee_id of this ProductFeeResponseJsonV400.


        :param product_fee_id: The product_fee_id of this ProductFeeResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and product_fee_id is None:
            raise ValueError("Invalid value for `product_fee_id`, must not be `None`")  # noqa: E501

        self._product_fee_id = product_fee_id

    @property
    def value(self):
        """Gets the value of this ProductFeeResponseJsonV400.  # noqa: E501


        :return: The value of this ProductFeeResponseJsonV400.  # noqa: E501
        :rtype: ProductFeeValueJsonV400
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ProductFeeResponseJsonV400.


        :param value: The value of this ProductFeeResponseJsonV400.  # noqa: E501
        :type: ProductFeeValueJsonV400
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductFeeResponseJsonV400, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductFeeResponseJsonV400):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductFeeResponseJsonV400):
            return True

        return self.to_dict() != other.to_dict()
