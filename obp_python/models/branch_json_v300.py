# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class BranchJsonV300(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'phone_number': 'str',
        'location': 'LocationJsonV140',
        'branch_type': 'str',
        'branch_routing': 'BranchRoutingJsonV141',
        'drive_up': 'DriveUpJsonV330',
        'more_info': 'str',
        'bank_id': 'str',
        'id': 'str',
        'meta': 'MetaJsonV140',
        'lobby': 'LobbyJsonV330',
        'accessible_features': 'str',
        'address': 'AddressJsonV300',
        'is_accessible': 'str'
    }

    attribute_map = {
        'name': 'name',
        'phone_number': 'phone_number',
        'location': 'location',
        'branch_type': 'branch_type',
        'branch_routing': 'branch_routing',
        'drive_up': 'drive_up',
        'more_info': 'more_info',
        'bank_id': 'bank_id',
        'id': 'id',
        'meta': 'meta',
        'lobby': 'lobby',
        'accessible_features': 'accessibleFeatures',
        'address': 'address',
        'is_accessible': 'is_accessible'
    }

    def __init__(self, name=None, phone_number=None, location=None, branch_type=None, branch_routing=None, drive_up=None, more_info=None, bank_id=None, id=None, meta=None, lobby=None, accessible_features=None, address=None, is_accessible=None, _configuration=None):  # noqa: E501
        """BranchJsonV300 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._phone_number = None
        self._location = None
        self._branch_type = None
        self._branch_routing = None
        self._drive_up = None
        self._more_info = None
        self._bank_id = None
        self._id = None
        self._meta = None
        self._lobby = None
        self._accessible_features = None
        self._address = None
        self._is_accessible = None
        self.discriminator = None

        self.name = name
        self.phone_number = phone_number
        self.location = location
        self.branch_type = branch_type
        self.branch_routing = branch_routing
        self.drive_up = drive_up
        self.more_info = more_info
        self.bank_id = bank_id
        self.id = id
        self.meta = meta
        self.lobby = lobby
        self.accessible_features = accessible_features
        self.address = address
        self.is_accessible = is_accessible

    @property
    def name(self):
        """Gets the name of this BranchJsonV300.  # noqa: E501


        :return: The name of this BranchJsonV300.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BranchJsonV300.


        :param name: The name of this BranchJsonV300.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this BranchJsonV300.  # noqa: E501


        :return: The phone_number of this BranchJsonV300.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this BranchJsonV300.


        :param phone_number: The phone_number of this BranchJsonV300.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def location(self):
        """Gets the location of this BranchJsonV300.  # noqa: E501


        :return: The location of this BranchJsonV300.  # noqa: E501
        :rtype: LocationJsonV140
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this BranchJsonV300.


        :param location: The location of this BranchJsonV300.  # noqa: E501
        :type: LocationJsonV140
        """
        if self._configuration.client_side_validation and location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def branch_type(self):
        """Gets the branch_type of this BranchJsonV300.  # noqa: E501


        :return: The branch_type of this BranchJsonV300.  # noqa: E501
        :rtype: str
        """
        return self._branch_type

    @branch_type.setter
    def branch_type(self, branch_type):
        """Sets the branch_type of this BranchJsonV300.


        :param branch_type: The branch_type of this BranchJsonV300.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and branch_type is None:
            raise ValueError("Invalid value for `branch_type`, must not be `None`")  # noqa: E501

        self._branch_type = branch_type

    @property
    def branch_routing(self):
        """Gets the branch_routing of this BranchJsonV300.  # noqa: E501


        :return: The branch_routing of this BranchJsonV300.  # noqa: E501
        :rtype: BranchRoutingJsonV141
        """
        return self._branch_routing

    @branch_routing.setter
    def branch_routing(self, branch_routing):
        """Sets the branch_routing of this BranchJsonV300.


        :param branch_routing: The branch_routing of this BranchJsonV300.  # noqa: E501
        :type: BranchRoutingJsonV141
        """
        if self._configuration.client_side_validation and branch_routing is None:
            raise ValueError("Invalid value for `branch_routing`, must not be `None`")  # noqa: E501

        self._branch_routing = branch_routing

    @property
    def drive_up(self):
        """Gets the drive_up of this BranchJsonV300.  # noqa: E501


        :return: The drive_up of this BranchJsonV300.  # noqa: E501
        :rtype: DriveUpJsonV330
        """
        return self._drive_up

    @drive_up.setter
    def drive_up(self, drive_up):
        """Sets the drive_up of this BranchJsonV300.


        :param drive_up: The drive_up of this BranchJsonV300.  # noqa: E501
        :type: DriveUpJsonV330
        """
        if self._configuration.client_side_validation and drive_up is None:
            raise ValueError("Invalid value for `drive_up`, must not be `None`")  # noqa: E501

        self._drive_up = drive_up

    @property
    def more_info(self):
        """Gets the more_info of this BranchJsonV300.  # noqa: E501


        :return: The more_info of this BranchJsonV300.  # noqa: E501
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this BranchJsonV300.


        :param more_info: The more_info of this BranchJsonV300.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and more_info is None:
            raise ValueError("Invalid value for `more_info`, must not be `None`")  # noqa: E501

        self._more_info = more_info

    @property
    def bank_id(self):
        """Gets the bank_id of this BranchJsonV300.  # noqa: E501


        :return: The bank_id of this BranchJsonV300.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this BranchJsonV300.


        :param bank_id: The bank_id of this BranchJsonV300.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    @property
    def id(self):
        """Gets the id of this BranchJsonV300.  # noqa: E501


        :return: The id of this BranchJsonV300.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BranchJsonV300.


        :param id: The id of this BranchJsonV300.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def meta(self):
        """Gets the meta of this BranchJsonV300.  # noqa: E501


        :return: The meta of this BranchJsonV300.  # noqa: E501
        :rtype: MetaJsonV140
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this BranchJsonV300.


        :param meta: The meta of this BranchJsonV300.  # noqa: E501
        :type: MetaJsonV140
        """
        if self._configuration.client_side_validation and meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    @property
    def lobby(self):
        """Gets the lobby of this BranchJsonV300.  # noqa: E501


        :return: The lobby of this BranchJsonV300.  # noqa: E501
        :rtype: LobbyJsonV330
        """
        return self._lobby

    @lobby.setter
    def lobby(self, lobby):
        """Sets the lobby of this BranchJsonV300.


        :param lobby: The lobby of this BranchJsonV300.  # noqa: E501
        :type: LobbyJsonV330
        """
        if self._configuration.client_side_validation and lobby is None:
            raise ValueError("Invalid value for `lobby`, must not be `None`")  # noqa: E501

        self._lobby = lobby

    @property
    def accessible_features(self):
        """Gets the accessible_features of this BranchJsonV300.  # noqa: E501


        :return: The accessible_features of this BranchJsonV300.  # noqa: E501
        :rtype: str
        """
        return self._accessible_features

    @accessible_features.setter
    def accessible_features(self, accessible_features):
        """Sets the accessible_features of this BranchJsonV300.


        :param accessible_features: The accessible_features of this BranchJsonV300.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and accessible_features is None:
            raise ValueError("Invalid value for `accessible_features`, must not be `None`")  # noqa: E501

        self._accessible_features = accessible_features

    @property
    def address(self):
        """Gets the address of this BranchJsonV300.  # noqa: E501


        :return: The address of this BranchJsonV300.  # noqa: E501
        :rtype: AddressJsonV300
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this BranchJsonV300.


        :param address: The address of this BranchJsonV300.  # noqa: E501
        :type: AddressJsonV300
        """
        if self._configuration.client_side_validation and address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def is_accessible(self):
        """Gets the is_accessible of this BranchJsonV300.  # noqa: E501


        :return: The is_accessible of this BranchJsonV300.  # noqa: E501
        :rtype: str
        """
        return self._is_accessible

    @is_accessible.setter
    def is_accessible(self, is_accessible):
        """Sets the is_accessible of this BranchJsonV300.


        :param is_accessible: The is_accessible of this BranchJsonV300.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and is_accessible is None:
            raise ValueError("Invalid value for `is_accessible`, must not be `None`")  # noqa: E501

        self._is_accessible = is_accessible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BranchJsonV300, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BranchJsonV300):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BranchJsonV300):
            return True

        return self.to_dict() != other.to_dict()
