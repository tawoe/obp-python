# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class TransactionRequestBodyAllTypes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'to_transfer_to_phone': 'TransactionRequestTransferToPhone',
        'description': 'str',
        'to_transfer_to_atm': 'TransactionRequestTransferToAtm',
        'to_counterparty': 'TransactionRequestCounterpartyId',
        'to_sepa_credit_transfers': 'SepaCreditTransfers',
        'to_simple': 'String',
        'to_sepa': 'TransactionRequestIban',
        'to_transfer_to_account': 'TransactionRequestTransferToAccount',
        'value': 'AmountOfMoney',
        'to_sandbox_tan': 'TransactionRequestAccount'
    }

    attribute_map = {
        'to_transfer_to_phone': 'to_transfer_to_phone',
        'description': 'description',
        'to_transfer_to_atm': 'to_transfer_to_atm',
        'to_counterparty': 'to_counterparty',
        'to_sepa_credit_transfers': 'to_sepa_credit_transfers',
        'to_simple': 'to_simple',
        'to_sepa': 'to_sepa',
        'to_transfer_to_account': 'to_transfer_to_account',
        'value': 'value',
        'to_sandbox_tan': 'to_sandbox_tan'
    }

    def __init__(self, to_transfer_to_phone=None, description=None, to_transfer_to_atm=None, to_counterparty=None, to_sepa_credit_transfers=None, to_simple=None, to_sepa=None, to_transfer_to_account=None, value=None, to_sandbox_tan=None, _configuration=None):  # noqa: E501
        """TransactionRequestBodyAllTypes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._to_transfer_to_phone = None
        self._description = None
        self._to_transfer_to_atm = None
        self._to_counterparty = None
        self._to_sepa_credit_transfers = None
        self._to_simple = None
        self._to_sepa = None
        self._to_transfer_to_account = None
        self._value = None
        self._to_sandbox_tan = None
        self.discriminator = None

        if to_transfer_to_phone is not None:
            self.to_transfer_to_phone = to_transfer_to_phone
        self.description = description
        if to_transfer_to_atm is not None:
            self.to_transfer_to_atm = to_transfer_to_atm
        if to_counterparty is not None:
            self.to_counterparty = to_counterparty
        if to_sepa_credit_transfers is not None:
            self.to_sepa_credit_transfers = to_sepa_credit_transfers
        if to_simple is not None:
            self.to_simple = to_simple
        if to_sepa is not None:
            self.to_sepa = to_sepa
        if to_transfer_to_account is not None:
            self.to_transfer_to_account = to_transfer_to_account
        self.value = value
        if to_sandbox_tan is not None:
            self.to_sandbox_tan = to_sandbox_tan

    @property
    def to_transfer_to_phone(self):
        """Gets the to_transfer_to_phone of this TransactionRequestBodyAllTypes.  # noqa: E501


        :return: The to_transfer_to_phone of this TransactionRequestBodyAllTypes.  # noqa: E501
        :rtype: TransactionRequestTransferToPhone
        """
        return self._to_transfer_to_phone

    @to_transfer_to_phone.setter
    def to_transfer_to_phone(self, to_transfer_to_phone):
        """Sets the to_transfer_to_phone of this TransactionRequestBodyAllTypes.


        :param to_transfer_to_phone: The to_transfer_to_phone of this TransactionRequestBodyAllTypes.  # noqa: E501
        :type: TransactionRequestTransferToPhone
        """

        self._to_transfer_to_phone = to_transfer_to_phone

    @property
    def description(self):
        """Gets the description of this TransactionRequestBodyAllTypes.  # noqa: E501


        :return: The description of this TransactionRequestBodyAllTypes.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransactionRequestBodyAllTypes.


        :param description: The description of this TransactionRequestBodyAllTypes.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def to_transfer_to_atm(self):
        """Gets the to_transfer_to_atm of this TransactionRequestBodyAllTypes.  # noqa: E501


        :return: The to_transfer_to_atm of this TransactionRequestBodyAllTypes.  # noqa: E501
        :rtype: TransactionRequestTransferToAtm
        """
        return self._to_transfer_to_atm

    @to_transfer_to_atm.setter
    def to_transfer_to_atm(self, to_transfer_to_atm):
        """Sets the to_transfer_to_atm of this TransactionRequestBodyAllTypes.


        :param to_transfer_to_atm: The to_transfer_to_atm of this TransactionRequestBodyAllTypes.  # noqa: E501
        :type: TransactionRequestTransferToAtm
        """

        self._to_transfer_to_atm = to_transfer_to_atm

    @property
    def to_counterparty(self):
        """Gets the to_counterparty of this TransactionRequestBodyAllTypes.  # noqa: E501


        :return: The to_counterparty of this TransactionRequestBodyAllTypes.  # noqa: E501
        :rtype: TransactionRequestCounterpartyId
        """
        return self._to_counterparty

    @to_counterparty.setter
    def to_counterparty(self, to_counterparty):
        """Sets the to_counterparty of this TransactionRequestBodyAllTypes.


        :param to_counterparty: The to_counterparty of this TransactionRequestBodyAllTypes.  # noqa: E501
        :type: TransactionRequestCounterpartyId
        """

        self._to_counterparty = to_counterparty

    @property
    def to_sepa_credit_transfers(self):
        """Gets the to_sepa_credit_transfers of this TransactionRequestBodyAllTypes.  # noqa: E501


        :return: The to_sepa_credit_transfers of this TransactionRequestBodyAllTypes.  # noqa: E501
        :rtype: SepaCreditTransfers
        """
        return self._to_sepa_credit_transfers

    @to_sepa_credit_transfers.setter
    def to_sepa_credit_transfers(self, to_sepa_credit_transfers):
        """Sets the to_sepa_credit_transfers of this TransactionRequestBodyAllTypes.


        :param to_sepa_credit_transfers: The to_sepa_credit_transfers of this TransactionRequestBodyAllTypes.  # noqa: E501
        :type: SepaCreditTransfers
        """

        self._to_sepa_credit_transfers = to_sepa_credit_transfers

    @property
    def to_simple(self):
        """Gets the to_simple of this TransactionRequestBodyAllTypes.  # noqa: E501


        :return: The to_simple of this TransactionRequestBodyAllTypes.  # noqa: E501
        :rtype: String
        """
        return self._to_simple

    @to_simple.setter
    def to_simple(self, to_simple):
        """Sets the to_simple of this TransactionRequestBodyAllTypes.


        :param to_simple: The to_simple of this TransactionRequestBodyAllTypes.  # noqa: E501
        :type: String
        """

        self._to_simple = to_simple

    @property
    def to_sepa(self):
        """Gets the to_sepa of this TransactionRequestBodyAllTypes.  # noqa: E501


        :return: The to_sepa of this TransactionRequestBodyAllTypes.  # noqa: E501
        :rtype: TransactionRequestIban
        """
        return self._to_sepa

    @to_sepa.setter
    def to_sepa(self, to_sepa):
        """Sets the to_sepa of this TransactionRequestBodyAllTypes.


        :param to_sepa: The to_sepa of this TransactionRequestBodyAllTypes.  # noqa: E501
        :type: TransactionRequestIban
        """

        self._to_sepa = to_sepa

    @property
    def to_transfer_to_account(self):
        """Gets the to_transfer_to_account of this TransactionRequestBodyAllTypes.  # noqa: E501


        :return: The to_transfer_to_account of this TransactionRequestBodyAllTypes.  # noqa: E501
        :rtype: TransactionRequestTransferToAccount
        """
        return self._to_transfer_to_account

    @to_transfer_to_account.setter
    def to_transfer_to_account(self, to_transfer_to_account):
        """Sets the to_transfer_to_account of this TransactionRequestBodyAllTypes.


        :param to_transfer_to_account: The to_transfer_to_account of this TransactionRequestBodyAllTypes.  # noqa: E501
        :type: TransactionRequestTransferToAccount
        """

        self._to_transfer_to_account = to_transfer_to_account

    @property
    def value(self):
        """Gets the value of this TransactionRequestBodyAllTypes.  # noqa: E501


        :return: The value of this TransactionRequestBodyAllTypes.  # noqa: E501
        :rtype: AmountOfMoney
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TransactionRequestBodyAllTypes.


        :param value: The value of this TransactionRequestBodyAllTypes.  # noqa: E501
        :type: AmountOfMoney
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def to_sandbox_tan(self):
        """Gets the to_sandbox_tan of this TransactionRequestBodyAllTypes.  # noqa: E501


        :return: The to_sandbox_tan of this TransactionRequestBodyAllTypes.  # noqa: E501
        :rtype: TransactionRequestAccount
        """
        return self._to_sandbox_tan

    @to_sandbox_tan.setter
    def to_sandbox_tan(self, to_sandbox_tan):
        """Sets the to_sandbox_tan of this TransactionRequestBodyAllTypes.


        :param to_sandbox_tan: The to_sandbox_tan of this TransactionRequestBodyAllTypes.  # noqa: E501
        :type: TransactionRequestAccount
        """

        self._to_sandbox_tan = to_sandbox_tan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionRequestBodyAllTypes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionRequestBodyAllTypes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionRequestBodyAllTypes):
            return True

        return self.to_dict() != other.to_dict()
