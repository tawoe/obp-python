# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class DoubleEntryTransactionJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_request': 'TransactionRequestBankAccountJson',
        'debit_transaction': 'TransactionBankAccountJson',
        'credit_transaction': 'TransactionBankAccountJson'
    }

    attribute_map = {
        'transaction_request': 'transaction_request',
        'debit_transaction': 'debit_transaction',
        'credit_transaction': 'credit_transaction'
    }

    def __init__(self, transaction_request=None, debit_transaction=None, credit_transaction=None, _configuration=None):  # noqa: E501
        """DoubleEntryTransactionJson - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._transaction_request = None
        self._debit_transaction = None
        self._credit_transaction = None
        self.discriminator = None

        self.transaction_request = transaction_request
        self.debit_transaction = debit_transaction
        self.credit_transaction = credit_transaction

    @property
    def transaction_request(self):
        """Gets the transaction_request of this DoubleEntryTransactionJson.  # noqa: E501


        :return: The transaction_request of this DoubleEntryTransactionJson.  # noqa: E501
        :rtype: TransactionRequestBankAccountJson
        """
        return self._transaction_request

    @transaction_request.setter
    def transaction_request(self, transaction_request):
        """Sets the transaction_request of this DoubleEntryTransactionJson.


        :param transaction_request: The transaction_request of this DoubleEntryTransactionJson.  # noqa: E501
        :type: TransactionRequestBankAccountJson
        """
        if self._configuration.client_side_validation and transaction_request is None:
            raise ValueError("Invalid value for `transaction_request`, must not be `None`")  # noqa: E501

        self._transaction_request = transaction_request

    @property
    def debit_transaction(self):
        """Gets the debit_transaction of this DoubleEntryTransactionJson.  # noqa: E501


        :return: The debit_transaction of this DoubleEntryTransactionJson.  # noqa: E501
        :rtype: TransactionBankAccountJson
        """
        return self._debit_transaction

    @debit_transaction.setter
    def debit_transaction(self, debit_transaction):
        """Sets the debit_transaction of this DoubleEntryTransactionJson.


        :param debit_transaction: The debit_transaction of this DoubleEntryTransactionJson.  # noqa: E501
        :type: TransactionBankAccountJson
        """
        if self._configuration.client_side_validation and debit_transaction is None:
            raise ValueError("Invalid value for `debit_transaction`, must not be `None`")  # noqa: E501

        self._debit_transaction = debit_transaction

    @property
    def credit_transaction(self):
        """Gets the credit_transaction of this DoubleEntryTransactionJson.  # noqa: E501


        :return: The credit_transaction of this DoubleEntryTransactionJson.  # noqa: E501
        :rtype: TransactionBankAccountJson
        """
        return self._credit_transaction

    @credit_transaction.setter
    def credit_transaction(self, credit_transaction):
        """Sets the credit_transaction of this DoubleEntryTransactionJson.


        :param credit_transaction: The credit_transaction of this DoubleEntryTransactionJson.  # noqa: E501
        :type: TransactionBankAccountJson
        """
        if self._configuration.client_side_validation and credit_transaction is None:
            raise ValueError("Invalid value for `credit_transaction`, must not be `None`")  # noqa: E501

        self._credit_transaction = credit_transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DoubleEntryTransactionJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DoubleEntryTransactionJson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DoubleEntryTransactionJson):
            return True

        return self.to_dict() != other.to_dict()
