# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class OrderObjectJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'number_of_checkbooks': 'str',
        'first_check_number': 'str',
        'order_date': 'str',
        'status': 'str',
        'shipping_code': 'str',
        'distribution_channel': 'str'
    }

    attribute_map = {
        'order_id': 'order_id',
        'number_of_checkbooks': 'number_of_checkbooks',
        'first_check_number': 'first_check_number',
        'order_date': 'order_date',
        'status': 'status',
        'shipping_code': 'shipping_code',
        'distribution_channel': 'distribution_channel'
    }

    def __init__(self, order_id=None, number_of_checkbooks=None, first_check_number=None, order_date=None, status=None, shipping_code=None, distribution_channel=None, _configuration=None):  # noqa: E501
        """OrderObjectJson - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._order_id = None
        self._number_of_checkbooks = None
        self._first_check_number = None
        self._order_date = None
        self._status = None
        self._shipping_code = None
        self._distribution_channel = None
        self.discriminator = None

        self.order_id = order_id
        self.number_of_checkbooks = number_of_checkbooks
        self.first_check_number = first_check_number
        self.order_date = order_date
        self.status = status
        self.shipping_code = shipping_code
        self.distribution_channel = distribution_channel

    @property
    def order_id(self):
        """Gets the order_id of this OrderObjectJson.  # noqa: E501


        :return: The order_id of this OrderObjectJson.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderObjectJson.


        :param order_id: The order_id of this OrderObjectJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def number_of_checkbooks(self):
        """Gets the number_of_checkbooks of this OrderObjectJson.  # noqa: E501


        :return: The number_of_checkbooks of this OrderObjectJson.  # noqa: E501
        :rtype: str
        """
        return self._number_of_checkbooks

    @number_of_checkbooks.setter
    def number_of_checkbooks(self, number_of_checkbooks):
        """Sets the number_of_checkbooks of this OrderObjectJson.


        :param number_of_checkbooks: The number_of_checkbooks of this OrderObjectJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and number_of_checkbooks is None:
            raise ValueError("Invalid value for `number_of_checkbooks`, must not be `None`")  # noqa: E501

        self._number_of_checkbooks = number_of_checkbooks

    @property
    def first_check_number(self):
        """Gets the first_check_number of this OrderObjectJson.  # noqa: E501


        :return: The first_check_number of this OrderObjectJson.  # noqa: E501
        :rtype: str
        """
        return self._first_check_number

    @first_check_number.setter
    def first_check_number(self, first_check_number):
        """Sets the first_check_number of this OrderObjectJson.


        :param first_check_number: The first_check_number of this OrderObjectJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_check_number is None:
            raise ValueError("Invalid value for `first_check_number`, must not be `None`")  # noqa: E501

        self._first_check_number = first_check_number

    @property
    def order_date(self):
        """Gets the order_date of this OrderObjectJson.  # noqa: E501


        :return: The order_date of this OrderObjectJson.  # noqa: E501
        :rtype: str
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this OrderObjectJson.


        :param order_date: The order_date of this OrderObjectJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and order_date is None:
            raise ValueError("Invalid value for `order_date`, must not be `None`")  # noqa: E501

        self._order_date = order_date

    @property
    def status(self):
        """Gets the status of this OrderObjectJson.  # noqa: E501


        :return: The status of this OrderObjectJson.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderObjectJson.


        :param status: The status of this OrderObjectJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def shipping_code(self):
        """Gets the shipping_code of this OrderObjectJson.  # noqa: E501


        :return: The shipping_code of this OrderObjectJson.  # noqa: E501
        :rtype: str
        """
        return self._shipping_code

    @shipping_code.setter
    def shipping_code(self, shipping_code):
        """Sets the shipping_code of this OrderObjectJson.


        :param shipping_code: The shipping_code of this OrderObjectJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and shipping_code is None:
            raise ValueError("Invalid value for `shipping_code`, must not be `None`")  # noqa: E501

        self._shipping_code = shipping_code

    @property
    def distribution_channel(self):
        """Gets the distribution_channel of this OrderObjectJson.  # noqa: E501


        :return: The distribution_channel of this OrderObjectJson.  # noqa: E501
        :rtype: str
        """
        return self._distribution_channel

    @distribution_channel.setter
    def distribution_channel(self, distribution_channel):
        """Sets the distribution_channel of this OrderObjectJson.


        :param distribution_channel: The distribution_channel of this OrderObjectJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and distribution_channel is None:
            raise ValueError("Invalid value for `distribution_channel`, must not be `None`")  # noqa: E501

        self._distribution_channel = distribution_channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderObjectJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderObjectJson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderObjectJson):
            return True

        return self.to_dict() != other.to_dict()
