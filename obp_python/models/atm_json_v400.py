# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class AtmJsonV400(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sunday': 'OpeningTimesV300',
        'services': 'list[str]',
        'name': 'str',
        'location': 'LocationJsonV140',
        'tuesday': 'OpeningTimesV300',
        'cash_withdrawal_international_fee': 'str',
        'wednesday': 'OpeningTimesV300',
        'branch_identification': 'str',
        'location_categories': 'list[str]',
        'site_identification': 'str',
        'monday': 'OpeningTimesV300',
        'has_deposit_capability': 'str',
        'balance_inquiry_fee': 'str',
        'site_name': 'str',
        'more_info': 'str',
        'bank_id': 'str',
        'id': 'str',
        'meta': 'MetaJsonV140',
        'supported_languages': 'list[str]',
        'supported_currencies': 'list[str]',
        'accessibility_features': 'list[str]',
        'address': 'AddressJsonV300',
        'cash_withdrawal_national_fee': 'str',
        'friday': 'OpeningTimesV300',
        'notes': 'list[str]',
        'is_accessible': 'str',
        'thursday': 'OpeningTimesV300',
        'saturday': 'OpeningTimesV300',
        'located_at': 'str',
        'minimum_withdrawal': 'str'
    }

    attribute_map = {
        'sunday': 'sunday',
        'services': 'services',
        'name': 'name',
        'location': 'location',
        'tuesday': 'tuesday',
        'cash_withdrawal_international_fee': 'cash_withdrawal_international_fee',
        'wednesday': 'wednesday',
        'branch_identification': 'branch_identification',
        'location_categories': 'location_categories',
        'site_identification': 'site_identification',
        'monday': 'monday',
        'has_deposit_capability': 'has_deposit_capability',
        'balance_inquiry_fee': 'balance_inquiry_fee',
        'site_name': 'site_name',
        'more_info': 'more_info',
        'bank_id': 'bank_id',
        'id': 'id',
        'meta': 'meta',
        'supported_languages': 'supported_languages',
        'supported_currencies': 'supported_currencies',
        'accessibility_features': 'accessibility_features',
        'address': 'address',
        'cash_withdrawal_national_fee': 'cash_withdrawal_national_fee',
        'friday': 'friday',
        'notes': 'notes',
        'is_accessible': 'is_accessible',
        'thursday': 'thursday',
        'saturday': 'saturday',
        'located_at': 'located_at',
        'minimum_withdrawal': 'minimum_withdrawal'
    }

    def __init__(self, sunday=None, services=None, name=None, location=None, tuesday=None, cash_withdrawal_international_fee=None, wednesday=None, branch_identification=None, location_categories=None, site_identification=None, monday=None, has_deposit_capability=None, balance_inquiry_fee=None, site_name=None, more_info=None, bank_id=None, id=None, meta=None, supported_languages=None, supported_currencies=None, accessibility_features=None, address=None, cash_withdrawal_national_fee=None, friday=None, notes=None, is_accessible=None, thursday=None, saturday=None, located_at=None, minimum_withdrawal=None, _configuration=None):  # noqa: E501
        """AtmJsonV400 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sunday = None
        self._services = None
        self._name = None
        self._location = None
        self._tuesday = None
        self._cash_withdrawal_international_fee = None
        self._wednesday = None
        self._branch_identification = None
        self._location_categories = None
        self._site_identification = None
        self._monday = None
        self._has_deposit_capability = None
        self._balance_inquiry_fee = None
        self._site_name = None
        self._more_info = None
        self._bank_id = None
        self._id = None
        self._meta = None
        self._supported_languages = None
        self._supported_currencies = None
        self._accessibility_features = None
        self._address = None
        self._cash_withdrawal_national_fee = None
        self._friday = None
        self._notes = None
        self._is_accessible = None
        self._thursday = None
        self._saturday = None
        self._located_at = None
        self._minimum_withdrawal = None
        self.discriminator = None

        self.sunday = sunday
        self.services = services
        self.name = name
        self.location = location
        self.tuesday = tuesday
        self.cash_withdrawal_international_fee = cash_withdrawal_international_fee
        self.wednesday = wednesday
        self.branch_identification = branch_identification
        self.location_categories = location_categories
        self.site_identification = site_identification
        self.monday = monday
        self.has_deposit_capability = has_deposit_capability
        self.balance_inquiry_fee = balance_inquiry_fee
        self.site_name = site_name
        self.more_info = more_info
        self.bank_id = bank_id
        if id is not None:
            self.id = id
        self.meta = meta
        self.supported_languages = supported_languages
        self.supported_currencies = supported_currencies
        self.accessibility_features = accessibility_features
        self.address = address
        self.cash_withdrawal_national_fee = cash_withdrawal_national_fee
        self.friday = friday
        self.notes = notes
        self.is_accessible = is_accessible
        self.thursday = thursday
        self.saturday = saturday
        self.located_at = located_at
        self.minimum_withdrawal = minimum_withdrawal

    @property
    def sunday(self):
        """Gets the sunday of this AtmJsonV400.  # noqa: E501


        :return: The sunday of this AtmJsonV400.  # noqa: E501
        :rtype: OpeningTimesV300
        """
        return self._sunday

    @sunday.setter
    def sunday(self, sunday):
        """Sets the sunday of this AtmJsonV400.


        :param sunday: The sunday of this AtmJsonV400.  # noqa: E501
        :type: OpeningTimesV300
        """
        if self._configuration.client_side_validation and sunday is None:
            raise ValueError("Invalid value for `sunday`, must not be `None`")  # noqa: E501

        self._sunday = sunday

    @property
    def services(self):
        """Gets the services of this AtmJsonV400.  # noqa: E501


        :return: The services of this AtmJsonV400.  # noqa: E501
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this AtmJsonV400.


        :param services: The services of this AtmJsonV400.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")  # noqa: E501

        self._services = services

    @property
    def name(self):
        """Gets the name of this AtmJsonV400.  # noqa: E501


        :return: The name of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AtmJsonV400.


        :param name: The name of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self):
        """Gets the location of this AtmJsonV400.  # noqa: E501


        :return: The location of this AtmJsonV400.  # noqa: E501
        :rtype: LocationJsonV140
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AtmJsonV400.


        :param location: The location of this AtmJsonV400.  # noqa: E501
        :type: LocationJsonV140
        """
        if self._configuration.client_side_validation and location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def tuesday(self):
        """Gets the tuesday of this AtmJsonV400.  # noqa: E501


        :return: The tuesday of this AtmJsonV400.  # noqa: E501
        :rtype: OpeningTimesV300
        """
        return self._tuesday

    @tuesday.setter
    def tuesday(self, tuesday):
        """Sets the tuesday of this AtmJsonV400.


        :param tuesday: The tuesday of this AtmJsonV400.  # noqa: E501
        :type: OpeningTimesV300
        """
        if self._configuration.client_side_validation and tuesday is None:
            raise ValueError("Invalid value for `tuesday`, must not be `None`")  # noqa: E501

        self._tuesday = tuesday

    @property
    def cash_withdrawal_international_fee(self):
        """Gets the cash_withdrawal_international_fee of this AtmJsonV400.  # noqa: E501


        :return: The cash_withdrawal_international_fee of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._cash_withdrawal_international_fee

    @cash_withdrawal_international_fee.setter
    def cash_withdrawal_international_fee(self, cash_withdrawal_international_fee):
        """Sets the cash_withdrawal_international_fee of this AtmJsonV400.


        :param cash_withdrawal_international_fee: The cash_withdrawal_international_fee of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cash_withdrawal_international_fee is None:
            raise ValueError("Invalid value for `cash_withdrawal_international_fee`, must not be `None`")  # noqa: E501

        self._cash_withdrawal_international_fee = cash_withdrawal_international_fee

    @property
    def wednesday(self):
        """Gets the wednesday of this AtmJsonV400.  # noqa: E501


        :return: The wednesday of this AtmJsonV400.  # noqa: E501
        :rtype: OpeningTimesV300
        """
        return self._wednesday

    @wednesday.setter
    def wednesday(self, wednesday):
        """Sets the wednesday of this AtmJsonV400.


        :param wednesday: The wednesday of this AtmJsonV400.  # noqa: E501
        :type: OpeningTimesV300
        """
        if self._configuration.client_side_validation and wednesday is None:
            raise ValueError("Invalid value for `wednesday`, must not be `None`")  # noqa: E501

        self._wednesday = wednesday

    @property
    def branch_identification(self):
        """Gets the branch_identification of this AtmJsonV400.  # noqa: E501


        :return: The branch_identification of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._branch_identification

    @branch_identification.setter
    def branch_identification(self, branch_identification):
        """Sets the branch_identification of this AtmJsonV400.


        :param branch_identification: The branch_identification of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and branch_identification is None:
            raise ValueError("Invalid value for `branch_identification`, must not be `None`")  # noqa: E501

        self._branch_identification = branch_identification

    @property
    def location_categories(self):
        """Gets the location_categories of this AtmJsonV400.  # noqa: E501


        :return: The location_categories of this AtmJsonV400.  # noqa: E501
        :rtype: list[str]
        """
        return self._location_categories

    @location_categories.setter
    def location_categories(self, location_categories):
        """Sets the location_categories of this AtmJsonV400.


        :param location_categories: The location_categories of this AtmJsonV400.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and location_categories is None:
            raise ValueError("Invalid value for `location_categories`, must not be `None`")  # noqa: E501

        self._location_categories = location_categories

    @property
    def site_identification(self):
        """Gets the site_identification of this AtmJsonV400.  # noqa: E501


        :return: The site_identification of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._site_identification

    @site_identification.setter
    def site_identification(self, site_identification):
        """Sets the site_identification of this AtmJsonV400.


        :param site_identification: The site_identification of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and site_identification is None:
            raise ValueError("Invalid value for `site_identification`, must not be `None`")  # noqa: E501

        self._site_identification = site_identification

    @property
    def monday(self):
        """Gets the monday of this AtmJsonV400.  # noqa: E501


        :return: The monday of this AtmJsonV400.  # noqa: E501
        :rtype: OpeningTimesV300
        """
        return self._monday

    @monday.setter
    def monday(self, monday):
        """Sets the monday of this AtmJsonV400.


        :param monday: The monday of this AtmJsonV400.  # noqa: E501
        :type: OpeningTimesV300
        """
        if self._configuration.client_side_validation and monday is None:
            raise ValueError("Invalid value for `monday`, must not be `None`")  # noqa: E501

        self._monday = monday

    @property
    def has_deposit_capability(self):
        """Gets the has_deposit_capability of this AtmJsonV400.  # noqa: E501


        :return: The has_deposit_capability of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._has_deposit_capability

    @has_deposit_capability.setter
    def has_deposit_capability(self, has_deposit_capability):
        """Sets the has_deposit_capability of this AtmJsonV400.


        :param has_deposit_capability: The has_deposit_capability of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and has_deposit_capability is None:
            raise ValueError("Invalid value for `has_deposit_capability`, must not be `None`")  # noqa: E501

        self._has_deposit_capability = has_deposit_capability

    @property
    def balance_inquiry_fee(self):
        """Gets the balance_inquiry_fee of this AtmJsonV400.  # noqa: E501


        :return: The balance_inquiry_fee of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._balance_inquiry_fee

    @balance_inquiry_fee.setter
    def balance_inquiry_fee(self, balance_inquiry_fee):
        """Sets the balance_inquiry_fee of this AtmJsonV400.


        :param balance_inquiry_fee: The balance_inquiry_fee of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and balance_inquiry_fee is None:
            raise ValueError("Invalid value for `balance_inquiry_fee`, must not be `None`")  # noqa: E501

        self._balance_inquiry_fee = balance_inquiry_fee

    @property
    def site_name(self):
        """Gets the site_name of this AtmJsonV400.  # noqa: E501


        :return: The site_name of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this AtmJsonV400.


        :param site_name: The site_name of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and site_name is None:
            raise ValueError("Invalid value for `site_name`, must not be `None`")  # noqa: E501

        self._site_name = site_name

    @property
    def more_info(self):
        """Gets the more_info of this AtmJsonV400.  # noqa: E501


        :return: The more_info of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this AtmJsonV400.


        :param more_info: The more_info of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and more_info is None:
            raise ValueError("Invalid value for `more_info`, must not be `None`")  # noqa: E501

        self._more_info = more_info

    @property
    def bank_id(self):
        """Gets the bank_id of this AtmJsonV400.  # noqa: E501


        :return: The bank_id of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this AtmJsonV400.


        :param bank_id: The bank_id of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    @property
    def id(self):
        """Gets the id of this AtmJsonV400.  # noqa: E501


        :return: The id of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AtmJsonV400.


        :param id: The id of this AtmJsonV400.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def meta(self):
        """Gets the meta of this AtmJsonV400.  # noqa: E501


        :return: The meta of this AtmJsonV400.  # noqa: E501
        :rtype: MetaJsonV140
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this AtmJsonV400.


        :param meta: The meta of this AtmJsonV400.  # noqa: E501
        :type: MetaJsonV140
        """
        if self._configuration.client_side_validation and meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    @property
    def supported_languages(self):
        """Gets the supported_languages of this AtmJsonV400.  # noqa: E501


        :return: The supported_languages of this AtmJsonV400.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_languages

    @supported_languages.setter
    def supported_languages(self, supported_languages):
        """Sets the supported_languages of this AtmJsonV400.


        :param supported_languages: The supported_languages of this AtmJsonV400.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and supported_languages is None:
            raise ValueError("Invalid value for `supported_languages`, must not be `None`")  # noqa: E501

        self._supported_languages = supported_languages

    @property
    def supported_currencies(self):
        """Gets the supported_currencies of this AtmJsonV400.  # noqa: E501


        :return: The supported_currencies of this AtmJsonV400.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_currencies

    @supported_currencies.setter
    def supported_currencies(self, supported_currencies):
        """Sets the supported_currencies of this AtmJsonV400.


        :param supported_currencies: The supported_currencies of this AtmJsonV400.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and supported_currencies is None:
            raise ValueError("Invalid value for `supported_currencies`, must not be `None`")  # noqa: E501

        self._supported_currencies = supported_currencies

    @property
    def accessibility_features(self):
        """Gets the accessibility_features of this AtmJsonV400.  # noqa: E501


        :return: The accessibility_features of this AtmJsonV400.  # noqa: E501
        :rtype: list[str]
        """
        return self._accessibility_features

    @accessibility_features.setter
    def accessibility_features(self, accessibility_features):
        """Sets the accessibility_features of this AtmJsonV400.


        :param accessibility_features: The accessibility_features of this AtmJsonV400.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and accessibility_features is None:
            raise ValueError("Invalid value for `accessibility_features`, must not be `None`")  # noqa: E501

        self._accessibility_features = accessibility_features

    @property
    def address(self):
        """Gets the address of this AtmJsonV400.  # noqa: E501


        :return: The address of this AtmJsonV400.  # noqa: E501
        :rtype: AddressJsonV300
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AtmJsonV400.


        :param address: The address of this AtmJsonV400.  # noqa: E501
        :type: AddressJsonV300
        """
        if self._configuration.client_side_validation and address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def cash_withdrawal_national_fee(self):
        """Gets the cash_withdrawal_national_fee of this AtmJsonV400.  # noqa: E501


        :return: The cash_withdrawal_national_fee of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._cash_withdrawal_national_fee

    @cash_withdrawal_national_fee.setter
    def cash_withdrawal_national_fee(self, cash_withdrawal_national_fee):
        """Sets the cash_withdrawal_national_fee of this AtmJsonV400.


        :param cash_withdrawal_national_fee: The cash_withdrawal_national_fee of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cash_withdrawal_national_fee is None:
            raise ValueError("Invalid value for `cash_withdrawal_national_fee`, must not be `None`")  # noqa: E501

        self._cash_withdrawal_national_fee = cash_withdrawal_national_fee

    @property
    def friday(self):
        """Gets the friday of this AtmJsonV400.  # noqa: E501


        :return: The friday of this AtmJsonV400.  # noqa: E501
        :rtype: OpeningTimesV300
        """
        return self._friday

    @friday.setter
    def friday(self, friday):
        """Sets the friday of this AtmJsonV400.


        :param friday: The friday of this AtmJsonV400.  # noqa: E501
        :type: OpeningTimesV300
        """
        if self._configuration.client_side_validation and friday is None:
            raise ValueError("Invalid value for `friday`, must not be `None`")  # noqa: E501

        self._friday = friday

    @property
    def notes(self):
        """Gets the notes of this AtmJsonV400.  # noqa: E501


        :return: The notes of this AtmJsonV400.  # noqa: E501
        :rtype: list[str]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AtmJsonV400.


        :param notes: The notes of this AtmJsonV400.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")  # noqa: E501

        self._notes = notes

    @property
    def is_accessible(self):
        """Gets the is_accessible of this AtmJsonV400.  # noqa: E501


        :return: The is_accessible of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._is_accessible

    @is_accessible.setter
    def is_accessible(self, is_accessible):
        """Sets the is_accessible of this AtmJsonV400.


        :param is_accessible: The is_accessible of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and is_accessible is None:
            raise ValueError("Invalid value for `is_accessible`, must not be `None`")  # noqa: E501

        self._is_accessible = is_accessible

    @property
    def thursday(self):
        """Gets the thursday of this AtmJsonV400.  # noqa: E501


        :return: The thursday of this AtmJsonV400.  # noqa: E501
        :rtype: OpeningTimesV300
        """
        return self._thursday

    @thursday.setter
    def thursday(self, thursday):
        """Sets the thursday of this AtmJsonV400.


        :param thursday: The thursday of this AtmJsonV400.  # noqa: E501
        :type: OpeningTimesV300
        """
        if self._configuration.client_side_validation and thursday is None:
            raise ValueError("Invalid value for `thursday`, must not be `None`")  # noqa: E501

        self._thursday = thursday

    @property
    def saturday(self):
        """Gets the saturday of this AtmJsonV400.  # noqa: E501


        :return: The saturday of this AtmJsonV400.  # noqa: E501
        :rtype: OpeningTimesV300
        """
        return self._saturday

    @saturday.setter
    def saturday(self, saturday):
        """Sets the saturday of this AtmJsonV400.


        :param saturday: The saturday of this AtmJsonV400.  # noqa: E501
        :type: OpeningTimesV300
        """
        if self._configuration.client_side_validation and saturday is None:
            raise ValueError("Invalid value for `saturday`, must not be `None`")  # noqa: E501

        self._saturday = saturday

    @property
    def located_at(self):
        """Gets the located_at of this AtmJsonV400.  # noqa: E501


        :return: The located_at of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._located_at

    @located_at.setter
    def located_at(self, located_at):
        """Sets the located_at of this AtmJsonV400.


        :param located_at: The located_at of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and located_at is None:
            raise ValueError("Invalid value for `located_at`, must not be `None`")  # noqa: E501

        self._located_at = located_at

    @property
    def minimum_withdrawal(self):
        """Gets the minimum_withdrawal of this AtmJsonV400.  # noqa: E501


        :return: The minimum_withdrawal of this AtmJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._minimum_withdrawal

    @minimum_withdrawal.setter
    def minimum_withdrawal(self, minimum_withdrawal):
        """Sets the minimum_withdrawal of this AtmJsonV400.


        :param minimum_withdrawal: The minimum_withdrawal of this AtmJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and minimum_withdrawal is None:
            raise ValueError("Invalid value for `minimum_withdrawal`, must not be `None`")  # noqa: E501

        self._minimum_withdrawal = minimum_withdrawal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtmJsonV400, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtmJsonV400):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AtmJsonV400):
            return True

        return self.to_dict() != other.to_dict()
