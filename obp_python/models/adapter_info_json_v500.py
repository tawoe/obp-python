# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class AdapterInfoJsonV500(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'backend_messages': 'list[InboundStatusMessage]',
        'total_duration': 'str',
        'version': 'str',
        '_date': 'str',
        'git_commit': 'str'
    }

    attribute_map = {
        'name': 'name',
        'backend_messages': 'backend_messages',
        'total_duration': 'total_duration',
        'version': 'version',
        '_date': 'date',
        'git_commit': 'git_commit'
    }

    def __init__(self, name=None, backend_messages=None, total_duration=None, version=None, _date=None, git_commit=None, _configuration=None):  # noqa: E501
        """AdapterInfoJsonV500 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._backend_messages = None
        self._total_duration = None
        self._version = None
        self.__date = None
        self._git_commit = None
        self.discriminator = None

        self.name = name
        self.backend_messages = backend_messages
        self.total_duration = total_duration
        self.version = version
        self._date = _date
        self.git_commit = git_commit

    @property
    def name(self):
        """Gets the name of this AdapterInfoJsonV500.  # noqa: E501


        :return: The name of this AdapterInfoJsonV500.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdapterInfoJsonV500.


        :param name: The name of this AdapterInfoJsonV500.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def backend_messages(self):
        """Gets the backend_messages of this AdapterInfoJsonV500.  # noqa: E501


        :return: The backend_messages of this AdapterInfoJsonV500.  # noqa: E501
        :rtype: list[InboundStatusMessage]
        """
        return self._backend_messages

    @backend_messages.setter
    def backend_messages(self, backend_messages):
        """Sets the backend_messages of this AdapterInfoJsonV500.


        :param backend_messages: The backend_messages of this AdapterInfoJsonV500.  # noqa: E501
        :type: list[InboundStatusMessage]
        """
        if self._configuration.client_side_validation and backend_messages is None:
            raise ValueError("Invalid value for `backend_messages`, must not be `None`")  # noqa: E501

        self._backend_messages = backend_messages

    @property
    def total_duration(self):
        """Gets the total_duration of this AdapterInfoJsonV500.  # noqa: E501


        :return: The total_duration of this AdapterInfoJsonV500.  # noqa: E501
        :rtype: str
        """
        return self._total_duration

    @total_duration.setter
    def total_duration(self, total_duration):
        """Sets the total_duration of this AdapterInfoJsonV500.


        :param total_duration: The total_duration of this AdapterInfoJsonV500.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and total_duration is None:
            raise ValueError("Invalid value for `total_duration`, must not be `None`")  # noqa: E501

        self._total_duration = total_duration

    @property
    def version(self):
        """Gets the version of this AdapterInfoJsonV500.  # noqa: E501


        :return: The version of this AdapterInfoJsonV500.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AdapterInfoJsonV500.


        :param version: The version of this AdapterInfoJsonV500.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def _date(self):
        """Gets the _date of this AdapterInfoJsonV500.  # noqa: E501


        :return: The _date of this AdapterInfoJsonV500.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AdapterInfoJsonV500.


        :param _date: The _date of this AdapterInfoJsonV500.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def git_commit(self):
        """Gets the git_commit of this AdapterInfoJsonV500.  # noqa: E501


        :return: The git_commit of this AdapterInfoJsonV500.  # noqa: E501
        :rtype: str
        """
        return self._git_commit

    @git_commit.setter
    def git_commit(self, git_commit):
        """Sets the git_commit of this AdapterInfoJsonV500.


        :param git_commit: The git_commit of this AdapterInfoJsonV500.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and git_commit is None:
            raise ValueError("Invalid value for `git_commit`, must not be `None`")  # noqa: E501

        self._git_commit = git_commit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdapterInfoJsonV500, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdapterInfoJsonV500):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdapterInfoJsonV500):
            return True

        return self.to_dict() != other.to_dict()
