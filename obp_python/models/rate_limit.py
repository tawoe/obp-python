# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class RateLimit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calls_made': 'int',
        'reset_in_seconds': 'int'
    }

    attribute_map = {
        'calls_made': 'calls_made',
        'reset_in_seconds': 'reset_in_seconds'
    }

    def __init__(self, calls_made=None, reset_in_seconds=None, _configuration=None):  # noqa: E501
        """RateLimit - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._calls_made = None
        self._reset_in_seconds = None
        self.discriminator = None

        if calls_made is not None:
            self.calls_made = calls_made
        if reset_in_seconds is not None:
            self.reset_in_seconds = reset_in_seconds

    @property
    def calls_made(self):
        """Gets the calls_made of this RateLimit.  # noqa: E501


        :return: The calls_made of this RateLimit.  # noqa: E501
        :rtype: int
        """
        return self._calls_made

    @calls_made.setter
    def calls_made(self, calls_made):
        """Sets the calls_made of this RateLimit.


        :param calls_made: The calls_made of this RateLimit.  # noqa: E501
        :type: int
        """

        self._calls_made = calls_made

    @property
    def reset_in_seconds(self):
        """Gets the reset_in_seconds of this RateLimit.  # noqa: E501


        :return: The reset_in_seconds of this RateLimit.  # noqa: E501
        :rtype: int
        """
        return self._reset_in_seconds

    @reset_in_seconds.setter
    def reset_in_seconds(self, reset_in_seconds):
        """Sets the reset_in_seconds of this RateLimit.


        :param reset_in_seconds: The reset_in_seconds of this RateLimit.  # noqa: E501
        :type: int
        """

        self._reset_in_seconds = reset_in_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RateLimit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RateLimit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RateLimit):
            return True

        return self.to_dict() != other.to_dict()
