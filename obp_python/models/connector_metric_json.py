# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class ConnectorMetricJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connector_name': 'str',
        'duration': 'int',
        'function_name': 'str',
        'correlation_id': 'str',
        '_date': 'date'
    }

    attribute_map = {
        'connector_name': 'connector_name',
        'duration': 'duration',
        'function_name': 'function_name',
        'correlation_id': 'correlation_id',
        '_date': 'date'
    }

    def __init__(self, connector_name=None, duration=None, function_name=None, correlation_id=None, _date=None, _configuration=None):  # noqa: E501
        """ConnectorMetricJson - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connector_name = None
        self._duration = None
        self._function_name = None
        self._correlation_id = None
        self.__date = None
        self.discriminator = None

        self.connector_name = connector_name
        self.duration = duration
        self.function_name = function_name
        self.correlation_id = correlation_id
        self._date = _date

    @property
    def connector_name(self):
        """Gets the connector_name of this ConnectorMetricJson.  # noqa: E501


        :return: The connector_name of this ConnectorMetricJson.  # noqa: E501
        :rtype: str
        """
        return self._connector_name

    @connector_name.setter
    def connector_name(self, connector_name):
        """Sets the connector_name of this ConnectorMetricJson.


        :param connector_name: The connector_name of this ConnectorMetricJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and connector_name is None:
            raise ValueError("Invalid value for `connector_name`, must not be `None`")  # noqa: E501

        self._connector_name = connector_name

    @property
    def duration(self):
        """Gets the duration of this ConnectorMetricJson.  # noqa: E501


        :return: The duration of this ConnectorMetricJson.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ConnectorMetricJson.


        :param duration: The duration of this ConnectorMetricJson.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def function_name(self):
        """Gets the function_name of this ConnectorMetricJson.  # noqa: E501


        :return: The function_name of this ConnectorMetricJson.  # noqa: E501
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this ConnectorMetricJson.


        :param function_name: The function_name of this ConnectorMetricJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and function_name is None:
            raise ValueError("Invalid value for `function_name`, must not be `None`")  # noqa: E501

        self._function_name = function_name

    @property
    def correlation_id(self):
        """Gets the correlation_id of this ConnectorMetricJson.  # noqa: E501


        :return: The correlation_id of this ConnectorMetricJson.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this ConnectorMetricJson.


        :param correlation_id: The correlation_id of this ConnectorMetricJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")  # noqa: E501

        self._correlation_id = correlation_id

    @property
    def _date(self):
        """Gets the _date of this ConnectorMetricJson.  # noqa: E501


        :return: The _date of this ConnectorMetricJson.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ConnectorMetricJson.


        :param _date: The _date of this ConnectorMetricJson.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectorMetricJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorMetricJson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectorMetricJson):
            return True

        return self.to_dict() != other.to_dict()
