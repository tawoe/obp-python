# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class TransactionType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'short_code': 'str',
        'description': 'str',
        'id': 'TransactionTypeId',
        'charge': 'AmountOfMoney',
        'bank_id': 'BankId',
        'summary': 'str'
    }

    attribute_map = {
        'short_code': 'shortCode',
        'description': 'description',
        'id': 'id',
        'charge': 'charge',
        'bank_id': 'bankId',
        'summary': 'summary'
    }

    def __init__(self, short_code=None, description=None, id=None, charge=None, bank_id=None, summary=None, _configuration=None):  # noqa: E501
        """TransactionType - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._short_code = None
        self._description = None
        self._id = None
        self._charge = None
        self._bank_id = None
        self._summary = None
        self.discriminator = None

        self.short_code = short_code
        self.description = description
        self.id = id
        self.charge = charge
        self.bank_id = bank_id
        self.summary = summary

    @property
    def short_code(self):
        """Gets the short_code of this TransactionType.  # noqa: E501


        :return: The short_code of this TransactionType.  # noqa: E501
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this TransactionType.


        :param short_code: The short_code of this TransactionType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and short_code is None:
            raise ValueError("Invalid value for `short_code`, must not be `None`")  # noqa: E501

        self._short_code = short_code

    @property
    def description(self):
        """Gets the description of this TransactionType.  # noqa: E501


        :return: The description of this TransactionType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransactionType.


        :param description: The description of this TransactionType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this TransactionType.  # noqa: E501


        :return: The id of this TransactionType.  # noqa: E501
        :rtype: TransactionTypeId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionType.


        :param id: The id of this TransactionType.  # noqa: E501
        :type: TransactionTypeId
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def charge(self):
        """Gets the charge of this TransactionType.  # noqa: E501


        :return: The charge of this TransactionType.  # noqa: E501
        :rtype: AmountOfMoney
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this TransactionType.


        :param charge: The charge of this TransactionType.  # noqa: E501
        :type: AmountOfMoney
        """
        if self._configuration.client_side_validation and charge is None:
            raise ValueError("Invalid value for `charge`, must not be `None`")  # noqa: E501

        self._charge = charge

    @property
    def bank_id(self):
        """Gets the bank_id of this TransactionType.  # noqa: E501


        :return: The bank_id of this TransactionType.  # noqa: E501
        :rtype: BankId
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this TransactionType.


        :param bank_id: The bank_id of this TransactionType.  # noqa: E501
        :type: BankId
        """
        if self._configuration.client_side_validation and bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    @property
    def summary(self):
        """Gets the summary of this TransactionType.  # noqa: E501


        :return: The summary of this TransactionType.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this TransactionType.


        :param summary: The summary of this TransactionType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionType):
            return True

        return self.to_dict() != other.to_dict()
