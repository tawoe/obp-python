# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class ConsumerJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'secret': 'str',
        'created_by_user_id': 'str',
        'app_type': 'str',
        'description': 'str',
        'created_by_user': 'ResourceUserJSON',
        'enabled': 'bool',
        'client_certificate': 'str',
        'redirect_url': 'str',
        'key': 'str',
        'developer_email': 'str',
        'consumer_id': 'str',
        'app_name': 'str',
        'created': 'date'
    }

    attribute_map = {
        'secret': 'secret',
        'created_by_user_id': 'created_by_user_id',
        'app_type': 'app_type',
        'description': 'description',
        'created_by_user': 'created_by_user',
        'enabled': 'enabled',
        'client_certificate': 'client_certificate',
        'redirect_url': 'redirect_url',
        'key': 'key',
        'developer_email': 'developer_email',
        'consumer_id': 'consumer_id',
        'app_name': 'app_name',
        'created': 'created'
    }

    def __init__(self, secret=None, created_by_user_id=None, app_type=None, description=None, created_by_user=None, enabled=None, client_certificate=None, redirect_url=None, key=None, developer_email=None, consumer_id=None, app_name=None, created=None, _configuration=None):  # noqa: E501
        """ConsumerJson - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._secret = None
        self._created_by_user_id = None
        self._app_type = None
        self._description = None
        self._created_by_user = None
        self._enabled = None
        self._client_certificate = None
        self._redirect_url = None
        self._key = None
        self._developer_email = None
        self._consumer_id = None
        self._app_name = None
        self._created = None
        self.discriminator = None

        self.secret = secret
        self.created_by_user_id = created_by_user_id
        self.app_type = app_type
        self.description = description
        self.created_by_user = created_by_user
        self.enabled = enabled
        self.client_certificate = client_certificate
        self.redirect_url = redirect_url
        self.key = key
        self.developer_email = developer_email
        self.consumer_id = consumer_id
        self.app_name = app_name
        self.created = created

    @property
    def secret(self):
        """Gets the secret of this ConsumerJson.  # noqa: E501


        :return: The secret of this ConsumerJson.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ConsumerJson.


        :param secret: The secret of this ConsumerJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this ConsumerJson.  # noqa: E501


        :return: The created_by_user_id of this ConsumerJson.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this ConsumerJson.


        :param created_by_user_id: The created_by_user_id of this ConsumerJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and created_by_user_id is None:
            raise ValueError("Invalid value for `created_by_user_id`, must not be `None`")  # noqa: E501

        self._created_by_user_id = created_by_user_id

    @property
    def app_type(self):
        """Gets the app_type of this ConsumerJson.  # noqa: E501


        :return: The app_type of this ConsumerJson.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this ConsumerJson.


        :param app_type: The app_type of this ConsumerJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and app_type is None:
            raise ValueError("Invalid value for `app_type`, must not be `None`")  # noqa: E501

        self._app_type = app_type

    @property
    def description(self):
        """Gets the description of this ConsumerJson.  # noqa: E501


        :return: The description of this ConsumerJson.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConsumerJson.


        :param description: The description of this ConsumerJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def created_by_user(self):
        """Gets the created_by_user of this ConsumerJson.  # noqa: E501


        :return: The created_by_user of this ConsumerJson.  # noqa: E501
        :rtype: ResourceUserJSON
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this ConsumerJson.


        :param created_by_user: The created_by_user of this ConsumerJson.  # noqa: E501
        :type: ResourceUserJSON
        """
        if self._configuration.client_side_validation and created_by_user is None:
            raise ValueError("Invalid value for `created_by_user`, must not be `None`")  # noqa: E501

        self._created_by_user = created_by_user

    @property
    def enabled(self):
        """Gets the enabled of this ConsumerJson.  # noqa: E501


        :return: The enabled of this ConsumerJson.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConsumerJson.


        :param enabled: The enabled of this ConsumerJson.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def client_certificate(self):
        """Gets the client_certificate of this ConsumerJson.  # noqa: E501


        :return: The client_certificate of this ConsumerJson.  # noqa: E501
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this ConsumerJson.


        :param client_certificate: The client_certificate of this ConsumerJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and client_certificate is None:
            raise ValueError("Invalid value for `client_certificate`, must not be `None`")  # noqa: E501

        self._client_certificate = client_certificate

    @property
    def redirect_url(self):
        """Gets the redirect_url of this ConsumerJson.  # noqa: E501


        :return: The redirect_url of this ConsumerJson.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this ConsumerJson.


        :param redirect_url: The redirect_url of this ConsumerJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and redirect_url is None:
            raise ValueError("Invalid value for `redirect_url`, must not be `None`")  # noqa: E501

        self._redirect_url = redirect_url

    @property
    def key(self):
        """Gets the key of this ConsumerJson.  # noqa: E501


        :return: The key of this ConsumerJson.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ConsumerJson.


        :param key: The key of this ConsumerJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def developer_email(self):
        """Gets the developer_email of this ConsumerJson.  # noqa: E501


        :return: The developer_email of this ConsumerJson.  # noqa: E501
        :rtype: str
        """
        return self._developer_email

    @developer_email.setter
    def developer_email(self, developer_email):
        """Sets the developer_email of this ConsumerJson.


        :param developer_email: The developer_email of this ConsumerJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and developer_email is None:
            raise ValueError("Invalid value for `developer_email`, must not be `None`")  # noqa: E501

        self._developer_email = developer_email

    @property
    def consumer_id(self):
        """Gets the consumer_id of this ConsumerJson.  # noqa: E501


        :return: The consumer_id of this ConsumerJson.  # noqa: E501
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this ConsumerJson.


        :param consumer_id: The consumer_id of this ConsumerJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and consumer_id is None:
            raise ValueError("Invalid value for `consumer_id`, must not be `None`")  # noqa: E501

        self._consumer_id = consumer_id

    @property
    def app_name(self):
        """Gets the app_name of this ConsumerJson.  # noqa: E501


        :return: The app_name of this ConsumerJson.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this ConsumerJson.


        :param app_name: The app_name of this ConsumerJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def created(self):
        """Gets the created of this ConsumerJson.  # noqa: E501


        :return: The created of this ConsumerJson.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ConsumerJson.


        :param created: The created of this ConsumerJson.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsumerJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsumerJson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConsumerJson):
            return True

        return self.to_dict() != other.to_dict()
