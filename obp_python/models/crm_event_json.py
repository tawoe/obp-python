# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class CrmEventJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel': 'str',
        'customer_name': 'str',
        'result': 'str',
        'customer_number': 'str',
        'bank_id': 'str',
        'id': 'str',
        'scheduled_date': 'date',
        'category': 'str',
        'detail': 'str',
        'actual_date': 'date'
    }

    attribute_map = {
        'channel': 'channel',
        'customer_name': 'customer_name',
        'result': 'result',
        'customer_number': 'customer_number',
        'bank_id': 'bank_id',
        'id': 'id',
        'scheduled_date': 'scheduled_date',
        'category': 'category',
        'detail': 'detail',
        'actual_date': 'actual_date'
    }

    def __init__(self, channel=None, customer_name=None, result=None, customer_number=None, bank_id=None, id=None, scheduled_date=None, category=None, detail=None, actual_date=None, _configuration=None):  # noqa: E501
        """CrmEventJson - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._channel = None
        self._customer_name = None
        self._result = None
        self._customer_number = None
        self._bank_id = None
        self._id = None
        self._scheduled_date = None
        self._category = None
        self._detail = None
        self._actual_date = None
        self.discriminator = None

        self.channel = channel
        self.customer_name = customer_name
        self.result = result
        self.customer_number = customer_number
        self.bank_id = bank_id
        self.id = id
        self.scheduled_date = scheduled_date
        self.category = category
        self.detail = detail
        self.actual_date = actual_date

    @property
    def channel(self):
        """Gets the channel of this CrmEventJson.  # noqa: E501


        :return: The channel of this CrmEventJson.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this CrmEventJson.


        :param channel: The channel of this CrmEventJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def customer_name(self):
        """Gets the customer_name of this CrmEventJson.  # noqa: E501


        :return: The customer_name of this CrmEventJson.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this CrmEventJson.


        :param customer_name: The customer_name of this CrmEventJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and customer_name is None:
            raise ValueError("Invalid value for `customer_name`, must not be `None`")  # noqa: E501

        self._customer_name = customer_name

    @property
    def result(self):
        """Gets the result of this CrmEventJson.  # noqa: E501


        :return: The result of this CrmEventJson.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CrmEventJson.


        :param result: The result of this CrmEventJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def customer_number(self):
        """Gets the customer_number of this CrmEventJson.  # noqa: E501


        :return: The customer_number of this CrmEventJson.  # noqa: E501
        :rtype: str
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this CrmEventJson.


        :param customer_number: The customer_number of this CrmEventJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and customer_number is None:
            raise ValueError("Invalid value for `customer_number`, must not be `None`")  # noqa: E501

        self._customer_number = customer_number

    @property
    def bank_id(self):
        """Gets the bank_id of this CrmEventJson.  # noqa: E501


        :return: The bank_id of this CrmEventJson.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this CrmEventJson.


        :param bank_id: The bank_id of this CrmEventJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    @property
    def id(self):
        """Gets the id of this CrmEventJson.  # noqa: E501


        :return: The id of this CrmEventJson.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CrmEventJson.


        :param id: The id of this CrmEventJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this CrmEventJson.  # noqa: E501


        :return: The scheduled_date of this CrmEventJson.  # noqa: E501
        :rtype: date
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this CrmEventJson.


        :param scheduled_date: The scheduled_date of this CrmEventJson.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and scheduled_date is None:
            raise ValueError("Invalid value for `scheduled_date`, must not be `None`")  # noqa: E501

        self._scheduled_date = scheduled_date

    @property
    def category(self):
        """Gets the category of this CrmEventJson.  # noqa: E501


        :return: The category of this CrmEventJson.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CrmEventJson.


        :param category: The category of this CrmEventJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def detail(self):
        """Gets the detail of this CrmEventJson.  # noqa: E501


        :return: The detail of this CrmEventJson.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this CrmEventJson.


        :param detail: The detail of this CrmEventJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")  # noqa: E501

        self._detail = detail

    @property
    def actual_date(self):
        """Gets the actual_date of this CrmEventJson.  # noqa: E501


        :return: The actual_date of this CrmEventJson.  # noqa: E501
        :rtype: date
        """
        return self._actual_date

    @actual_date.setter
    def actual_date(self, actual_date):
        """Sets the actual_date of this CrmEventJson.


        :param actual_date: The actual_date of this CrmEventJson.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and actual_date is None:
            raise ValueError("Invalid value for `actual_date`, must not be `None`")  # noqa: E501

        self._actual_date = actual_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrmEventJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrmEventJson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CrmEventJson):
            return True

        return self.to_dict() != other.to_dict()
