# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class SandboxDataImport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crm_events': 'list[SandboxCrmEventImport]',
        'users': 'list[SandboxUserImport]',
        'products': 'list[SandboxProductImport]',
        'banks': 'list[SandboxBankImport]',
        'branches': 'list[SandboxBranchImport]',
        'transactions': 'list[SandboxTransactionImport]',
        'accounts': 'list[SandboxAccountImport]',
        'atms': 'list[SandboxAtmImport]'
    }

    attribute_map = {
        'crm_events': 'crm_events',
        'users': 'users',
        'products': 'products',
        'banks': 'banks',
        'branches': 'branches',
        'transactions': 'transactions',
        'accounts': 'accounts',
        'atms': 'atms'
    }

    def __init__(self, crm_events=None, users=None, products=None, banks=None, branches=None, transactions=None, accounts=None, atms=None, _configuration=None):  # noqa: E501
        """SandboxDataImport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._crm_events = None
        self._users = None
        self._products = None
        self._banks = None
        self._branches = None
        self._transactions = None
        self._accounts = None
        self._atms = None
        self.discriminator = None

        self.crm_events = crm_events
        self.users = users
        self.products = products
        self.banks = banks
        self.branches = branches
        self.transactions = transactions
        self.accounts = accounts
        self.atms = atms

    @property
    def crm_events(self):
        """Gets the crm_events of this SandboxDataImport.  # noqa: E501


        :return: The crm_events of this SandboxDataImport.  # noqa: E501
        :rtype: list[SandboxCrmEventImport]
        """
        return self._crm_events

    @crm_events.setter
    def crm_events(self, crm_events):
        """Sets the crm_events of this SandboxDataImport.


        :param crm_events: The crm_events of this SandboxDataImport.  # noqa: E501
        :type: list[SandboxCrmEventImport]
        """
        if self._configuration.client_side_validation and crm_events is None:
            raise ValueError("Invalid value for `crm_events`, must not be `None`")  # noqa: E501

        self._crm_events = crm_events

    @property
    def users(self):
        """Gets the users of this SandboxDataImport.  # noqa: E501


        :return: The users of this SandboxDataImport.  # noqa: E501
        :rtype: list[SandboxUserImport]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this SandboxDataImport.


        :param users: The users of this SandboxDataImport.  # noqa: E501
        :type: list[SandboxUserImport]
        """
        if self._configuration.client_side_validation and users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    @property
    def products(self):
        """Gets the products of this SandboxDataImport.  # noqa: E501


        :return: The products of this SandboxDataImport.  # noqa: E501
        :rtype: list[SandboxProductImport]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this SandboxDataImport.


        :param products: The products of this SandboxDataImport.  # noqa: E501
        :type: list[SandboxProductImport]
        """
        if self._configuration.client_side_validation and products is None:
            raise ValueError("Invalid value for `products`, must not be `None`")  # noqa: E501

        self._products = products

    @property
    def banks(self):
        """Gets the banks of this SandboxDataImport.  # noqa: E501


        :return: The banks of this SandboxDataImport.  # noqa: E501
        :rtype: list[SandboxBankImport]
        """
        return self._banks

    @banks.setter
    def banks(self, banks):
        """Sets the banks of this SandboxDataImport.


        :param banks: The banks of this SandboxDataImport.  # noqa: E501
        :type: list[SandboxBankImport]
        """
        if self._configuration.client_side_validation and banks is None:
            raise ValueError("Invalid value for `banks`, must not be `None`")  # noqa: E501

        self._banks = banks

    @property
    def branches(self):
        """Gets the branches of this SandboxDataImport.  # noqa: E501


        :return: The branches of this SandboxDataImport.  # noqa: E501
        :rtype: list[SandboxBranchImport]
        """
        return self._branches

    @branches.setter
    def branches(self, branches):
        """Sets the branches of this SandboxDataImport.


        :param branches: The branches of this SandboxDataImport.  # noqa: E501
        :type: list[SandboxBranchImport]
        """
        if self._configuration.client_side_validation and branches is None:
            raise ValueError("Invalid value for `branches`, must not be `None`")  # noqa: E501

        self._branches = branches

    @property
    def transactions(self):
        """Gets the transactions of this SandboxDataImport.  # noqa: E501


        :return: The transactions of this SandboxDataImport.  # noqa: E501
        :rtype: list[SandboxTransactionImport]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this SandboxDataImport.


        :param transactions: The transactions of this SandboxDataImport.  # noqa: E501
        :type: list[SandboxTransactionImport]
        """
        if self._configuration.client_side_validation and transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions

    @property
    def accounts(self):
        """Gets the accounts of this SandboxDataImport.  # noqa: E501


        :return: The accounts of this SandboxDataImport.  # noqa: E501
        :rtype: list[SandboxAccountImport]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this SandboxDataImport.


        :param accounts: The accounts of this SandboxDataImport.  # noqa: E501
        :type: list[SandboxAccountImport]
        """
        if self._configuration.client_side_validation and accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")  # noqa: E501

        self._accounts = accounts

    @property
    def atms(self):
        """Gets the atms of this SandboxDataImport.  # noqa: E501


        :return: The atms of this SandboxDataImport.  # noqa: E501
        :rtype: list[SandboxAtmImport]
        """
        return self._atms

    @atms.setter
    def atms(self, atms):
        """Sets the atms of this SandboxDataImport.


        :param atms: The atms of this SandboxDataImport.  # noqa: E501
        :type: list[SandboxAtmImport]
        """
        if self._configuration.client_side_validation and atms is None:
            raise ValueError("Invalid value for `atms`, must not be `None`")  # noqa: E501

        self._atms = atms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SandboxDataImport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SandboxDataImport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SandboxDataImport):
            return True

        return self.to_dict() != other.to_dict()
