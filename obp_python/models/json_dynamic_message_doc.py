# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class JsonDynamicMessageDoc(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outbound_avro_schema': 'str',
        'inbound_avro_schema': 'str',
        'adapter_implementation': 'str',
        'dynamic_message_doc_id': 'str',
        'description': 'str',
        'process': 'str',
        'outbound_topic': 'str',
        'method_body': 'str',
        'message_format': 'str',
        'example_outbound_message': 'object',
        'inbound_topic': 'str',
        'example_inbound_message': 'object',
        'bank_id': 'str',
        'programming_lang': 'str'
    }

    attribute_map = {
        'outbound_avro_schema': 'outbound_avro_schema',
        'inbound_avro_schema': 'inbound_avro_schema',
        'adapter_implementation': 'adapter_implementation',
        'dynamic_message_doc_id': 'dynamic_message_doc_id',
        'description': 'description',
        'process': 'process',
        'outbound_topic': 'outbound_topic',
        'method_body': 'method_body',
        'message_format': 'message_format',
        'example_outbound_message': 'example_outbound_message',
        'inbound_topic': 'inbound_topic',
        'example_inbound_message': 'example_inbound_message',
        'bank_id': 'bank_id',
        'programming_lang': 'programming_lang'
    }

    def __init__(self, outbound_avro_schema=None, inbound_avro_schema=None, adapter_implementation=None, dynamic_message_doc_id=None, description=None, process=None, outbound_topic=None, method_body=None, message_format=None, example_outbound_message=None, inbound_topic=None, example_inbound_message=None, bank_id=None, programming_lang=None, _configuration=None):  # noqa: E501
        """JsonDynamicMessageDoc - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._outbound_avro_schema = None
        self._inbound_avro_schema = None
        self._adapter_implementation = None
        self._dynamic_message_doc_id = None
        self._description = None
        self._process = None
        self._outbound_topic = None
        self._method_body = None
        self._message_format = None
        self._example_outbound_message = None
        self._inbound_topic = None
        self._example_inbound_message = None
        self._bank_id = None
        self._programming_lang = None
        self.discriminator = None

        self.outbound_avro_schema = outbound_avro_schema
        self.inbound_avro_schema = inbound_avro_schema
        self.adapter_implementation = adapter_implementation
        if dynamic_message_doc_id is not None:
            self.dynamic_message_doc_id = dynamic_message_doc_id
        self.description = description
        self.process = process
        self.outbound_topic = outbound_topic
        self.method_body = method_body
        self.message_format = message_format
        self.example_outbound_message = example_outbound_message
        self.inbound_topic = inbound_topic
        self.example_inbound_message = example_inbound_message
        if bank_id is not None:
            self.bank_id = bank_id
        self.programming_lang = programming_lang

    @property
    def outbound_avro_schema(self):
        """Gets the outbound_avro_schema of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The outbound_avro_schema of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._outbound_avro_schema

    @outbound_avro_schema.setter
    def outbound_avro_schema(self, outbound_avro_schema):
        """Sets the outbound_avro_schema of this JsonDynamicMessageDoc.


        :param outbound_avro_schema: The outbound_avro_schema of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and outbound_avro_schema is None:
            raise ValueError("Invalid value for `outbound_avro_schema`, must not be `None`")  # noqa: E501

        self._outbound_avro_schema = outbound_avro_schema

    @property
    def inbound_avro_schema(self):
        """Gets the inbound_avro_schema of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The inbound_avro_schema of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._inbound_avro_schema

    @inbound_avro_schema.setter
    def inbound_avro_schema(self, inbound_avro_schema):
        """Sets the inbound_avro_schema of this JsonDynamicMessageDoc.


        :param inbound_avro_schema: The inbound_avro_schema of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and inbound_avro_schema is None:
            raise ValueError("Invalid value for `inbound_avro_schema`, must not be `None`")  # noqa: E501

        self._inbound_avro_schema = inbound_avro_schema

    @property
    def adapter_implementation(self):
        """Gets the adapter_implementation of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The adapter_implementation of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._adapter_implementation

    @adapter_implementation.setter
    def adapter_implementation(self, adapter_implementation):
        """Sets the adapter_implementation of this JsonDynamicMessageDoc.


        :param adapter_implementation: The adapter_implementation of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and adapter_implementation is None:
            raise ValueError("Invalid value for `adapter_implementation`, must not be `None`")  # noqa: E501

        self._adapter_implementation = adapter_implementation

    @property
    def dynamic_message_doc_id(self):
        """Gets the dynamic_message_doc_id of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The dynamic_message_doc_id of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_message_doc_id

    @dynamic_message_doc_id.setter
    def dynamic_message_doc_id(self, dynamic_message_doc_id):
        """Sets the dynamic_message_doc_id of this JsonDynamicMessageDoc.


        :param dynamic_message_doc_id: The dynamic_message_doc_id of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """

        self._dynamic_message_doc_id = dynamic_message_doc_id

    @property
    def description(self):
        """Gets the description of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The description of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JsonDynamicMessageDoc.


        :param description: The description of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def process(self):
        """Gets the process of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The process of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this JsonDynamicMessageDoc.


        :param process: The process of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and process is None:
            raise ValueError("Invalid value for `process`, must not be `None`")  # noqa: E501

        self._process = process

    @property
    def outbound_topic(self):
        """Gets the outbound_topic of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The outbound_topic of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._outbound_topic

    @outbound_topic.setter
    def outbound_topic(self, outbound_topic):
        """Sets the outbound_topic of this JsonDynamicMessageDoc.


        :param outbound_topic: The outbound_topic of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and outbound_topic is None:
            raise ValueError("Invalid value for `outbound_topic`, must not be `None`")  # noqa: E501

        self._outbound_topic = outbound_topic

    @property
    def method_body(self):
        """Gets the method_body of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The method_body of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._method_body

    @method_body.setter
    def method_body(self, method_body):
        """Sets the method_body of this JsonDynamicMessageDoc.


        :param method_body: The method_body of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and method_body is None:
            raise ValueError("Invalid value for `method_body`, must not be `None`")  # noqa: E501

        self._method_body = method_body

    @property
    def message_format(self):
        """Gets the message_format of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The message_format of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._message_format

    @message_format.setter
    def message_format(self, message_format):
        """Sets the message_format of this JsonDynamicMessageDoc.


        :param message_format: The message_format of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and message_format is None:
            raise ValueError("Invalid value for `message_format`, must not be `None`")  # noqa: E501

        self._message_format = message_format

    @property
    def example_outbound_message(self):
        """Gets the example_outbound_message of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The example_outbound_message of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: object
        """
        return self._example_outbound_message

    @example_outbound_message.setter
    def example_outbound_message(self, example_outbound_message):
        """Sets the example_outbound_message of this JsonDynamicMessageDoc.


        :param example_outbound_message: The example_outbound_message of this JsonDynamicMessageDoc.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and example_outbound_message is None:
            raise ValueError("Invalid value for `example_outbound_message`, must not be `None`")  # noqa: E501

        self._example_outbound_message = example_outbound_message

    @property
    def inbound_topic(self):
        """Gets the inbound_topic of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The inbound_topic of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._inbound_topic

    @inbound_topic.setter
    def inbound_topic(self, inbound_topic):
        """Sets the inbound_topic of this JsonDynamicMessageDoc.


        :param inbound_topic: The inbound_topic of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and inbound_topic is None:
            raise ValueError("Invalid value for `inbound_topic`, must not be `None`")  # noqa: E501

        self._inbound_topic = inbound_topic

    @property
    def example_inbound_message(self):
        """Gets the example_inbound_message of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The example_inbound_message of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: object
        """
        return self._example_inbound_message

    @example_inbound_message.setter
    def example_inbound_message(self, example_inbound_message):
        """Sets the example_inbound_message of this JsonDynamicMessageDoc.


        :param example_inbound_message: The example_inbound_message of this JsonDynamicMessageDoc.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and example_inbound_message is None:
            raise ValueError("Invalid value for `example_inbound_message`, must not be `None`")  # noqa: E501

        self._example_inbound_message = example_inbound_message

    @property
    def bank_id(self):
        """Gets the bank_id of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The bank_id of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this JsonDynamicMessageDoc.


        :param bank_id: The bank_id of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """

        self._bank_id = bank_id

    @property
    def programming_lang(self):
        """Gets the programming_lang of this JsonDynamicMessageDoc.  # noqa: E501


        :return: The programming_lang of this JsonDynamicMessageDoc.  # noqa: E501
        :rtype: str
        """
        return self._programming_lang

    @programming_lang.setter
    def programming_lang(self, programming_lang):
        """Sets the programming_lang of this JsonDynamicMessageDoc.


        :param programming_lang: The programming_lang of this JsonDynamicMessageDoc.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and programming_lang is None:
            raise ValueError("Invalid value for `programming_lang`, must not be `None`")  # noqa: E501

        self._programming_lang = programming_lang

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JsonDynamicMessageDoc, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonDynamicMessageDoc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JsonDynamicMessageDoc):
            return True

        return self.to_dict() != other.to_dict()
