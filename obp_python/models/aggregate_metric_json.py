# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class AggregateMetricJSON(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'average_response_time': 'float',
        'minimum_response_time': 'float',
        'maximum_response_time': 'float'
    }

    attribute_map = {
        'count': 'count',
        'average_response_time': 'average_response_time',
        'minimum_response_time': 'minimum_response_time',
        'maximum_response_time': 'maximum_response_time'
    }

    def __init__(self, count=None, average_response_time=None, minimum_response_time=None, maximum_response_time=None, _configuration=None):  # noqa: E501
        """AggregateMetricJSON - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._count = None
        self._average_response_time = None
        self._minimum_response_time = None
        self._maximum_response_time = None
        self.discriminator = None

        self.count = count
        self.average_response_time = average_response_time
        self.minimum_response_time = minimum_response_time
        self.maximum_response_time = maximum_response_time

    @property
    def count(self):
        """Gets the count of this AggregateMetricJSON.  # noqa: E501


        :return: The count of this AggregateMetricJSON.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AggregateMetricJSON.


        :param count: The count of this AggregateMetricJSON.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def average_response_time(self):
        """Gets the average_response_time of this AggregateMetricJSON.  # noqa: E501


        :return: The average_response_time of this AggregateMetricJSON.  # noqa: E501
        :rtype: float
        """
        return self._average_response_time

    @average_response_time.setter
    def average_response_time(self, average_response_time):
        """Sets the average_response_time of this AggregateMetricJSON.


        :param average_response_time: The average_response_time of this AggregateMetricJSON.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and average_response_time is None:
            raise ValueError("Invalid value for `average_response_time`, must not be `None`")  # noqa: E501

        self._average_response_time = average_response_time

    @property
    def minimum_response_time(self):
        """Gets the minimum_response_time of this AggregateMetricJSON.  # noqa: E501


        :return: The minimum_response_time of this AggregateMetricJSON.  # noqa: E501
        :rtype: float
        """
        return self._minimum_response_time

    @minimum_response_time.setter
    def minimum_response_time(self, minimum_response_time):
        """Sets the minimum_response_time of this AggregateMetricJSON.


        :param minimum_response_time: The minimum_response_time of this AggregateMetricJSON.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and minimum_response_time is None:
            raise ValueError("Invalid value for `minimum_response_time`, must not be `None`")  # noqa: E501

        self._minimum_response_time = minimum_response_time

    @property
    def maximum_response_time(self):
        """Gets the maximum_response_time of this AggregateMetricJSON.  # noqa: E501


        :return: The maximum_response_time of this AggregateMetricJSON.  # noqa: E501
        :rtype: float
        """
        return self._maximum_response_time

    @maximum_response_time.setter
    def maximum_response_time(self, maximum_response_time):
        """Sets the maximum_response_time of this AggregateMetricJSON.


        :param maximum_response_time: The maximum_response_time of this AggregateMetricJSON.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and maximum_response_time is None:
            raise ValueError("Invalid value for `maximum_response_time`, must not be `None`")  # noqa: E501

        self._maximum_response_time = maximum_response_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AggregateMetricJSON, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregateMetricJSON):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AggregateMetricJSON):
            return True

        return self.to_dict() != other.to_dict()
