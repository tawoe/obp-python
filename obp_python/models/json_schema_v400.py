# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class JsonSchemaV400(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'properties': 'Properties',
        'additional_properties': 'bool',
        'title': 'str',
        'type': 'str',
        'required': 'list[str]',
        'schema': 'str'
    }

    attribute_map = {
        'description': 'description',
        'properties': 'properties',
        'additional_properties': 'additionalProperties',
        'title': 'title',
        'type': 'type',
        'required': 'required',
        'schema': '$schema'
    }

    def __init__(self, description=None, properties=None, additional_properties=None, title=None, type=None, required=None, schema=None, _configuration=None):  # noqa: E501
        """JsonSchemaV400 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._properties = None
        self._additional_properties = None
        self._title = None
        self._type = None
        self._required = None
        self._schema = None
        self.discriminator = None

        self.description = description
        self.properties = properties
        self.additional_properties = additional_properties
        self.title = title
        self.type = type
        self.required = required
        self.schema = schema

    @property
    def description(self):
        """Gets the description of this JsonSchemaV400.  # noqa: E501


        :return: The description of this JsonSchemaV400.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JsonSchemaV400.


        :param description: The description of this JsonSchemaV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this JsonSchemaV400.  # noqa: E501


        :return: The properties of this JsonSchemaV400.  # noqa: E501
        :rtype: Properties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this JsonSchemaV400.


        :param properties: The properties of this JsonSchemaV400.  # noqa: E501
        :type: Properties
        """
        if self._configuration.client_side_validation and properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def additional_properties(self):
        """Gets the additional_properties of this JsonSchemaV400.  # noqa: E501


        :return: The additional_properties of this JsonSchemaV400.  # noqa: E501
        :rtype: bool
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this JsonSchemaV400.


        :param additional_properties: The additional_properties of this JsonSchemaV400.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and additional_properties is None:
            raise ValueError("Invalid value for `additional_properties`, must not be `None`")  # noqa: E501

        self._additional_properties = additional_properties

    @property
    def title(self):
        """Gets the title of this JsonSchemaV400.  # noqa: E501


        :return: The title of this JsonSchemaV400.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this JsonSchemaV400.


        :param title: The title of this JsonSchemaV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type(self):
        """Gets the type of this JsonSchemaV400.  # noqa: E501


        :return: The type of this JsonSchemaV400.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JsonSchemaV400.


        :param type: The type of this JsonSchemaV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def required(self):
        """Gets the required of this JsonSchemaV400.  # noqa: E501


        :return: The required of this JsonSchemaV400.  # noqa: E501
        :rtype: list[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this JsonSchemaV400.


        :param required: The required of this JsonSchemaV400.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")  # noqa: E501

        self._required = required

    @property
    def schema(self):
        """Gets the schema of this JsonSchemaV400.  # noqa: E501


        :return: The schema of this JsonSchemaV400.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this JsonSchemaV400.


        :param schema: The schema of this JsonSchemaV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JsonSchemaV400, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonSchemaV400):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JsonSchemaV400):
            return True

        return self.to_dict() != other.to_dict()
