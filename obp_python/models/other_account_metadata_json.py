# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class OtherAccountMetadataJSON(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'public_alias': 'str',
        'image_url': 'str',
        'physical_location': 'LocationJSONV121',
        'private_alias': 'str',
        'url': 'str',
        'more_info': 'str',
        'corporate_location': 'LocationJSONV121',
        'open_corporates_url': 'str'
    }

    attribute_map = {
        'public_alias': 'public_alias',
        'image_url': 'image_URL',
        'physical_location': 'physical_location',
        'private_alias': 'private_alias',
        'url': 'URL',
        'more_info': 'more_info',
        'corporate_location': 'corporate_location',
        'open_corporates_url': 'open_corporates_URL'
    }

    def __init__(self, public_alias=None, image_url=None, physical_location=None, private_alias=None, url=None, more_info=None, corporate_location=None, open_corporates_url=None, _configuration=None):  # noqa: E501
        """OtherAccountMetadataJSON - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._public_alias = None
        self._image_url = None
        self._physical_location = None
        self._private_alias = None
        self._url = None
        self._more_info = None
        self._corporate_location = None
        self._open_corporates_url = None
        self.discriminator = None

        self.public_alias = public_alias
        self.image_url = image_url
        self.physical_location = physical_location
        self.private_alias = private_alias
        self.url = url
        self.more_info = more_info
        self.corporate_location = corporate_location
        self.open_corporates_url = open_corporates_url

    @property
    def public_alias(self):
        """Gets the public_alias of this OtherAccountMetadataJSON.  # noqa: E501


        :return: The public_alias of this OtherAccountMetadataJSON.  # noqa: E501
        :rtype: str
        """
        return self._public_alias

    @public_alias.setter
    def public_alias(self, public_alias):
        """Sets the public_alias of this OtherAccountMetadataJSON.


        :param public_alias: The public_alias of this OtherAccountMetadataJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and public_alias is None:
            raise ValueError("Invalid value for `public_alias`, must not be `None`")  # noqa: E501

        self._public_alias = public_alias

    @property
    def image_url(self):
        """Gets the image_url of this OtherAccountMetadataJSON.  # noqa: E501


        :return: The image_url of this OtherAccountMetadataJSON.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this OtherAccountMetadataJSON.


        :param image_url: The image_url of this OtherAccountMetadataJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def physical_location(self):
        """Gets the physical_location of this OtherAccountMetadataJSON.  # noqa: E501


        :return: The physical_location of this OtherAccountMetadataJSON.  # noqa: E501
        :rtype: LocationJSONV121
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """Sets the physical_location of this OtherAccountMetadataJSON.


        :param physical_location: The physical_location of this OtherAccountMetadataJSON.  # noqa: E501
        :type: LocationJSONV121
        """
        if self._configuration.client_side_validation and physical_location is None:
            raise ValueError("Invalid value for `physical_location`, must not be `None`")  # noqa: E501

        self._physical_location = physical_location

    @property
    def private_alias(self):
        """Gets the private_alias of this OtherAccountMetadataJSON.  # noqa: E501


        :return: The private_alias of this OtherAccountMetadataJSON.  # noqa: E501
        :rtype: str
        """
        return self._private_alias

    @private_alias.setter
    def private_alias(self, private_alias):
        """Sets the private_alias of this OtherAccountMetadataJSON.


        :param private_alias: The private_alias of this OtherAccountMetadataJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and private_alias is None:
            raise ValueError("Invalid value for `private_alias`, must not be `None`")  # noqa: E501

        self._private_alias = private_alias

    @property
    def url(self):
        """Gets the url of this OtherAccountMetadataJSON.  # noqa: E501


        :return: The url of this OtherAccountMetadataJSON.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OtherAccountMetadataJSON.


        :param url: The url of this OtherAccountMetadataJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def more_info(self):
        """Gets the more_info of this OtherAccountMetadataJSON.  # noqa: E501


        :return: The more_info of this OtherAccountMetadataJSON.  # noqa: E501
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this OtherAccountMetadataJSON.


        :param more_info: The more_info of this OtherAccountMetadataJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and more_info is None:
            raise ValueError("Invalid value for `more_info`, must not be `None`")  # noqa: E501

        self._more_info = more_info

    @property
    def corporate_location(self):
        """Gets the corporate_location of this OtherAccountMetadataJSON.  # noqa: E501


        :return: The corporate_location of this OtherAccountMetadataJSON.  # noqa: E501
        :rtype: LocationJSONV121
        """
        return self._corporate_location

    @corporate_location.setter
    def corporate_location(self, corporate_location):
        """Sets the corporate_location of this OtherAccountMetadataJSON.


        :param corporate_location: The corporate_location of this OtherAccountMetadataJSON.  # noqa: E501
        :type: LocationJSONV121
        """
        if self._configuration.client_side_validation and corporate_location is None:
            raise ValueError("Invalid value for `corporate_location`, must not be `None`")  # noqa: E501

        self._corporate_location = corporate_location

    @property
    def open_corporates_url(self):
        """Gets the open_corporates_url of this OtherAccountMetadataJSON.  # noqa: E501


        :return: The open_corporates_url of this OtherAccountMetadataJSON.  # noqa: E501
        :rtype: str
        """
        return self._open_corporates_url

    @open_corporates_url.setter
    def open_corporates_url(self, open_corporates_url):
        """Sets the open_corporates_url of this OtherAccountMetadataJSON.


        :param open_corporates_url: The open_corporates_url of this OtherAccountMetadataJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and open_corporates_url is None:
            raise ValueError("Invalid value for `open_corporates_url`, must not be `None`")  # noqa: E501

        self._open_corporates_url = open_corporates_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OtherAccountMetadataJSON, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OtherAccountMetadataJSON):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OtherAccountMetadataJSON):
            return True

        return self.to_dict() != other.to_dict()
