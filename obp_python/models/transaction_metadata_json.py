# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class TransactionMetadataJSON(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'narrative': 'str',
        'tags': 'list[TransactionTagJSON]',
        'where': 'LocationJSONV121',
        'images': 'list[TransactionImageJSON]',
        'comments': 'list[TransactionCommentJSON]'
    }

    attribute_map = {
        'narrative': 'narrative',
        'tags': 'tags',
        'where': 'where',
        'images': 'images',
        'comments': 'comments'
    }

    def __init__(self, narrative=None, tags=None, where=None, images=None, comments=None, _configuration=None):  # noqa: E501
        """TransactionMetadataJSON - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._narrative = None
        self._tags = None
        self._where = None
        self._images = None
        self._comments = None
        self.discriminator = None

        self.narrative = narrative
        self.tags = tags
        self.where = where
        self.images = images
        self.comments = comments

    @property
    def narrative(self):
        """Gets the narrative of this TransactionMetadataJSON.  # noqa: E501


        :return: The narrative of this TransactionMetadataJSON.  # noqa: E501
        :rtype: str
        """
        return self._narrative

    @narrative.setter
    def narrative(self, narrative):
        """Sets the narrative of this TransactionMetadataJSON.


        :param narrative: The narrative of this TransactionMetadataJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and narrative is None:
            raise ValueError("Invalid value for `narrative`, must not be `None`")  # noqa: E501

        self._narrative = narrative

    @property
    def tags(self):
        """Gets the tags of this TransactionMetadataJSON.  # noqa: E501


        :return: The tags of this TransactionMetadataJSON.  # noqa: E501
        :rtype: list[TransactionTagJSON]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TransactionMetadataJSON.


        :param tags: The tags of this TransactionMetadataJSON.  # noqa: E501
        :type: list[TransactionTagJSON]
        """
        if self._configuration.client_side_validation and tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def where(self):
        """Gets the where of this TransactionMetadataJSON.  # noqa: E501


        :return: The where of this TransactionMetadataJSON.  # noqa: E501
        :rtype: LocationJSONV121
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this TransactionMetadataJSON.


        :param where: The where of this TransactionMetadataJSON.  # noqa: E501
        :type: LocationJSONV121
        """
        if self._configuration.client_side_validation and where is None:
            raise ValueError("Invalid value for `where`, must not be `None`")  # noqa: E501

        self._where = where

    @property
    def images(self):
        """Gets the images of this TransactionMetadataJSON.  # noqa: E501


        :return: The images of this TransactionMetadataJSON.  # noqa: E501
        :rtype: list[TransactionImageJSON]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this TransactionMetadataJSON.


        :param images: The images of this TransactionMetadataJSON.  # noqa: E501
        :type: list[TransactionImageJSON]
        """
        if self._configuration.client_side_validation and images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")  # noqa: E501

        self._images = images

    @property
    def comments(self):
        """Gets the comments of this TransactionMetadataJSON.  # noqa: E501


        :return: The comments of this TransactionMetadataJSON.  # noqa: E501
        :rtype: list[TransactionCommentJSON]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TransactionMetadataJSON.


        :param comments: The comments of this TransactionMetadataJSON.  # noqa: E501
        :type: list[TransactionCommentJSON]
        """
        if self._configuration.client_side_validation and comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")  # noqa: E501

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionMetadataJSON, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionMetadataJSON):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionMetadataJSON):
            return True

        return self.to_dict() != other.to_dict()
