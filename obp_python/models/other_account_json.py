# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class OtherAccountJSON(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'str',
        'iban': 'str',
        'swift_bic': 'str',
        'holder': 'AccountHolderJSON',
        'bank': 'MinimalBankJSON',
        'id': 'str',
        'metadata': 'OtherAccountMetadataJSON',
        'kind': 'str'
    }

    attribute_map = {
        'number': 'number',
        'iban': 'IBAN',
        'swift_bic': 'swift_bic',
        'holder': 'holder',
        'bank': 'bank',
        'id': 'id',
        'metadata': 'metadata',
        'kind': 'kind'
    }

    def __init__(self, number=None, iban=None, swift_bic=None, holder=None, bank=None, id=None, metadata=None, kind=None, _configuration=None):  # noqa: E501
        """OtherAccountJSON - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._number = None
        self._iban = None
        self._swift_bic = None
        self._holder = None
        self._bank = None
        self._id = None
        self._metadata = None
        self._kind = None
        self.discriminator = None

        self.number = number
        self.iban = iban
        self.swift_bic = swift_bic
        self.holder = holder
        self.bank = bank
        self.id = id
        self.metadata = metadata
        self.kind = kind

    @property
    def number(self):
        """Gets the number of this OtherAccountJSON.  # noqa: E501


        :return: The number of this OtherAccountJSON.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OtherAccountJSON.


        :param number: The number of this OtherAccountJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def iban(self):
        """Gets the iban of this OtherAccountJSON.  # noqa: E501


        :return: The iban of this OtherAccountJSON.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this OtherAccountJSON.


        :param iban: The iban of this OtherAccountJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")  # noqa: E501

        self._iban = iban

    @property
    def swift_bic(self):
        """Gets the swift_bic of this OtherAccountJSON.  # noqa: E501


        :return: The swift_bic of this OtherAccountJSON.  # noqa: E501
        :rtype: str
        """
        return self._swift_bic

    @swift_bic.setter
    def swift_bic(self, swift_bic):
        """Sets the swift_bic of this OtherAccountJSON.


        :param swift_bic: The swift_bic of this OtherAccountJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and swift_bic is None:
            raise ValueError("Invalid value for `swift_bic`, must not be `None`")  # noqa: E501

        self._swift_bic = swift_bic

    @property
    def holder(self):
        """Gets the holder of this OtherAccountJSON.  # noqa: E501


        :return: The holder of this OtherAccountJSON.  # noqa: E501
        :rtype: AccountHolderJSON
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this OtherAccountJSON.


        :param holder: The holder of this OtherAccountJSON.  # noqa: E501
        :type: AccountHolderJSON
        """
        if self._configuration.client_side_validation and holder is None:
            raise ValueError("Invalid value for `holder`, must not be `None`")  # noqa: E501

        self._holder = holder

    @property
    def bank(self):
        """Gets the bank of this OtherAccountJSON.  # noqa: E501


        :return: The bank of this OtherAccountJSON.  # noqa: E501
        :rtype: MinimalBankJSON
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this OtherAccountJSON.


        :param bank: The bank of this OtherAccountJSON.  # noqa: E501
        :type: MinimalBankJSON
        """
        if self._configuration.client_side_validation and bank is None:
            raise ValueError("Invalid value for `bank`, must not be `None`")  # noqa: E501

        self._bank = bank

    @property
    def id(self):
        """Gets the id of this OtherAccountJSON.  # noqa: E501


        :return: The id of this OtherAccountJSON.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OtherAccountJSON.


        :param id: The id of this OtherAccountJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this OtherAccountJSON.  # noqa: E501


        :return: The metadata of this OtherAccountJSON.  # noqa: E501
        :rtype: OtherAccountMetadataJSON
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OtherAccountJSON.


        :param metadata: The metadata of this OtherAccountJSON.  # noqa: E501
        :type: OtherAccountMetadataJSON
        """
        if self._configuration.client_side_validation and metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def kind(self):
        """Gets the kind of this OtherAccountJSON.  # noqa: E501


        :return: The kind of this OtherAccountJSON.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this OtherAccountJSON.


        :param kind: The kind of this OtherAccountJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OtherAccountJSON, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OtherAccountJSON):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OtherAccountJSON):
            return True

        return self.to_dict() != other.to_dict()
