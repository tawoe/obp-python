# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse2003DynamicEndpoints(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id=None, dynamic_endpoint_id=None, swagger_string=None):
        """
        InlineResponse2003DynamicEndpoints - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_id': 'str',
            'dynamic_endpoint_id': 'str',
            'swagger_string': 'InlineResponse2003SwaggerString'
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'dynamic_endpoint_id': 'dynamic_endpoint_id',
            'swagger_string': 'swagger_string'
        }

        self._user_id = user_id
        self._dynamic_endpoint_id = dynamic_endpoint_id
        self._swagger_string = swagger_string

    @property
    def user_id(self):
        """
        Gets the user_id of this InlineResponse2003DynamicEndpoints.


        :return: The user_id of this InlineResponse2003DynamicEndpoints.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this InlineResponse2003DynamicEndpoints.


        :param user_id: The user_id of this InlineResponse2003DynamicEndpoints.
        :type: str
        """

        self._user_id = user_id

    @property
    def dynamic_endpoint_id(self):
        """
        Gets the dynamic_endpoint_id of this InlineResponse2003DynamicEndpoints.


        :return: The dynamic_endpoint_id of this InlineResponse2003DynamicEndpoints.
        :rtype: str
        """
        return self._dynamic_endpoint_id

    @dynamic_endpoint_id.setter
    def dynamic_endpoint_id(self, dynamic_endpoint_id):
        """
        Sets the dynamic_endpoint_id of this InlineResponse2003DynamicEndpoints.


        :param dynamic_endpoint_id: The dynamic_endpoint_id of this InlineResponse2003DynamicEndpoints.
        :type: str
        """

        self._dynamic_endpoint_id = dynamic_endpoint_id

    @property
    def swagger_string(self):
        """
        Gets the swagger_string of this InlineResponse2003DynamicEndpoints.


        :return: The swagger_string of this InlineResponse2003DynamicEndpoints.
        :rtype: InlineResponse2003SwaggerString
        """
        return self._swagger_string

    @swagger_string.setter
    def swagger_string(self, swagger_string):
        """
        Sets the swagger_string of this InlineResponse2003DynamicEndpoints.


        :param swagger_string: The swagger_string of this InlineResponse2003DynamicEndpoints.
        :type: InlineResponse2003SwaggerString
        """

        self._swagger_string = swagger_string

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
