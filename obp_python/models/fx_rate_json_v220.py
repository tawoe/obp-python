# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class FXRateJsonV220(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inverse_conversion_value': 'float',
        'to_currency_code': 'str',
        'effective_date': 'date',
        'conversion_value': 'float',
        'bank_id': 'str',
        'from_currency_code': 'str'
    }

    attribute_map = {
        'inverse_conversion_value': 'inverse_conversion_value',
        'to_currency_code': 'to_currency_code',
        'effective_date': 'effective_date',
        'conversion_value': 'conversion_value',
        'bank_id': 'bank_id',
        'from_currency_code': 'from_currency_code'
    }

    def __init__(self, inverse_conversion_value=None, to_currency_code=None, effective_date=None, conversion_value=None, bank_id=None, from_currency_code=None, _configuration=None):  # noqa: E501
        """FXRateJsonV220 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._inverse_conversion_value = None
        self._to_currency_code = None
        self._effective_date = None
        self._conversion_value = None
        self._bank_id = None
        self._from_currency_code = None
        self.discriminator = None

        self.inverse_conversion_value = inverse_conversion_value
        self.to_currency_code = to_currency_code
        self.effective_date = effective_date
        self.conversion_value = conversion_value
        self.bank_id = bank_id
        self.from_currency_code = from_currency_code

    @property
    def inverse_conversion_value(self):
        """Gets the inverse_conversion_value of this FXRateJsonV220.  # noqa: E501


        :return: The inverse_conversion_value of this FXRateJsonV220.  # noqa: E501
        :rtype: float
        """
        return self._inverse_conversion_value

    @inverse_conversion_value.setter
    def inverse_conversion_value(self, inverse_conversion_value):
        """Sets the inverse_conversion_value of this FXRateJsonV220.


        :param inverse_conversion_value: The inverse_conversion_value of this FXRateJsonV220.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and inverse_conversion_value is None:
            raise ValueError("Invalid value for `inverse_conversion_value`, must not be `None`")  # noqa: E501

        self._inverse_conversion_value = inverse_conversion_value

    @property
    def to_currency_code(self):
        """Gets the to_currency_code of this FXRateJsonV220.  # noqa: E501


        :return: The to_currency_code of this FXRateJsonV220.  # noqa: E501
        :rtype: str
        """
        return self._to_currency_code

    @to_currency_code.setter
    def to_currency_code(self, to_currency_code):
        """Sets the to_currency_code of this FXRateJsonV220.


        :param to_currency_code: The to_currency_code of this FXRateJsonV220.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and to_currency_code is None:
            raise ValueError("Invalid value for `to_currency_code`, must not be `None`")  # noqa: E501

        self._to_currency_code = to_currency_code

    @property
    def effective_date(self):
        """Gets the effective_date of this FXRateJsonV220.  # noqa: E501


        :return: The effective_date of this FXRateJsonV220.  # noqa: E501
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this FXRateJsonV220.


        :param effective_date: The effective_date of this FXRateJsonV220.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and effective_date is None:
            raise ValueError("Invalid value for `effective_date`, must not be `None`")  # noqa: E501

        self._effective_date = effective_date

    @property
    def conversion_value(self):
        """Gets the conversion_value of this FXRateJsonV220.  # noqa: E501


        :return: The conversion_value of this FXRateJsonV220.  # noqa: E501
        :rtype: float
        """
        return self._conversion_value

    @conversion_value.setter
    def conversion_value(self, conversion_value):
        """Sets the conversion_value of this FXRateJsonV220.


        :param conversion_value: The conversion_value of this FXRateJsonV220.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and conversion_value is None:
            raise ValueError("Invalid value for `conversion_value`, must not be `None`")  # noqa: E501

        self._conversion_value = conversion_value

    @property
    def bank_id(self):
        """Gets the bank_id of this FXRateJsonV220.  # noqa: E501


        :return: The bank_id of this FXRateJsonV220.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this FXRateJsonV220.


        :param bank_id: The bank_id of this FXRateJsonV220.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    @property
    def from_currency_code(self):
        """Gets the from_currency_code of this FXRateJsonV220.  # noqa: E501


        :return: The from_currency_code of this FXRateJsonV220.  # noqa: E501
        :rtype: str
        """
        return self._from_currency_code

    @from_currency_code.setter
    def from_currency_code(self, from_currency_code):
        """Sets the from_currency_code of this FXRateJsonV220.


        :param from_currency_code: The from_currency_code of this FXRateJsonV220.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and from_currency_code is None:
            raise ValueError("Invalid value for `from_currency_code`, must not be `None`")  # noqa: E501

        self._from_currency_code = from_currency_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FXRateJsonV220, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FXRateJsonV220):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FXRateJsonV220):
            return True

        return self.to_dict() != other.to_dict()
