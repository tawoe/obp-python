# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class CreditLimitOrderResponseJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'execution_time': 'str',
        'execution_date': 'str',
        'token': 'str',
        'short_reference': 'str'
    }

    attribute_map = {
        'execution_time': 'execution_time',
        'execution_date': 'execution_date',
        'token': 'token',
        'short_reference': 'short_reference'
    }

    def __init__(self, execution_time=None, execution_date=None, token=None, short_reference=None, _configuration=None):  # noqa: E501
        """CreditLimitOrderResponseJson - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._execution_time = None
        self._execution_date = None
        self._token = None
        self._short_reference = None
        self.discriminator = None

        self.execution_time = execution_time
        self.execution_date = execution_date
        self.token = token
        self.short_reference = short_reference

    @property
    def execution_time(self):
        """Gets the execution_time of this CreditLimitOrderResponseJson.  # noqa: E501


        :return: The execution_time of this CreditLimitOrderResponseJson.  # noqa: E501
        :rtype: str
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """Sets the execution_time of this CreditLimitOrderResponseJson.


        :param execution_time: The execution_time of this CreditLimitOrderResponseJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and execution_time is None:
            raise ValueError("Invalid value for `execution_time`, must not be `None`")  # noqa: E501

        self._execution_time = execution_time

    @property
    def execution_date(self):
        """Gets the execution_date of this CreditLimitOrderResponseJson.  # noqa: E501


        :return: The execution_date of this CreditLimitOrderResponseJson.  # noqa: E501
        :rtype: str
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this CreditLimitOrderResponseJson.


        :param execution_date: The execution_date of this CreditLimitOrderResponseJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and execution_date is None:
            raise ValueError("Invalid value for `execution_date`, must not be `None`")  # noqa: E501

        self._execution_date = execution_date

    @property
    def token(self):
        """Gets the token of this CreditLimitOrderResponseJson.  # noqa: E501


        :return: The token of this CreditLimitOrderResponseJson.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CreditLimitOrderResponseJson.


        :param token: The token of this CreditLimitOrderResponseJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def short_reference(self):
        """Gets the short_reference of this CreditLimitOrderResponseJson.  # noqa: E501


        :return: The short_reference of this CreditLimitOrderResponseJson.  # noqa: E501
        :rtype: str
        """
        return self._short_reference

    @short_reference.setter
    def short_reference(self, short_reference):
        """Sets the short_reference of this CreditLimitOrderResponseJson.


        :param short_reference: The short_reference of this CreditLimitOrderResponseJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and short_reference is None:
            raise ValueError("Invalid value for `short_reference`, must not be `None`")  # noqa: E501

        self._short_reference = short_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditLimitOrderResponseJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditLimitOrderResponseJson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreditLimitOrderResponseJson):
            return True

        return self.to_dict() != other.to_dict()
