# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class KycMediaJSON(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'str',
        'url': 'str',
        'customer_number': 'str',
        'bank_id': 'str',
        'id': 'str',
        '_date': 'date',
        'relates_to_kyc_document_id': 'str',
        'relates_to_kyc_check_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'customer_id': 'customer_id',
        'url': 'url',
        'customer_number': 'customer_number',
        'bank_id': 'bank_id',
        'id': 'id',
        '_date': 'date',
        'relates_to_kyc_document_id': 'relates_to_kyc_document_id',
        'relates_to_kyc_check_id': 'relates_to_kyc_check_id',
        'type': 'type'
    }

    def __init__(self, customer_id=None, url=None, customer_number=None, bank_id=None, id=None, _date=None, relates_to_kyc_document_id=None, relates_to_kyc_check_id=None, type=None, _configuration=None):  # noqa: E501
        """KycMediaJSON - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._customer_id = None
        self._url = None
        self._customer_number = None
        self._bank_id = None
        self._id = None
        self.__date = None
        self._relates_to_kyc_document_id = None
        self._relates_to_kyc_check_id = None
        self._type = None
        self.discriminator = None

        self.customer_id = customer_id
        self.url = url
        self.customer_number = customer_number
        self.bank_id = bank_id
        self.id = id
        self._date = _date
        self.relates_to_kyc_document_id = relates_to_kyc_document_id
        self.relates_to_kyc_check_id = relates_to_kyc_check_id
        self.type = type

    @property
    def customer_id(self):
        """Gets the customer_id of this KycMediaJSON.  # noqa: E501


        :return: The customer_id of this KycMediaJSON.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this KycMediaJSON.


        :param customer_id: The customer_id of this KycMediaJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def url(self):
        """Gets the url of this KycMediaJSON.  # noqa: E501


        :return: The url of this KycMediaJSON.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this KycMediaJSON.


        :param url: The url of this KycMediaJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def customer_number(self):
        """Gets the customer_number of this KycMediaJSON.  # noqa: E501


        :return: The customer_number of this KycMediaJSON.  # noqa: E501
        :rtype: str
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this KycMediaJSON.


        :param customer_number: The customer_number of this KycMediaJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and customer_number is None:
            raise ValueError("Invalid value for `customer_number`, must not be `None`")  # noqa: E501

        self._customer_number = customer_number

    @property
    def bank_id(self):
        """Gets the bank_id of this KycMediaJSON.  # noqa: E501


        :return: The bank_id of this KycMediaJSON.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this KycMediaJSON.


        :param bank_id: The bank_id of this KycMediaJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    @property
    def id(self):
        """Gets the id of this KycMediaJSON.  # noqa: E501


        :return: The id of this KycMediaJSON.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KycMediaJSON.


        :param id: The id of this KycMediaJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _date(self):
        """Gets the _date of this KycMediaJSON.  # noqa: E501


        :return: The _date of this KycMediaJSON.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this KycMediaJSON.


        :param _date: The _date of this KycMediaJSON.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def relates_to_kyc_document_id(self):
        """Gets the relates_to_kyc_document_id of this KycMediaJSON.  # noqa: E501


        :return: The relates_to_kyc_document_id of this KycMediaJSON.  # noqa: E501
        :rtype: str
        """
        return self._relates_to_kyc_document_id

    @relates_to_kyc_document_id.setter
    def relates_to_kyc_document_id(self, relates_to_kyc_document_id):
        """Sets the relates_to_kyc_document_id of this KycMediaJSON.


        :param relates_to_kyc_document_id: The relates_to_kyc_document_id of this KycMediaJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and relates_to_kyc_document_id is None:
            raise ValueError("Invalid value for `relates_to_kyc_document_id`, must not be `None`")  # noqa: E501

        self._relates_to_kyc_document_id = relates_to_kyc_document_id

    @property
    def relates_to_kyc_check_id(self):
        """Gets the relates_to_kyc_check_id of this KycMediaJSON.  # noqa: E501


        :return: The relates_to_kyc_check_id of this KycMediaJSON.  # noqa: E501
        :rtype: str
        """
        return self._relates_to_kyc_check_id

    @relates_to_kyc_check_id.setter
    def relates_to_kyc_check_id(self, relates_to_kyc_check_id):
        """Sets the relates_to_kyc_check_id of this KycMediaJSON.


        :param relates_to_kyc_check_id: The relates_to_kyc_check_id of this KycMediaJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and relates_to_kyc_check_id is None:
            raise ValueError("Invalid value for `relates_to_kyc_check_id`, must not be `None`")  # noqa: E501

        self._relates_to_kyc_check_id = relates_to_kyc_check_id

    @property
    def type(self):
        """Gets the type of this KycMediaJSON.  # noqa: E501


        :return: The type of this KycMediaJSON.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this KycMediaJSON.


        :param type: The type of this KycMediaJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KycMediaJSON, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KycMediaJSON):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KycMediaJSON):
            return True

        return self.to_dict() != other.to_dict()
