# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class ResourceDocJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_response_bodies': 'list[str]',
        'request_verb': 'str',
        'request_url': 'str',
        'description': 'str',
        'tags': 'list[str]',
        'success_response_body': 'EmptyClassJson',
        'created_by_bank_id': 'str',
        'connector_methods': 'list[str]',
        'example_request_body': 'EmptyClassJson',
        'typed_success_response_body': 'ResourceDocJsonTypedSuccessResponseBody',
        'special_instructions': 'str',
        'is_featured': 'bool',
        'roles': 'list[ApiRole]',
        'operation_id': 'str',
        'implemented_by': 'ImplementedByJson',
        'specified_url': 'str',
        'description_markdown': 'str',
        'typed_request_body': 'ResourceDocJsonTypedSuccessResponseBody',
        'summary': 'str'
    }

    attribute_map = {
        'error_response_bodies': 'error_response_bodies',
        'request_verb': 'request_verb',
        'request_url': 'request_url',
        'description': 'description',
        'tags': 'tags',
        'success_response_body': 'success_response_body',
        'created_by_bank_id': 'created_by_bank_id',
        'connector_methods': 'connector_methods',
        'example_request_body': 'example_request_body',
        'typed_success_response_body': 'typed_success_response_body',
        'special_instructions': 'special_instructions',
        'is_featured': 'is_featured',
        'roles': 'roles',
        'operation_id': 'operation_id',
        'implemented_by': 'implemented_by',
        'specified_url': 'specified_url',
        'description_markdown': 'description_markdown',
        'typed_request_body': 'typed_request_body',
        'summary': 'summary'
    }

    def __init__(self, error_response_bodies=None, request_verb=None, request_url=None, description=None, tags=None, success_response_body=None, created_by_bank_id=None, connector_methods=None, example_request_body=None, typed_success_response_body=None, special_instructions=None, is_featured=None, roles=None, operation_id=None, implemented_by=None, specified_url=None, description_markdown=None, typed_request_body=None, summary=None, _configuration=None):  # noqa: E501
        """ResourceDocJson - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._error_response_bodies = None
        self._request_verb = None
        self._request_url = None
        self._description = None
        self._tags = None
        self._success_response_body = None
        self._created_by_bank_id = None
        self._connector_methods = None
        self._example_request_body = None
        self._typed_success_response_body = None
        self._special_instructions = None
        self._is_featured = None
        self._roles = None
        self._operation_id = None
        self._implemented_by = None
        self._specified_url = None
        self._description_markdown = None
        self._typed_request_body = None
        self._summary = None
        self.discriminator = None

        self.error_response_bodies = error_response_bodies
        self.request_verb = request_verb
        self.request_url = request_url
        self.description = description
        self.tags = tags
        self.success_response_body = success_response_body
        if created_by_bank_id is not None:
            self.created_by_bank_id = created_by_bank_id
        self.connector_methods = connector_methods
        self.example_request_body = example_request_body
        self.typed_success_response_body = typed_success_response_body
        self.special_instructions = special_instructions
        self.is_featured = is_featured
        if roles is not None:
            self.roles = roles
        self.operation_id = operation_id
        self.implemented_by = implemented_by
        self.specified_url = specified_url
        self.description_markdown = description_markdown
        self.typed_request_body = typed_request_body
        self.summary = summary

    @property
    def error_response_bodies(self):
        """Gets the error_response_bodies of this ResourceDocJson.  # noqa: E501


        :return: The error_response_bodies of this ResourceDocJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._error_response_bodies

    @error_response_bodies.setter
    def error_response_bodies(self, error_response_bodies):
        """Sets the error_response_bodies of this ResourceDocJson.


        :param error_response_bodies: The error_response_bodies of this ResourceDocJson.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and error_response_bodies is None:
            raise ValueError("Invalid value for `error_response_bodies`, must not be `None`")  # noqa: E501

        self._error_response_bodies = error_response_bodies

    @property
    def request_verb(self):
        """Gets the request_verb of this ResourceDocJson.  # noqa: E501


        :return: The request_verb of this ResourceDocJson.  # noqa: E501
        :rtype: str
        """
        return self._request_verb

    @request_verb.setter
    def request_verb(self, request_verb):
        """Sets the request_verb of this ResourceDocJson.


        :param request_verb: The request_verb of this ResourceDocJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and request_verb is None:
            raise ValueError("Invalid value for `request_verb`, must not be `None`")  # noqa: E501

        self._request_verb = request_verb

    @property
    def request_url(self):
        """Gets the request_url of this ResourceDocJson.  # noqa: E501


        :return: The request_url of this ResourceDocJson.  # noqa: E501
        :rtype: str
        """
        return self._request_url

    @request_url.setter
    def request_url(self, request_url):
        """Sets the request_url of this ResourceDocJson.


        :param request_url: The request_url of this ResourceDocJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and request_url is None:
            raise ValueError("Invalid value for `request_url`, must not be `None`")  # noqa: E501

        self._request_url = request_url

    @property
    def description(self):
        """Gets the description of this ResourceDocJson.  # noqa: E501


        :return: The description of this ResourceDocJson.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResourceDocJson.


        :param description: The description of this ResourceDocJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this ResourceDocJson.  # noqa: E501


        :return: The tags of this ResourceDocJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ResourceDocJson.


        :param tags: The tags of this ResourceDocJson.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def success_response_body(self):
        """Gets the success_response_body of this ResourceDocJson.  # noqa: E501


        :return: The success_response_body of this ResourceDocJson.  # noqa: E501
        :rtype: EmptyClassJson
        """
        return self._success_response_body

    @success_response_body.setter
    def success_response_body(self, success_response_body):
        """Sets the success_response_body of this ResourceDocJson.


        :param success_response_body: The success_response_body of this ResourceDocJson.  # noqa: E501
        :type: EmptyClassJson
        """
        if self._configuration.client_side_validation and success_response_body is None:
            raise ValueError("Invalid value for `success_response_body`, must not be `None`")  # noqa: E501

        self._success_response_body = success_response_body

    @property
    def created_by_bank_id(self):
        """Gets the created_by_bank_id of this ResourceDocJson.  # noqa: E501


        :return: The created_by_bank_id of this ResourceDocJson.  # noqa: E501
        :rtype: str
        """
        return self._created_by_bank_id

    @created_by_bank_id.setter
    def created_by_bank_id(self, created_by_bank_id):
        """Sets the created_by_bank_id of this ResourceDocJson.


        :param created_by_bank_id: The created_by_bank_id of this ResourceDocJson.  # noqa: E501
        :type: str
        """

        self._created_by_bank_id = created_by_bank_id

    @property
    def connector_methods(self):
        """Gets the connector_methods of this ResourceDocJson.  # noqa: E501


        :return: The connector_methods of this ResourceDocJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._connector_methods

    @connector_methods.setter
    def connector_methods(self, connector_methods):
        """Sets the connector_methods of this ResourceDocJson.


        :param connector_methods: The connector_methods of this ResourceDocJson.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and connector_methods is None:
            raise ValueError("Invalid value for `connector_methods`, must not be `None`")  # noqa: E501

        self._connector_methods = connector_methods

    @property
    def example_request_body(self):
        """Gets the example_request_body of this ResourceDocJson.  # noqa: E501


        :return: The example_request_body of this ResourceDocJson.  # noqa: E501
        :rtype: EmptyClassJson
        """
        return self._example_request_body

    @example_request_body.setter
    def example_request_body(self, example_request_body):
        """Sets the example_request_body of this ResourceDocJson.


        :param example_request_body: The example_request_body of this ResourceDocJson.  # noqa: E501
        :type: EmptyClassJson
        """
        if self._configuration.client_side_validation and example_request_body is None:
            raise ValueError("Invalid value for `example_request_body`, must not be `None`")  # noqa: E501

        self._example_request_body = example_request_body

    @property
    def typed_success_response_body(self):
        """Gets the typed_success_response_body of this ResourceDocJson.  # noqa: E501


        :return: The typed_success_response_body of this ResourceDocJson.  # noqa: E501
        :rtype: ResourceDocJsonTypedSuccessResponseBody
        """
        return self._typed_success_response_body

    @typed_success_response_body.setter
    def typed_success_response_body(self, typed_success_response_body):
        """Sets the typed_success_response_body of this ResourceDocJson.


        :param typed_success_response_body: The typed_success_response_body of this ResourceDocJson.  # noqa: E501
        :type: ResourceDocJsonTypedSuccessResponseBody
        """
        if self._configuration.client_side_validation and typed_success_response_body is None:
            raise ValueError("Invalid value for `typed_success_response_body`, must not be `None`")  # noqa: E501

        self._typed_success_response_body = typed_success_response_body

    @property
    def special_instructions(self):
        """Gets the special_instructions of this ResourceDocJson.  # noqa: E501


        :return: The special_instructions of this ResourceDocJson.  # noqa: E501
        :rtype: str
        """
        return self._special_instructions

    @special_instructions.setter
    def special_instructions(self, special_instructions):
        """Sets the special_instructions of this ResourceDocJson.


        :param special_instructions: The special_instructions of this ResourceDocJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and special_instructions is None:
            raise ValueError("Invalid value for `special_instructions`, must not be `None`")  # noqa: E501

        self._special_instructions = special_instructions

    @property
    def is_featured(self):
        """Gets the is_featured of this ResourceDocJson.  # noqa: E501


        :return: The is_featured of this ResourceDocJson.  # noqa: E501
        :rtype: bool
        """
        return self._is_featured

    @is_featured.setter
    def is_featured(self, is_featured):
        """Sets the is_featured of this ResourceDocJson.


        :param is_featured: The is_featured of this ResourceDocJson.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_featured is None:
            raise ValueError("Invalid value for `is_featured`, must not be `None`")  # noqa: E501

        self._is_featured = is_featured

    @property
    def roles(self):
        """Gets the roles of this ResourceDocJson.  # noqa: E501


        :return: The roles of this ResourceDocJson.  # noqa: E501
        :rtype: list[ApiRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ResourceDocJson.


        :param roles: The roles of this ResourceDocJson.  # noqa: E501
        :type: list[ApiRole]
        """

        self._roles = roles

    @property
    def operation_id(self):
        """Gets the operation_id of this ResourceDocJson.  # noqa: E501


        :return: The operation_id of this ResourceDocJson.  # noqa: E501
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this ResourceDocJson.


        :param operation_id: The operation_id of this ResourceDocJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and operation_id is None:
            raise ValueError("Invalid value for `operation_id`, must not be `None`")  # noqa: E501

        self._operation_id = operation_id

    @property
    def implemented_by(self):
        """Gets the implemented_by of this ResourceDocJson.  # noqa: E501


        :return: The implemented_by of this ResourceDocJson.  # noqa: E501
        :rtype: ImplementedByJson
        """
        return self._implemented_by

    @implemented_by.setter
    def implemented_by(self, implemented_by):
        """Sets the implemented_by of this ResourceDocJson.


        :param implemented_by: The implemented_by of this ResourceDocJson.  # noqa: E501
        :type: ImplementedByJson
        """
        if self._configuration.client_side_validation and implemented_by is None:
            raise ValueError("Invalid value for `implemented_by`, must not be `None`")  # noqa: E501

        self._implemented_by = implemented_by

    @property
    def specified_url(self):
        """Gets the specified_url of this ResourceDocJson.  # noqa: E501


        :return: The specified_url of this ResourceDocJson.  # noqa: E501
        :rtype: str
        """
        return self._specified_url

    @specified_url.setter
    def specified_url(self, specified_url):
        """Sets the specified_url of this ResourceDocJson.


        :param specified_url: The specified_url of this ResourceDocJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and specified_url is None:
            raise ValueError("Invalid value for `specified_url`, must not be `None`")  # noqa: E501

        self._specified_url = specified_url

    @property
    def description_markdown(self):
        """Gets the description_markdown of this ResourceDocJson.  # noqa: E501


        :return: The description_markdown of this ResourceDocJson.  # noqa: E501
        :rtype: str
        """
        return self._description_markdown

    @description_markdown.setter
    def description_markdown(self, description_markdown):
        """Sets the description_markdown of this ResourceDocJson.


        :param description_markdown: The description_markdown of this ResourceDocJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description_markdown is None:
            raise ValueError("Invalid value for `description_markdown`, must not be `None`")  # noqa: E501

        self._description_markdown = description_markdown

    @property
    def typed_request_body(self):
        """Gets the typed_request_body of this ResourceDocJson.  # noqa: E501


        :return: The typed_request_body of this ResourceDocJson.  # noqa: E501
        :rtype: ResourceDocJsonTypedSuccessResponseBody
        """
        return self._typed_request_body

    @typed_request_body.setter
    def typed_request_body(self, typed_request_body):
        """Sets the typed_request_body of this ResourceDocJson.


        :param typed_request_body: The typed_request_body of this ResourceDocJson.  # noqa: E501
        :type: ResourceDocJsonTypedSuccessResponseBody
        """
        if self._configuration.client_side_validation and typed_request_body is None:
            raise ValueError("Invalid value for `typed_request_body`, must not be `None`")  # noqa: E501

        self._typed_request_body = typed_request_body

    @property
    def summary(self):
        """Gets the summary of this ResourceDocJson.  # noqa: E501


        :return: The summary of this ResourceDocJson.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ResourceDocJson.


        :param summary: The summary of this ResourceDocJson.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceDocJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceDocJson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceDocJson):
            return True

        return self.to_dict() != other.to_dict()
