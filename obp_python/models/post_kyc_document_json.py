# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class PostKycDocumentJSON(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'str',
        'customer_number': 'str',
        'issue_date': 'date',
        'type': 'str',
        'issue_place': 'str',
        'expiry_date': 'date'
    }

    attribute_map = {
        'number': 'number',
        'customer_number': 'customer_number',
        'issue_date': 'issue_date',
        'type': 'type',
        'issue_place': 'issue_place',
        'expiry_date': 'expiry_date'
    }

    def __init__(self, number=None, customer_number=None, issue_date=None, type=None, issue_place=None, expiry_date=None, _configuration=None):  # noqa: E501
        """PostKycDocumentJSON - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._number = None
        self._customer_number = None
        self._issue_date = None
        self._type = None
        self._issue_place = None
        self._expiry_date = None
        self.discriminator = None

        self.number = number
        self.customer_number = customer_number
        self.issue_date = issue_date
        self.type = type
        self.issue_place = issue_place
        self.expiry_date = expiry_date

    @property
    def number(self):
        """Gets the number of this PostKycDocumentJSON.  # noqa: E501


        :return: The number of this PostKycDocumentJSON.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PostKycDocumentJSON.


        :param number: The number of this PostKycDocumentJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def customer_number(self):
        """Gets the customer_number of this PostKycDocumentJSON.  # noqa: E501


        :return: The customer_number of this PostKycDocumentJSON.  # noqa: E501
        :rtype: str
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this PostKycDocumentJSON.


        :param customer_number: The customer_number of this PostKycDocumentJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and customer_number is None:
            raise ValueError("Invalid value for `customer_number`, must not be `None`")  # noqa: E501

        self._customer_number = customer_number

    @property
    def issue_date(self):
        """Gets the issue_date of this PostKycDocumentJSON.  # noqa: E501


        :return: The issue_date of this PostKycDocumentJSON.  # noqa: E501
        :rtype: date
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this PostKycDocumentJSON.


        :param issue_date: The issue_date of this PostKycDocumentJSON.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")  # noqa: E501

        self._issue_date = issue_date

    @property
    def type(self):
        """Gets the type of this PostKycDocumentJSON.  # noqa: E501


        :return: The type of this PostKycDocumentJSON.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostKycDocumentJSON.


        :param type: The type of this PostKycDocumentJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def issue_place(self):
        """Gets the issue_place of this PostKycDocumentJSON.  # noqa: E501


        :return: The issue_place of this PostKycDocumentJSON.  # noqa: E501
        :rtype: str
        """
        return self._issue_place

    @issue_place.setter
    def issue_place(self, issue_place):
        """Sets the issue_place of this PostKycDocumentJSON.


        :param issue_place: The issue_place of this PostKycDocumentJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and issue_place is None:
            raise ValueError("Invalid value for `issue_place`, must not be `None`")  # noqa: E501

        self._issue_place = issue_place

    @property
    def expiry_date(self):
        """Gets the expiry_date of this PostKycDocumentJSON.  # noqa: E501


        :return: The expiry_date of this PostKycDocumentJSON.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this PostKycDocumentJSON.


        :param expiry_date: The expiry_date of this PostKycDocumentJSON.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and expiry_date is None:
            raise ValueError("Invalid value for `expiry_date`, must not be `None`")  # noqa: E501

        self._expiry_date = expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostKycDocumentJSON, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostKycDocumentJSON):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostKycDocumentJSON):
            return True

        return self.to_dict() != other.to_dict()
