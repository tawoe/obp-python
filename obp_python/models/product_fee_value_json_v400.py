# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class ProductFeeValueJsonV400(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'amount': 'str',
        'frequency': 'str',
        'type': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'amount': 'amount',
        'frequency': 'frequency',
        'type': 'type'
    }

    def __init__(self, currency=None, amount=None, frequency=None, type=None, _configuration=None):  # noqa: E501
        """ProductFeeValueJsonV400 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._currency = None
        self._amount = None
        self._frequency = None
        self._type = None
        self.discriminator = None

        self.currency = currency
        self.amount = amount
        self.frequency = frequency
        self.type = type

    @property
    def currency(self):
        """Gets the currency of this ProductFeeValueJsonV400.  # noqa: E501


        :return: The currency of this ProductFeeValueJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProductFeeValueJsonV400.


        :param currency: The currency of this ProductFeeValueJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def amount(self):
        """Gets the amount of this ProductFeeValueJsonV400.  # noqa: E501


        :return: The amount of this ProductFeeValueJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ProductFeeValueJsonV400.


        :param amount: The amount of this ProductFeeValueJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def frequency(self):
        """Gets the frequency of this ProductFeeValueJsonV400.  # noqa: E501


        :return: The frequency of this ProductFeeValueJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ProductFeeValueJsonV400.


        :param frequency: The frequency of this ProductFeeValueJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501

        self._frequency = frequency

    @property
    def type(self):
        """Gets the type of this ProductFeeValueJsonV400.  # noqa: E501


        :return: The type of this ProductFeeValueJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductFeeValueJsonV400.


        :param type: The type of this ProductFeeValueJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductFeeValueJsonV400, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductFeeValueJsonV400):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductFeeValueJsonV400):
            return True

        return self.to_dict() != other.to_dict()
