# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class ConfigurationJSON(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'akka': 'AkkaJSON',
        'elastic_search': 'ElasticSearchJSON',
        'cache': 'list[CachedFunctionJSON]',
        'scopes': 'ScopesJSON'
    }

    attribute_map = {
        'akka': 'akka',
        'elastic_search': 'elastic_search',
        'cache': 'cache',
        'scopes': 'scopes'
    }

    def __init__(self, akka=None, elastic_search=None, cache=None, scopes=None, _configuration=None):  # noqa: E501
        """ConfigurationJSON - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._akka = None
        self._elastic_search = None
        self._cache = None
        self._scopes = None
        self.discriminator = None

        self.akka = akka
        self.elastic_search = elastic_search
        self.cache = cache
        self.scopes = scopes

    @property
    def akka(self):
        """Gets the akka of this ConfigurationJSON.  # noqa: E501


        :return: The akka of this ConfigurationJSON.  # noqa: E501
        :rtype: AkkaJSON
        """
        return self._akka

    @akka.setter
    def akka(self, akka):
        """Sets the akka of this ConfigurationJSON.


        :param akka: The akka of this ConfigurationJSON.  # noqa: E501
        :type: AkkaJSON
        """
        if self._configuration.client_side_validation and akka is None:
            raise ValueError("Invalid value for `akka`, must not be `None`")  # noqa: E501

        self._akka = akka

    @property
    def elastic_search(self):
        """Gets the elastic_search of this ConfigurationJSON.  # noqa: E501


        :return: The elastic_search of this ConfigurationJSON.  # noqa: E501
        :rtype: ElasticSearchJSON
        """
        return self._elastic_search

    @elastic_search.setter
    def elastic_search(self, elastic_search):
        """Sets the elastic_search of this ConfigurationJSON.


        :param elastic_search: The elastic_search of this ConfigurationJSON.  # noqa: E501
        :type: ElasticSearchJSON
        """
        if self._configuration.client_side_validation and elastic_search is None:
            raise ValueError("Invalid value for `elastic_search`, must not be `None`")  # noqa: E501

        self._elastic_search = elastic_search

    @property
    def cache(self):
        """Gets the cache of this ConfigurationJSON.  # noqa: E501


        :return: The cache of this ConfigurationJSON.  # noqa: E501
        :rtype: list[CachedFunctionJSON]
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this ConfigurationJSON.


        :param cache: The cache of this ConfigurationJSON.  # noqa: E501
        :type: list[CachedFunctionJSON]
        """
        if self._configuration.client_side_validation and cache is None:
            raise ValueError("Invalid value for `cache`, must not be `None`")  # noqa: E501

        self._cache = cache

    @property
    def scopes(self):
        """Gets the scopes of this ConfigurationJSON.  # noqa: E501


        :return: The scopes of this ConfigurationJSON.  # noqa: E501
        :rtype: ScopesJSON
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ConfigurationJSON.


        :param scopes: The scopes of this ConfigurationJSON.  # noqa: E501
        :type: ScopesJSON
        """
        if self._configuration.client_side_validation and scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")  # noqa: E501

        self._scopes = scopes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigurationJSON, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationJSON):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigurationJSON):
            return True

        return self.to_dict() != other.to_dict()
