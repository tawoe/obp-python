# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class CachedFunctionJSON(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'function_name': 'str',
        'ttl_in_seconds': 'int'
    }

    attribute_map = {
        'function_name': 'function_name',
        'ttl_in_seconds': 'ttl_in_seconds'
    }

    def __init__(self, function_name=None, ttl_in_seconds=None, _configuration=None):  # noqa: E501
        """CachedFunctionJSON - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._function_name = None
        self._ttl_in_seconds = None
        self.discriminator = None

        self.function_name = function_name
        self.ttl_in_seconds = ttl_in_seconds

    @property
    def function_name(self):
        """Gets the function_name of this CachedFunctionJSON.  # noqa: E501


        :return: The function_name of this CachedFunctionJSON.  # noqa: E501
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this CachedFunctionJSON.


        :param function_name: The function_name of this CachedFunctionJSON.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and function_name is None:
            raise ValueError("Invalid value for `function_name`, must not be `None`")  # noqa: E501

        self._function_name = function_name

    @property
    def ttl_in_seconds(self):
        """Gets the ttl_in_seconds of this CachedFunctionJSON.  # noqa: E501


        :return: The ttl_in_seconds of this CachedFunctionJSON.  # noqa: E501
        :rtype: int
        """
        return self._ttl_in_seconds

    @ttl_in_seconds.setter
    def ttl_in_seconds(self, ttl_in_seconds):
        """Sets the ttl_in_seconds of this CachedFunctionJSON.


        :param ttl_in_seconds: The ttl_in_seconds of this CachedFunctionJSON.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ttl_in_seconds is None:
            raise ValueError("Invalid value for `ttl_in_seconds`, must not be `None`")  # noqa: E501

        self._ttl_in_seconds = ttl_in_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CachedFunctionJSON, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CachedFunctionJSON):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CachedFunctionJSON):
            return True

        return self.to_dict() != other.to_dict()
