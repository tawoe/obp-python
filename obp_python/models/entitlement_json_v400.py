# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class EntitlementJsonV400(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entitlement_id': 'str',
        'role_name': 'str',
        'bank_id': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'entitlement_id': 'entitlement_id',
        'role_name': 'role_name',
        'bank_id': 'bank_id',
        'user_id': 'user_id'
    }

    def __init__(self, entitlement_id=None, role_name=None, bank_id=None, user_id=None, _configuration=None):  # noqa: E501
        """EntitlementJsonV400 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._entitlement_id = None
        self._role_name = None
        self._bank_id = None
        self._user_id = None
        self.discriminator = None

        self.entitlement_id = entitlement_id
        self.role_name = role_name
        self.bank_id = bank_id
        self.user_id = user_id

    @property
    def entitlement_id(self):
        """Gets the entitlement_id of this EntitlementJsonV400.  # noqa: E501


        :return: The entitlement_id of this EntitlementJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._entitlement_id

    @entitlement_id.setter
    def entitlement_id(self, entitlement_id):
        """Sets the entitlement_id of this EntitlementJsonV400.


        :param entitlement_id: The entitlement_id of this EntitlementJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and entitlement_id is None:
            raise ValueError("Invalid value for `entitlement_id`, must not be `None`")  # noqa: E501

        self._entitlement_id = entitlement_id

    @property
    def role_name(self):
        """Gets the role_name of this EntitlementJsonV400.  # noqa: E501


        :return: The role_name of this EntitlementJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this EntitlementJsonV400.


        :param role_name: The role_name of this EntitlementJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and role_name is None:
            raise ValueError("Invalid value for `role_name`, must not be `None`")  # noqa: E501

        self._role_name = role_name

    @property
    def bank_id(self):
        """Gets the bank_id of this EntitlementJsonV400.  # noqa: E501


        :return: The bank_id of this EntitlementJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this EntitlementJsonV400.


        :param bank_id: The bank_id of this EntitlementJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    @property
    def user_id(self):
        """Gets the user_id of this EntitlementJsonV400.  # noqa: E501


        :return: The user_id of this EntitlementJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EntitlementJsonV400.


        :param user_id: The user_id of this EntitlementJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntitlementJsonV400, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitlementJsonV400):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntitlementJsonV400):
            return True

        return self.to_dict() != other.to_dict()
