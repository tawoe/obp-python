# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class AttributeDefinitionResponseJsonV400(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_active': 'bool',
        'description': 'str',
        'attribute_definition_id': 'str',
        'alias': 'str',
        'bank_id': 'str',
        'can_be_seen_on_views': 'list[str]',
        'category': 'str',
        'type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'is_active': 'is_active',
        'description': 'description',
        'attribute_definition_id': 'attribute_definition_id',
        'alias': 'alias',
        'bank_id': 'bank_id',
        'can_be_seen_on_views': 'can_be_seen_on_views',
        'category': 'category',
        'type': 'type'
    }

    def __init__(self, name=None, is_active=None, description=None, attribute_definition_id=None, alias=None, bank_id=None, can_be_seen_on_views=None, category=None, type=None, _configuration=None):  # noqa: E501
        """AttributeDefinitionResponseJsonV400 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._is_active = None
        self._description = None
        self._attribute_definition_id = None
        self._alias = None
        self._bank_id = None
        self._can_be_seen_on_views = None
        self._category = None
        self._type = None
        self.discriminator = None

        self.name = name
        self.is_active = is_active
        self.description = description
        self.attribute_definition_id = attribute_definition_id
        self.alias = alias
        self.bank_id = bank_id
        self.can_be_seen_on_views = can_be_seen_on_views
        self.category = category
        self.type = type

    @property
    def name(self):
        """Gets the name of this AttributeDefinitionResponseJsonV400.  # noqa: E501


        :return: The name of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttributeDefinitionResponseJsonV400.


        :param name: The name of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def is_active(self):
        """Gets the is_active of this AttributeDefinitionResponseJsonV400.  # noqa: E501


        :return: The is_active of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AttributeDefinitionResponseJsonV400.


        :param is_active: The is_active of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def description(self):
        """Gets the description of this AttributeDefinitionResponseJsonV400.  # noqa: E501


        :return: The description of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AttributeDefinitionResponseJsonV400.


        :param description: The description of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def attribute_definition_id(self):
        """Gets the attribute_definition_id of this AttributeDefinitionResponseJsonV400.  # noqa: E501


        :return: The attribute_definition_id of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._attribute_definition_id

    @attribute_definition_id.setter
    def attribute_definition_id(self, attribute_definition_id):
        """Sets the attribute_definition_id of this AttributeDefinitionResponseJsonV400.


        :param attribute_definition_id: The attribute_definition_id of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and attribute_definition_id is None:
            raise ValueError("Invalid value for `attribute_definition_id`, must not be `None`")  # noqa: E501

        self._attribute_definition_id = attribute_definition_id

    @property
    def alias(self):
        """Gets the alias of this AttributeDefinitionResponseJsonV400.  # noqa: E501


        :return: The alias of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this AttributeDefinitionResponseJsonV400.


        :param alias: The alias of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")  # noqa: E501

        self._alias = alias

    @property
    def bank_id(self):
        """Gets the bank_id of this AttributeDefinitionResponseJsonV400.  # noqa: E501


        :return: The bank_id of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this AttributeDefinitionResponseJsonV400.


        :param bank_id: The bank_id of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    @property
    def can_be_seen_on_views(self):
        """Gets the can_be_seen_on_views of this AttributeDefinitionResponseJsonV400.  # noqa: E501


        :return: The can_be_seen_on_views of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :rtype: list[str]
        """
        return self._can_be_seen_on_views

    @can_be_seen_on_views.setter
    def can_be_seen_on_views(self, can_be_seen_on_views):
        """Sets the can_be_seen_on_views of this AttributeDefinitionResponseJsonV400.


        :param can_be_seen_on_views: The can_be_seen_on_views of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and can_be_seen_on_views is None:
            raise ValueError("Invalid value for `can_be_seen_on_views`, must not be `None`")  # noqa: E501

        self._can_be_seen_on_views = can_be_seen_on_views

    @property
    def category(self):
        """Gets the category of this AttributeDefinitionResponseJsonV400.  # noqa: E501


        :return: The category of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AttributeDefinitionResponseJsonV400.


        :param category: The category of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def type(self):
        """Gets the type of this AttributeDefinitionResponseJsonV400.  # noqa: E501


        :return: The type of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AttributeDefinitionResponseJsonV400.


        :param type: The type of this AttributeDefinitionResponseJsonV400.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttributeDefinitionResponseJsonV400, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttributeDefinitionResponseJsonV400):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttributeDefinitionResponseJsonV400):
            return True

        return self.to_dict() != other.to_dict()
