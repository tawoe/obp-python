# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class ConsentJsonV500(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consent_id': 'str',
        'jwt': 'str',
        'status': 'str',
        'consent_request_id': 'str'
    }

    attribute_map = {
        'consent_id': 'consent_id',
        'jwt': 'jwt',
        'status': 'status',
        'consent_request_id': 'consent_request_id'
    }

    def __init__(self, consent_id=None, jwt=None, status=None, consent_request_id=None, _configuration=None):  # noqa: E501
        """ConsentJsonV500 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._consent_id = None
        self._jwt = None
        self._status = None
        self._consent_request_id = None
        self.discriminator = None

        self.consent_id = consent_id
        self.jwt = jwt
        self.status = status
        if consent_request_id is not None:
            self.consent_request_id = consent_request_id

    @property
    def consent_id(self):
        """Gets the consent_id of this ConsentJsonV500.  # noqa: E501


        :return: The consent_id of this ConsentJsonV500.  # noqa: E501
        :rtype: str
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this ConsentJsonV500.


        :param consent_id: The consent_id of this ConsentJsonV500.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and consent_id is None:
            raise ValueError("Invalid value for `consent_id`, must not be `None`")  # noqa: E501

        self._consent_id = consent_id

    @property
    def jwt(self):
        """Gets the jwt of this ConsentJsonV500.  # noqa: E501


        :return: The jwt of this ConsentJsonV500.  # noqa: E501
        :rtype: str
        """
        return self._jwt

    @jwt.setter
    def jwt(self, jwt):
        """Sets the jwt of this ConsentJsonV500.


        :param jwt: The jwt of this ConsentJsonV500.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and jwt is None:
            raise ValueError("Invalid value for `jwt`, must not be `None`")  # noqa: E501

        self._jwt = jwt

    @property
    def status(self):
        """Gets the status of this ConsentJsonV500.  # noqa: E501


        :return: The status of this ConsentJsonV500.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConsentJsonV500.


        :param status: The status of this ConsentJsonV500.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def consent_request_id(self):
        """Gets the consent_request_id of this ConsentJsonV500.  # noqa: E501


        :return: The consent_request_id of this ConsentJsonV500.  # noqa: E501
        :rtype: str
        """
        return self._consent_request_id

    @consent_request_id.setter
    def consent_request_id(self, consent_request_id):
        """Sets the consent_request_id of this ConsentJsonV500.


        :param consent_request_id: The consent_request_id of this ConsentJsonV500.  # noqa: E501
        :type: str
        """

        self._consent_request_id = consent_request_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsentJsonV500, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsentJsonV500):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConsentJsonV500):
            return True

        return self.to_dict() != other.to_dict()
