# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class AccountBasicV310(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'label': 'str',
        'views_available': 'list[ViewBasic]',
        'bank_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'views_available': 'views_available',
        'bank_id': 'bank_id'
    }

    def __init__(self, id=None, label=None, views_available=None, bank_id=None, _configuration=None):  # noqa: E501
        """AccountBasicV310 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._label = None
        self._views_available = None
        self._bank_id = None
        self.discriminator = None

        self.id = id
        self.label = label
        self.views_available = views_available
        self.bank_id = bank_id

    @property
    def id(self):
        """Gets the id of this AccountBasicV310.  # noqa: E501


        :return: The id of this AccountBasicV310.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountBasicV310.


        :param id: The id of this AccountBasicV310.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label(self):
        """Gets the label of this AccountBasicV310.  # noqa: E501


        :return: The label of this AccountBasicV310.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AccountBasicV310.


        :param label: The label of this AccountBasicV310.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def views_available(self):
        """Gets the views_available of this AccountBasicV310.  # noqa: E501


        :return: The views_available of this AccountBasicV310.  # noqa: E501
        :rtype: list[ViewBasic]
        """
        return self._views_available

    @views_available.setter
    def views_available(self, views_available):
        """Sets the views_available of this AccountBasicV310.


        :param views_available: The views_available of this AccountBasicV310.  # noqa: E501
        :type: list[ViewBasic]
        """
        if self._configuration.client_side_validation and views_available is None:
            raise ValueError("Invalid value for `views_available`, must not be `None`")  # noqa: E501

        self._views_available = views_available

    @property
    def bank_id(self):
        """Gets the bank_id of this AccountBasicV310.  # noqa: E501


        :return: The bank_id of this AccountBasicV310.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this AccountBasicV310.


        :param bank_id: The bank_id of this AccountBasicV310.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountBasicV310, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountBasicV310):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountBasicV310):
            return True

        return self.to_dict() != other.to_dict()
